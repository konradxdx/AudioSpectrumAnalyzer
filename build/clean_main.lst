ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 23, 1
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"clean_main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Core/Src/clean_main.c"
  18              		.section	.text.exitMenu,"ax",%progbits
  19              		.align	1
  20              		.p2align 2,,3
  21              		.global	exitMenu
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	exitMenu:
  27              	.LFB262:
   1:Core/Src/clean_main.c **** /*
   2:Core/Src/clean_main.c ****  * clean_main.c
   3:Core/Src/clean_main.c ****  *
   4:Core/Src/clean_main.c ****  *  Created on: 15 gru 2022
   5:Core/Src/clean_main.c ****  *      Author: Konrad
   6:Core/Src/clean_main.c ****  */
   7:Core/Src/clean_main.c **** #define ARM_MATH_CM4
   8:Core/Src/clean_main.c **** #define BLOCK_SIZE 2048
   9:Core/Src/clean_main.c **** #define FILTER_NUMBER 12
  10:Core/Src/clean_main.c **** 
  11:Core/Src/clean_main.c **** 
  12:Core/Src/clean_main.c **** #include "main.h"
  13:Core/Src/clean_main.c **** #include "adc.h"
  14:Core/Src/clean_main.c **** #include "spi.h"
  15:Core/Src/clean_main.c **** #include "dma.h"
  16:Core/Src/clean_main.c **** #include "tim.h"
  17:Core/Src/clean_main.c **** #include "usart.h"
  18:Core/Src/clean_main.c **** #include "gpio.h"
  19:Core/Src/clean_main.c **** #include <stdbool.h>
  20:Core/Src/clean_main.c **** #include "arm_math.h"
  21:Core/Src/clean_main.c **** #include "enc_disp.h"
  22:Core/Src/clean_main.c **** #include "dac_driver.h"
  23:Core/Src/clean_main.c **** 
  24:Core/Src/clean_main.c **** //global variables 
  25:Core/Src/clean_main.c **** int16_t stan_enc = 0;
  26:Core/Src/clean_main.c **** uint16_t measured_us = 0;
  27:Core/Src/clean_main.c **** float32_t offset = 0.11707317;
  28:Core/Src/clean_main.c **** uint8_t nixie_state = 0;
  29:Core/Src/clean_main.c **** 
  30:Core/Src/clean_main.c **** //settings
  31:Core/Src/clean_main.c **** uint8_t operating_mode = 0; //0-average two channels 1-left 2-right
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 2


  32:Core/Src/clean_main.c **** uint8_t step_size = 5;		//0-10 range
  33:Core/Src/clean_main.c **** uint8_t default_screen = 0; //0-blank screen 1-default text 2-clock
  34:Core/Src/clean_main.c **** uint16_t timeout = 10;		//time to wait before turning off lamps when there is no audio signal
  35:Core/Src/clean_main.c **** 
  36:Core/Src/clean_main.c **** //filter and display variables and arrays
  37:Core/Src/clean_main.c **** float32_t filterState[FILTER_NUMBER][2];
  38:Core/Src/clean_main.c **** float32_t filterCoefficients[FILTER_NUMBER][5] = {
  39:Core/Src/clean_main.c **** 	{1,0,-1,(float32_t)1.997391684898714547813369790674187242985,(float32_t)-0.99741212399430956292434
  40:Core/Src/clean_main.c **** 	{1,0,-1,(float32_t)1.995413068693758118499204101681243628263,(float32_t)-0.99547560251750877302612
  41:Core/Src/clean_main.c **** 	{1,0,-1,(float32_t)1.991923221573191238320532647776417434216,(float32_t)-0.99211354062917811447164
  42:Core/Src/clean_main.c **** 	{1,0,-1,(float32_t)1.985850578617751827081860938051249831915,(float32_t)-0.98641674837998272185046
  43:Core/Src/clean_main.c **** 	{1,0,-1,(float32_t)1.974825534194301290824569150572642683983,(float32_t)-0.97652478560333944024307
  44:Core/Src/clean_main.c **** 	{1,0,-1,(float32_t)1.953898987653213570325760883861221373081,(float32_t)-0.95910026628078159927071
  45:Core/Src/clean_main.c **** 	{1,0,-1,(float32_t)1.915270578384612232270001186407171189785,(float32_t)-0.93049309303351879218979
  46:Core/Src/clean_main.c **** 	{1,0,-1,(float32_t)1.841716645687592857072445440280716866255,(float32_t)-0.88455614306044472172629
  47:Core/Src/clean_main.c **** 	{1,0,-1,(float32_t)1.677710466777201592236679061898030340672,(float32_t)-0.80442342029592173169305
  48:Core/Src/clean_main.c **** 	{1,0,-1,(float32_t)1.335167626320647338289404615352395921946,(float32_t)-0.68159165223463169525075
  49:Core/Src/clean_main.c **** 	{1,0,-1,(float32_t)0.637552258449676889640045374108012765646,(float32_t)-0.49737732924063193795660
  50:Core/Src/clean_main.c **** 	{1,0,-1,(float32_t)-0.516464981783446352991973071766551584005,(float32_t)-0.2129875548550811403814
  51:Core/Src/clean_main.c **** };
  52:Core/Src/clean_main.c **** float32_t gain[FILTER_NUMBER]={
  53:Core/Src/clean_main.c **** 	(float32_t)0.001293938002845385071282180433627218008 ,
  54:Core/Src/clean_main.c **** 	(float32_t)0.00226219874124578002039243074250407517  ,
  55:Core/Src/clean_main.c **** 	(float32_t)0.003943229685410942764178798825014382601 ,
  56:Core/Src/clean_main.c **** 	(float32_t)0.006791625810008472541312585235573351383 ,
  57:Core/Src/clean_main.c **** 	(float32_t)0.011737607198330390900764541584067046642 ,
  58:Core/Src/clean_main.c **** 	(float32_t)0.020449866859609366898098414822015911341 ,
  59:Core/Src/clean_main.c **** 	(float32_t)0.034753453483240659416253492963733151555 ,
  60:Core/Src/clean_main.c **** 	(float32_t)0.057721928469777639136850666545797139406 ,
  61:Core/Src/clean_main.c **** 	(float32_t)0.097788289852039023131169415137264877558 ,
  62:Core/Src/clean_main.c **** 	(float32_t)0.159204173882684152374622499337419867516 ,
  63:Core/Src/clean_main.c **** 	(float32_t)0.251311335379683975510545224096858873963 ,
  64:Core/Src/clean_main.c **** 	(float32_t)0.393506222572459485320450767176225781441 
  65:Core/Src/clean_main.c **** };
  66:Core/Src/clean_main.c **** float32_t filterOut[FILTER_NUMBER][BLOCK_SIZE];
  67:Core/Src/clean_main.c **** arm_biquad_cascade_df2T_instance_f32 filter[FILTER_NUMBER];
  68:Core/Src/clean_main.c **** //raw adc sample array for DMA to write into
  69:Core/Src/clean_main.c **** uint16_t samples[BLOCK_SIZE*2];
  70:Core/Src/clean_main.c **** //array with selected left right or calculated avg. values to feed into filter
  71:Core/Src/clean_main.c **** float32_t filterIn[BLOCK_SIZE];
  72:Core/Src/clean_main.c **** //raw values to display and smoothed ones
  73:Core/Src/clean_main.c **** float32_t bar_values[FILTER_NUMBER];
  74:Core/Src/clean_main.c **** float32_t smooth_bar_values[FILTER_NUMBER];
  75:Core/Src/clean_main.c **** 
  76:Core/Src/clean_main.c **** //menu option typedef 
  77:Core/Src/clean_main.c **** typedef struct menu_option{
  78:Core/Src/clean_main.c **** 	char * prompt;
  79:Core/Src/clean_main.c **** 	void (*func)(void);
  80:Core/Src/clean_main.c **** }menu_option;
  81:Core/Src/clean_main.c **** 
  82:Core/Src/clean_main.c **** void initializeFilters(uint8_t numberOfFilters){
  83:Core/Src/clean_main.c **** 	for(uint8_t i=0;i<numberOfFilters;i++){
  84:Core/Src/clean_main.c **** 		arm_biquad_cascade_df2T_init_f32(&filter[i],1,filterCoefficients[i],filterState[i]);
  85:Core/Src/clean_main.c **** 	}
  86:Core/Src/clean_main.c **** }
  87:Core/Src/clean_main.c **** 
  88:Core/Src/clean_main.c **** void processBand(uint8_t bandNumber){
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 3


  89:Core/Src/clean_main.c **** 	//return if wrong bar number
  90:Core/Src/clean_main.c **** 	if(bandNumber>FILTER_NUMBER-1) return; 
  91:Core/Src/clean_main.c **** 	//calculate filter output
  92:Core/Src/clean_main.c **** 	arm_biquad_cascade_df2T_f32(&filter[bandNumber],filterIn,filterOut[bandNumber],BLOCK_SIZE);
  93:Core/Src/clean_main.c **** 	//set first value from filter output as max for start 
  94:Core/Src/clean_main.c **** 	uint16_t max_value = filterOut[bandNumber][0]; 
  95:Core/Src/clean_main.c **** 	//search for maximum value in array
  96:Core/Src/clean_main.c **** 	for(uint16_t i=1;i<BLOCK_SIZE;i++){
  97:Core/Src/clean_main.c **** 		if(filterOut[bandNumber][i]>max_value) max_value = filterOut[bandNumber][i];
  98:Core/Src/clean_main.c **** 	}
  99:Core/Src/clean_main.c **** 	//calculate bar_values with gain correction
 100:Core/Src/clean_main.c **** 	bar_values[bandNumber] = max_value * gain[bandNumber];
 101:Core/Src/clean_main.c **** }
 102:Core/Src/clean_main.c **** 
 103:Core/Src/clean_main.c **** void switchTube(bool state){
 104:Core/Src/clean_main.c **** 	HAL_GPIO_WritePin(EN_TUBE_GPIO_Port,EN_TUBE_Pin,state);
 105:Core/Src/clean_main.c **** }
 106:Core/Src/clean_main.c **** 
 107:Core/Src/clean_main.c **** void TestFilterOut(){
 108:Core/Src/clean_main.c **** 	stan_enc = 0 ;
 109:Core/Src/clean_main.c **** 	while(button() == 0){
 110:Core/Src/clean_main.c **** 	
 111:Core/Src/clean_main.c **** 		UpdateEnc(0, FILTER_NUMBER-1, &stan_enc, false);
 112:Core/Src/clean_main.c **** 		dprint("Filter: %.3fV CH:%2dtime[us]:%d",bar_values[stan_enc],stan_enc,measured_us);
 113:Core/Src/clean_main.c **** 		HAL_Delay(100);
 114:Core/Src/clean_main.c **** 	}
 115:Core/Src/clean_main.c **** }
 116:Core/Src/clean_main.c **** 
 117:Core/Src/clean_main.c **** void changeSamplingMode(){
 118:Core/Src/clean_main.c **** 	stan_enc = 0 ;
 119:Core/Src/clean_main.c **** 	while(button() == 0){
 120:Core/Src/clean_main.c **** 	
 121:Core/Src/clean_main.c **** 		UpdateEnc(0, 2, &stan_enc, false);
 122:Core/Src/clean_main.c **** 		operating_mode = stan_enc;
 123:Core/Src/clean_main.c **** 		if(stan_enc == 0)	dprint("Sampling mode:      avg. of two channels");
 124:Core/Src/clean_main.c **** 		if(stan_enc == 1)	dprint("Sampling mode:      left channel only   "); 
 125:Core/Src/clean_main.c **** 		if(stan_enc == 2)	dprint("Sampling mode:      right channel only  ");
 126:Core/Src/clean_main.c **** 		HAL_Delay(100);
 127:Core/Src/clean_main.c **** 	}
 128:Core/Src/clean_main.c **** }
 129:Core/Src/clean_main.c **** 
 130:Core/Src/clean_main.c **** void changeIncStep(){
 131:Core/Src/clean_main.c **** 	stan_enc = 1 ;
 132:Core/Src/clean_main.c **** 	while(button() == 0){
 133:Core/Src/clean_main.c **** 		UpdateEnc(1, 10, &stan_enc, false);
 134:Core/Src/clean_main.c **** 		step_size = stan_enc;
 135:Core/Src/clean_main.c **** 		dprint("Step value: %d",step_size);
 136:Core/Src/clean_main.c **** 		HAL_Delay(100);
 137:Core/Src/clean_main.c **** 	}	
 138:Core/Src/clean_main.c **** }
 139:Core/Src/clean_main.c **** 
 140:Core/Src/clean_main.c **** void changeTimeout(){
 141:Core/Src/clean_main.c **** 	stan_enc = 1 ;
 142:Core/Src/clean_main.c **** 	while(button() == 0){
 143:Core/Src/clean_main.c **** 		UpdateEnc(1, 180, &stan_enc, false);
 144:Core/Src/clean_main.c **** 		timeout = stan_enc*10;
 145:Core/Src/clean_main.c **** 		dprint("Timeout in seconds: %d",timeout);
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 4


 146:Core/Src/clean_main.c **** 		HAL_Delay(100);
 147:Core/Src/clean_main.c **** 	}	
 148:Core/Src/clean_main.c **** }
 149:Core/Src/clean_main.c **** 
 150:Core/Src/clean_main.c **** void changeDefaultScreen(){
 151:Core/Src/clean_main.c **** 	stan_enc = 0 ;
 152:Core/Src/clean_main.c **** 	while(button() == 0){
 153:Core/Src/clean_main.c **** 		UpdateEnc(0, 2, &stan_enc, false);
 154:Core/Src/clean_main.c **** 		default_screen = stan_enc;
 155:Core/Src/clean_main.c **** 		if(stan_enc == 0)	dprint("Default screen:     blank               ");
 156:Core/Src/clean_main.c **** 		if(stan_enc == 1)	dprint("Default screen:     device name         "); 
 157:Core/Src/clean_main.c **** 		if(stan_enc == 2)	dprint("Default screen:     clock               ");
 158:Core/Src/clean_main.c **** 		HAL_Delay(100);
 159:Core/Src/clean_main.c **** 	}	
 160:Core/Src/clean_main.c **** }
 161:Core/Src/clean_main.c **** 
 162:Core/Src/clean_main.c **** void enable_nixie(){
 163:Core/Src/clean_main.c **** 	if(nixie_state == 0){
 164:Core/Src/clean_main.c **** 		for(uint8_t i=0; i<FILTER_NUMBER;i++){
 165:Core/Src/clean_main.c **** 			setBarInv(i,0);
 166:Core/Src/clean_main.c **** 			smooth_bar_values[i] = 0;
 167:Core/Src/clean_main.c **** 		}
 168:Core/Src/clean_main.c **** 		switchTube(1);
 169:Core/Src/clean_main.c **** 		for(uint8_t i=0;i<15;i++){
 170:Core/Src/clean_main.c **** 			for(uint8_t j=0;j<FILTER_NUMBER;j++){
 171:Core/Src/clean_main.c **** 				setBarInv(j,i);
 172:Core/Src/clean_main.c **** 			}
 173:Core/Src/clean_main.c **** 		HAL_Delay(100);
 174:Core/Src/clean_main.c **** 		}
 175:Core/Src/clean_main.c **** 		HAL_TIM_Base_Start_IT(&htim4);	
 176:Core/Src/clean_main.c **** 		nixie_state = 1;	
 177:Core/Src/clean_main.c **** 	}
 178:Core/Src/clean_main.c **** }
 179:Core/Src/clean_main.c **** 
 180:Core/Src/clean_main.c **** void disable_nixie(){
 181:Core/Src/clean_main.c **** 	HAL_TIM_Base_Stop_IT(&htim4);
 182:Core/Src/clean_main.c **** 	switchTube(0);
 183:Core/Src/clean_main.c **** 	nixie_state = 0;
 184:Core/Src/clean_main.c **** }
 185:Core/Src/clean_main.c **** 
 186:Core/Src/clean_main.c **** void testDAC(){
 187:Core/Src/clean_main.c **** 	for(uint8_t i=0; i<FILTER_NUMBER;i++){
 188:Core/Src/clean_main.c **** 		setBarInv(i,0);
 189:Core/Src/clean_main.c **** 		smooth_bar_values[i] = 0;
 190:Core/Src/clean_main.c **** 	}
 191:Core/Src/clean_main.c **** 	HAL_TIM_Base_Stop_IT(&htim4);
 192:Core/Src/clean_main.c **** 	stan_enc = 0;
 193:Core/Src/clean_main.c **** 	while(button() == 0){
 194:Core/Src/clean_main.c **** 		UpdateEnc(0, 3, &stan_enc, false);
 195:Core/Src/clean_main.c **** 		dprint("DAC Channel:%1d",stan_enc);
 196:Core/Src/clean_main.c **** 		HAL_Delay(50);
 197:Core/Src/clean_main.c **** 	}
 198:Core/Src/clean_main.c **** 	int channel = stan_enc;
 199:Core/Src/clean_main.c **** 	while(button() == 1);
 200:Core/Src/clean_main.c **** 	stan_enc = 0;
 201:Core/Src/clean_main.c **** 	while(button() == 0){
 202:Core/Src/clean_main.c **** 		UpdateEnc(0, 3, &stan_enc, false);
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 5


 203:Core/Src/clean_main.c **** 		dprint("Number of DAC:%1d",stan_enc); 
 204:Core/Src/clean_main.c **** 		HAL_Delay(50);
 205:Core/Src/clean_main.c **** 	}
 206:Core/Src/clean_main.c **** 	int dac_number = stan_enc;
 207:Core/Src/clean_main.c **** 	while(button() == 1);
 208:Core/Src/clean_main.c **** 	stan_enc = 0;
 209:Core/Src/clean_main.c **** 	while(button() == 0){
 210:Core/Src/clean_main.c **** 		UpdateEnc(0, 255, &stan_enc, true);
 211:Core/Src/clean_main.c **** 		dprint("DAC output:%3d",stan_enc);
 212:Core/Src/clean_main.c **** 		dac_write(channel,stan_enc,dac_number);
 213:Core/Src/clean_main.c **** 		HAL_Delay(50);	
 214:Core/Src/clean_main.c **** 	}
 215:Core/Src/clean_main.c **** 	nixie_state = 0;
 216:Core/Src/clean_main.c **** 	enable_nixie();
 217:Core/Src/clean_main.c **** }
 218:Core/Src/clean_main.c **** 
 219:Core/Src/clean_main.c **** void testAllDac(){
 220:Core/Src/clean_main.c **** 	for(uint8_t i=0; i<FILTER_NUMBER;i++){
 221:Core/Src/clean_main.c **** 		setBarInv(i,0);
 222:Core/Src/clean_main.c **** 		smooth_bar_values[i] = 0;
 223:Core/Src/clean_main.c **** 	}
 224:Core/Src/clean_main.c **** 	HAL_TIM_Base_Stop_IT(&htim4);
 225:Core/Src/clean_main.c **** 	dprint("Testing all DACs    sequentially");
 226:Core/Src/clean_main.c **** 	for(uint8_t i=0;i<12;i++){
 227:Core/Src/clean_main.c **** 		for(uint8_t j=0;j<220;j++){
 228:Core/Src/clean_main.c **** 			setBarInv(i,j);
 229:Core/Src/clean_main.c **** 			HAL_Delay(5);
 230:Core/Src/clean_main.c **** 			if(button()==1){
 231:Core/Src/clean_main.c **** 				nixie_state = 0;
 232:Core/Src/clean_main.c **** 				enable_nixie();
 233:Core/Src/clean_main.c **** 				return;
 234:Core/Src/clean_main.c **** 			} 
 235:Core/Src/clean_main.c **** 		}
 236:Core/Src/clean_main.c **** 		for(uint8_t j=220;j>5;j--){
 237:Core/Src/clean_main.c **** 			setBarInv(i,j);
 238:Core/Src/clean_main.c **** 			HAL_Delay(5);
 239:Core/Src/clean_main.c **** 			if(button()==1){
 240:Core/Src/clean_main.c **** 				nixie_state = 0;
 241:Core/Src/clean_main.c **** 				enable_nixie();
 242:Core/Src/clean_main.c **** 				return;
 243:Core/Src/clean_main.c **** 			} 
 244:Core/Src/clean_main.c **** 		}
 245:Core/Src/clean_main.c **** 	}
 246:Core/Src/clean_main.c **** 	for(uint8_t i=0;i<12;i++) setBar(i,220);
 247:Core/Src/clean_main.c **** 	while(button()==0);
 248:Core/Src/clean_main.c **** 	nixie_state = 0;
 249:Core/Src/clean_main.c **** 	enable_nixie();
 250:Core/Src/clean_main.c **** }
 251:Core/Src/clean_main.c **** 
 252:Core/Src/clean_main.c **** void defaultScreen(){
 253:Core/Src/clean_main.c **** 	while(button() == 1);
 254:Core/Src/clean_main.c **** 
 255:Core/Src/clean_main.c **** 	//stay with clear display
 256:Core/Src/clean_main.c **** 	if(default_screen == 0){
 257:Core/Src/clean_main.c **** 		clearDisp();
 258:Core/Src/clean_main.c **** 	}
 259:Core/Src/clean_main.c **** 	//stay with default text
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 6


 260:Core/Src/clean_main.c **** 	if(default_screen == 1){
 261:Core/Src/clean_main.c **** 		dprint("   Nixie spectrum          analyzer      ");
 262:Core/Src/clean_main.c **** 	}
 263:Core/Src/clean_main.c **** 
 264:Core/Src/clean_main.c **** 	while(button()==0){
 265:Core/Src/clean_main.c **** 		for(uint8_t i=0;i<timeout*2;i++){
 266:Core/Src/clean_main.c **** 			if(button() == 1){
 267:Core/Src/clean_main.c **** 				enable_nixie();
 268:Core/Src/clean_main.c **** 				while(button() == 1);
 269:Core/Src/clean_main.c **** 				return;
 270:Core/Src/clean_main.c **** 			}
 271:Core/Src/clean_main.c **** 			float avg_lvl = 0;
 272:Core/Src/clean_main.c **** 			for(uint8_t j=0;j<FILTER_NUMBER;j++) avg_lvl += bar_values[j];
 273:Core/Src/clean_main.c **** 			avg_lvl = avg_lvl/FILTER_NUMBER;
 274:Core/Src/clean_main.c **** 
 275:Core/Src/clean_main.c **** 			if(avg_lvl > 0.05){
 276:Core/Src/clean_main.c **** 				i=0;
 277:Core/Src/clean_main.c **** 				enable_nixie();
 278:Core/Src/clean_main.c **** 			}
 279:Core/Src/clean_main.c **** 			if(default_screen == 2){
 280:Core/Src/clean_main.c **** 				//wyswietl zegarek
 281:Core/Src/clean_main.c **** 			}
 282:Core/Src/clean_main.c **** 			HAL_Delay(500);
 283:Core/Src/clean_main.c **** 		}
 284:Core/Src/clean_main.c **** 		disable_nixie();
 285:Core/Src/clean_main.c **** 	}
 286:Core/Src/clean_main.c **** 
 287:Core/Src/clean_main.c **** 	while(button() == 1);
 288:Core/Src/clean_main.c **** }
 289:Core/Src/clean_main.c **** 
 290:Core/Src/clean_main.c **** void exitMenu(){
  28              		.loc 1 290 16 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
 291:Core/Src/clean_main.c **** 	return;
  33              		.loc 1 291 2 view .LVU1
 292:Core/Src/clean_main.c **** }
  34              		.loc 1 292 1 is_stmt 0 view .LVU2
  35 0000 7047     		bx	lr
  36              		.cfi_endproc
  37              	.LFE262:
  39              		.global	__aeabi_f2d
  40 0002 00BF     		.section	.rodata.TestFilterOut.str1.4,"aMS",%progbits,1
  41              		.align	2
  42              	.LC11:
  43 0000 46696C74 		.ascii	"Filter: %.3fV CH:%2dtime[us]:%d\000"
  43      65723A20 
  43      252E3366 
  43      56204348 
  43      3A253264 
  44              		.section	.text.TestFilterOut,"ax",%progbits
  45              		.align	1
  46              		.p2align 2,,3
  47              		.global	TestFilterOut
  48              		.syntax unified
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 7


  49              		.thumb
  50              		.thumb_func
  52              	TestFilterOut:
  53              	.LFB252:
 107:Core/Src/clean_main.c **** 	stan_enc = 0 ;
  54              		.loc 1 107 21 is_stmt 1 view -0
  55              		.cfi_startproc
  56              		@ args = 0, pretend = 0, frame = 0
  57              		@ frame_needed = 0, uses_anonymous_args = 0
 108:Core/Src/clean_main.c **** 	while(button() == 0){
  58              		.loc 1 108 2 view .LVU4
 107:Core/Src/clean_main.c **** 	stan_enc = 0 ;
  59              		.loc 1 107 21 is_stmt 0 view .LVU5
  60 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  61              		.cfi_def_cfa_offset 20
  62              		.cfi_offset 4, -20
  63              		.cfi_offset 5, -16
  64              		.cfi_offset 6, -12
  65              		.cfi_offset 7, -8
  66              		.cfi_offset 14, -4
 108:Core/Src/clean_main.c **** 	while(button() == 0){
  67              		.loc 1 108 11 view .LVU6
  68 0002 124D     		ldr	r5, .L7
 112:Core/Src/clean_main.c **** 		HAL_Delay(100);
  69              		.loc 1 112 54 view .LVU7
  70 0004 124F     		ldr	r7, .L7+4
 112:Core/Src/clean_main.c **** 		HAL_Delay(100);
  71              		.loc 1 112 3 view .LVU8
  72 0006 134E     		ldr	r6, .L7+8
 108:Core/Src/clean_main.c **** 	while(button() == 0){
  73              		.loc 1 108 11 view .LVU9
  74 0008 0023     		movs	r3, #0
 107:Core/Src/clean_main.c **** 	stan_enc = 0 ;
  75              		.loc 1 107 21 view .LVU10
  76 000a 83B0     		sub	sp, sp, #12
  77              		.cfi_def_cfa_offset 32
 108:Core/Src/clean_main.c **** 	while(button() == 0){
  78              		.loc 1 108 11 view .LVU11
  79 000c 2B80     		strh	r3, [r5]	@ movhi
 109:Core/Src/clean_main.c **** 	
  80              		.loc 1 109 2 is_stmt 1 view .LVU12
 109:Core/Src/clean_main.c **** 	
  81              		.loc 1 109 7 is_stmt 0 view .LVU13
  82 000e 13E0     		b	.L4
  83              	.L5:
 111:Core/Src/clean_main.c **** 		dprint("Filter: %.3fV CH:%2dtime[us]:%d",bar_values[stan_enc],stan_enc,measured_us);
  84              		.loc 1 111 3 view .LVU14
  85 0010 FFF7FEFF 		bl	UpdateEnc
  86              	.LVL0:
 112:Core/Src/clean_main.c **** 		HAL_Delay(100);
  87              		.loc 1 112 3 is_stmt 1 view .LVU15
 112:Core/Src/clean_main.c **** 		HAL_Delay(100);
  88              		.loc 1 112 54 is_stmt 0 view .LVU16
  89 0014 B5F90040 		ldrsh	r4, [r5]
  90 0018 07EB8403 		add	r3, r7, r4, lsl #2
 112:Core/Src/clean_main.c **** 		HAL_Delay(100);
  91              		.loc 1 112 3 view .LVU17
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 8


  92 001c 1868     		ldr	r0, [r3]	@ float
  93 001e FFF7FEFF 		bl	__aeabi_f2d
  94              	.LVL1:
  95 0022 0B46     		mov	r3, r1
  96 0024 3188     		ldrh	r1, [r6]
  97 0026 0246     		mov	r2, r0
  98 0028 CDE90041 		strd	r4, r1, [sp]
  99 002c 0A48     		ldr	r0, .L7+12
 100 002e FFF7FEFF 		bl	dprint
 101              	.LVL2:
 113:Core/Src/clean_main.c **** 	}
 102              		.loc 1 113 3 is_stmt 1 view .LVU18
 103 0032 6420     		movs	r0, #100
 104 0034 FFF7FEFF 		bl	HAL_Delay
 105              	.LVL3:
 106              	.L4:
 109:Core/Src/clean_main.c **** 	
 107              		.loc 1 109 17 view .LVU19
 109:Core/Src/clean_main.c **** 	
 108              		.loc 1 109 8 is_stmt 0 view .LVU20
 109 0038 FFF7FEFF 		bl	button
 110              	.LVL4:
 111:Core/Src/clean_main.c **** 		dprint("Filter: %.3fV CH:%2dtime[us]:%d",bar_values[stan_enc],stan_enc,measured_us);
 111              		.loc 1 111 3 is_stmt 1 view .LVU21
 112 003c 0B21     		movs	r1, #11
 109:Core/Src/clean_main.c **** 	
 113              		.loc 1 109 8 is_stmt 0 view .LVU22
 114 003e 0346     		mov	r3, r0
 111:Core/Src/clean_main.c **** 		dprint("Filter: %.3fV CH:%2dtime[us]:%d",bar_values[stan_enc],stan_enc,measured_us);
 115              		.loc 1 111 3 view .LVU23
 116 0040 2A46     		mov	r2, r5
 109:Core/Src/clean_main.c **** 	
 117              		.loc 1 109 17 discriminator 1 view .LVU24
 118 0042 0028     		cmp	r0, #0
 119 0044 E4D0     		beq	.L5
 115:Core/Src/clean_main.c **** 
 120              		.loc 1 115 1 view .LVU25
 121 0046 03B0     		add	sp, sp, #12
 122              		.cfi_def_cfa_offset 20
 123              		@ sp needed
 124 0048 F0BD     		pop	{r4, r5, r6, r7, pc}
 125              	.L8:
 126 004a 00BF     		.align	2
 127              	.L7:
 128 004c 00000000 		.word	stan_enc
 129 0050 00000000 		.word	bar_values
 130 0054 00000000 		.word	measured_us
 131 0058 00000000 		.word	.LC11
 132              		.cfi_endproc
 133              	.LFE252:
 135              		.section	.rodata.changeSamplingMode.str1.4,"aMS",%progbits,1
 136              		.align	2
 137              	.LC12:
 138 0000 53616D70 		.ascii	"Sampling mode:      avg. of two channels\000"
 138      6C696E67 
 138      206D6F64 
 138      653A2020 
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 9


 138      20202020 
 139 0029 000000   		.align	2
 140              	.LC13:
 141 002c 53616D70 		.ascii	"Sampling mode:      left channel only   \000"
 141      6C696E67 
 141      206D6F64 
 141      653A2020 
 141      20202020 
 142 0055 000000   		.align	2
 143              	.LC14:
 144 0058 53616D70 		.ascii	"Sampling mode:      right channel only  \000"
 144      6C696E67 
 144      206D6F64 
 144      653A2020 
 144      20202020 
 145              		.section	.text.changeSamplingMode,"ax",%progbits
 146              		.align	1
 147              		.p2align 2,,3
 148              		.global	changeSamplingMode
 149              		.syntax unified
 150              		.thumb
 151              		.thumb_func
 153              	changeSamplingMode:
 154              	.LFB253:
 117:Core/Src/clean_main.c **** 	stan_enc = 0 ;
 155              		.loc 1 117 26 is_stmt 1 view -0
 156              		.cfi_startproc
 157              		@ args = 0, pretend = 0, frame = 0
 158              		@ frame_needed = 0, uses_anonymous_args = 0
 118:Core/Src/clean_main.c **** 	while(button() == 0){
 159              		.loc 1 118 2 view .LVU27
 117:Core/Src/clean_main.c **** 	stan_enc = 0 ;
 160              		.loc 1 117 26 is_stmt 0 view .LVU28
 161 0000 70B5     		push	{r4, r5, r6, lr}
 162              		.cfi_def_cfa_offset 16
 163              		.cfi_offset 4, -16
 164              		.cfi_offset 5, -12
 165              		.cfi_offset 6, -8
 166              		.cfi_offset 14, -4
 118:Core/Src/clean_main.c **** 	while(button() == 0){
 167              		.loc 1 118 11 view .LVU29
 168 0002 164C     		ldr	r4, .L19
 122:Core/Src/clean_main.c **** 		if(stan_enc == 0)	dprint("Sampling mode:      avg. of two channels");
 169              		.loc 1 122 18 view .LVU30
 170 0004 164D     		ldr	r5, .L19+4
 123:Core/Src/clean_main.c **** 		if(stan_enc == 1)	dprint("Sampling mode:      left channel only   "); 
 171              		.loc 1 123 21 discriminator 1 view .LVU31
 172 0006 174E     		ldr	r6, .L19+8
 118:Core/Src/clean_main.c **** 	while(button() == 0){
 173              		.loc 1 118 11 view .LVU32
 174 0008 0023     		movs	r3, #0
 175 000a 2380     		strh	r3, [r4]	@ movhi
 119:Core/Src/clean_main.c **** 	
 176              		.loc 1 119 2 is_stmt 1 view .LVU33
 119:Core/Src/clean_main.c **** 	
 177              		.loc 1 119 7 is_stmt 0 view .LVU34
 178 000c 06E0     		b	.L10
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 10


 179              	.L11:
 124:Core/Src/clean_main.c **** 		if(stan_enc == 2)	dprint("Sampling mode:      right channel only  ");
 180              		.loc 1 124 3 is_stmt 1 view .LVU35
 124:Core/Src/clean_main.c **** 		if(stan_enc == 2)	dprint("Sampling mode:      right channel only  ");
 181              		.loc 1 124 5 is_stmt 0 view .LVU36
 182 000e 012B     		cmp	r3, #1
 183 0010 18D0     		beq	.L16
 184              	.L12:
 125:Core/Src/clean_main.c **** 		HAL_Delay(100);
 185              		.loc 1 125 3 is_stmt 1 view .LVU37
 125:Core/Src/clean_main.c **** 		HAL_Delay(100);
 186              		.loc 1 125 5 is_stmt 0 view .LVU38
 187 0012 022B     		cmp	r3, #2
 188 0014 1DD0     		beq	.L17
 189              	.L13:
 126:Core/Src/clean_main.c **** 	}
 190              		.loc 1 126 3 is_stmt 1 view .LVU39
 191 0016 6420     		movs	r0, #100
 192 0018 FFF7FEFF 		bl	HAL_Delay
 193              	.LVL5:
 194              	.L10:
 119:Core/Src/clean_main.c **** 	
 195              		.loc 1 119 17 view .LVU40
 119:Core/Src/clean_main.c **** 	
 196              		.loc 1 119 8 is_stmt 0 view .LVU41
 197 001c FFF7FEFF 		bl	button
 198              	.LVL6:
 121:Core/Src/clean_main.c **** 		operating_mode = stan_enc;
 199              		.loc 1 121 3 is_stmt 1 view .LVU42
 200 0020 0221     		movs	r1, #2
 119:Core/Src/clean_main.c **** 	
 201              		.loc 1 119 8 is_stmt 0 view .LVU43
 202 0022 0346     		mov	r3, r0
 121:Core/Src/clean_main.c **** 		operating_mode = stan_enc;
 203              		.loc 1 121 3 view .LVU44
 204 0024 2246     		mov	r2, r4
 119:Core/Src/clean_main.c **** 	
 205              		.loc 1 119 17 discriminator 1 view .LVU45
 206 0026 C0B9     		cbnz	r0, .L18
 121:Core/Src/clean_main.c **** 		operating_mode = stan_enc;
 207              		.loc 1 121 3 view .LVU46
 208 0028 FFF7FEFF 		bl	UpdateEnc
 209              	.LVL7:
 122:Core/Src/clean_main.c **** 		if(stan_enc == 0)	dprint("Sampling mode:      avg. of two channels");
 210              		.loc 1 122 3 is_stmt 1 view .LVU47
 122:Core/Src/clean_main.c **** 		if(stan_enc == 0)	dprint("Sampling mode:      avg. of two channels");
 211              		.loc 1 122 18 is_stmt 0 view .LVU48
 212 002c B4F90030 		ldrsh	r3, [r4]
 213 0030 2B70     		strb	r3, [r5]
 123:Core/Src/clean_main.c **** 		if(stan_enc == 1)	dprint("Sampling mode:      left channel only   "); 
 214              		.loc 1 123 3 is_stmt 1 view .LVU49
 123:Core/Src/clean_main.c **** 		if(stan_enc == 1)	dprint("Sampling mode:      left channel only   "); 
 215              		.loc 1 123 5 is_stmt 0 view .LVU50
 216 0032 002B     		cmp	r3, #0
 217 0034 EBD1     		bne	.L11
 123:Core/Src/clean_main.c **** 		if(stan_enc == 1)	dprint("Sampling mode:      left channel only   "); 
 218              		.loc 1 123 21 is_stmt 1 discriminator 1 view .LVU51
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 11


 219 0036 3046     		mov	r0, r6
 220 0038 FFF7FEFF 		bl	dprint
 221              	.LVL8:
 124:Core/Src/clean_main.c **** 		if(stan_enc == 2)	dprint("Sampling mode:      right channel only  ");
 222              		.loc 1 124 15 is_stmt 0 view .LVU52
 223 003c B4F90030 		ldrsh	r3, [r4]
 124:Core/Src/clean_main.c **** 		if(stan_enc == 2)	dprint("Sampling mode:      right channel only  ");
 224              		.loc 1 124 3 is_stmt 1 view .LVU53
 124:Core/Src/clean_main.c **** 		if(stan_enc == 2)	dprint("Sampling mode:      right channel only  ");
 225              		.loc 1 124 5 is_stmt 0 view .LVU54
 226 0040 012B     		cmp	r3, #1
 227 0042 E6D1     		bne	.L12
 228              	.L16:
 124:Core/Src/clean_main.c **** 		if(stan_enc == 2)	dprint("Sampling mode:      right channel only  ");
 229              		.loc 1 124 21 is_stmt 1 discriminator 1 view .LVU55
 230 0044 0848     		ldr	r0, .L19+12
 231 0046 FFF7FEFF 		bl	dprint
 232              	.LVL9:
 125:Core/Src/clean_main.c **** 		HAL_Delay(100);
 233              		.loc 1 125 15 is_stmt 0 view .LVU56
 234 004a B4F90030 		ldrsh	r3, [r4]
 125:Core/Src/clean_main.c **** 		HAL_Delay(100);
 235              		.loc 1 125 3 is_stmt 1 view .LVU57
 125:Core/Src/clean_main.c **** 		HAL_Delay(100);
 236              		.loc 1 125 5 is_stmt 0 view .LVU58
 237 004e 022B     		cmp	r3, #2
 238 0050 E1D1     		bne	.L13
 239              	.L17:
 125:Core/Src/clean_main.c **** 		HAL_Delay(100);
 240              		.loc 1 125 21 is_stmt 1 discriminator 1 view .LVU59
 241 0052 0648     		ldr	r0, .L19+16
 242 0054 FFF7FEFF 		bl	dprint
 243              	.LVL10:
 244 0058 DDE7     		b	.L13
 245              	.L18:
 128:Core/Src/clean_main.c **** 
 246              		.loc 1 128 1 is_stmt 0 view .LVU60
 247 005a 70BD     		pop	{r4, r5, r6, pc}
 248              	.L20:
 249              		.align	2
 250              	.L19:
 251 005c 00000000 		.word	stan_enc
 252 0060 00000000 		.word	operating_mode
 253 0064 00000000 		.word	.LC12
 254 0068 2C000000 		.word	.LC13
 255 006c 58000000 		.word	.LC14
 256              		.cfi_endproc
 257              	.LFE253:
 259              		.section	.rodata.changeIncStep.str1.4,"aMS",%progbits,1
 260              		.align	2
 261              	.LC15:
 262 0000 53746570 		.ascii	"Step value: %d\000"
 262      2076616C 
 262      75653A20 
 262      256400
 263              		.section	.text.changeIncStep,"ax",%progbits
 264              		.align	1
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 12


 265              		.p2align 2,,3
 266              		.global	changeIncStep
 267              		.syntax unified
 268              		.thumb
 269              		.thumb_func
 271              	changeIncStep:
 272              	.LFB254:
 130:Core/Src/clean_main.c **** 	stan_enc = 1 ;
 273              		.loc 1 130 21 is_stmt 1 view -0
 274              		.cfi_startproc
 275              		@ args = 0, pretend = 0, frame = 0
 276              		@ frame_needed = 0, uses_anonymous_args = 0
 131:Core/Src/clean_main.c **** 	while(button() == 0){
 277              		.loc 1 131 2 view .LVU62
 130:Core/Src/clean_main.c **** 	stan_enc = 1 ;
 278              		.loc 1 130 21 is_stmt 0 view .LVU63
 279 0000 70B5     		push	{r4, r5, r6, lr}
 280              		.cfi_def_cfa_offset 16
 281              		.cfi_offset 4, -16
 282              		.cfi_offset 5, -12
 283              		.cfi_offset 6, -8
 284              		.cfi_offset 14, -4
 131:Core/Src/clean_main.c **** 	while(button() == 0){
 285              		.loc 1 131 11 view .LVU64
 286 0002 0C4C     		ldr	r4, .L25
 134:Core/Src/clean_main.c **** 		dprint("Step value: %d",step_size);
 287              		.loc 1 134 13 view .LVU65
 288 0004 0C4E     		ldr	r6, .L25+4
 135:Core/Src/clean_main.c **** 		HAL_Delay(100);
 289              		.loc 1 135 3 view .LVU66
 290 0006 0D4D     		ldr	r5, .L25+8
 131:Core/Src/clean_main.c **** 	while(button() == 0){
 291              		.loc 1 131 11 view .LVU67
 292 0008 0123     		movs	r3, #1
 293 000a 2380     		strh	r3, [r4]	@ movhi
 132:Core/Src/clean_main.c **** 		UpdateEnc(1, 10, &stan_enc, false);
 294              		.loc 1 132 2 is_stmt 1 view .LVU68
 132:Core/Src/clean_main.c **** 		UpdateEnc(1, 10, &stan_enc, false);
 295              		.loc 1 132 7 is_stmt 0 view .LVU69
 296 000c 09E0     		b	.L22
 297              	.L23:
 133:Core/Src/clean_main.c **** 		step_size = stan_enc;
 298              		.loc 1 133 3 view .LVU70
 299 000e FFF7FEFF 		bl	UpdateEnc
 300              	.LVL11:
 134:Core/Src/clean_main.c **** 		dprint("Step value: %d",step_size);
 301              		.loc 1 134 3 is_stmt 1 view .LVU71
 134:Core/Src/clean_main.c **** 		dprint("Step value: %d",step_size);
 302              		.loc 1 134 13 is_stmt 0 view .LVU72
 303 0012 2178     		ldrb	r1, [r4]	@ zero_extendqisi2
 304 0014 3170     		strb	r1, [r6]
 135:Core/Src/clean_main.c **** 		HAL_Delay(100);
 305              		.loc 1 135 3 is_stmt 1 view .LVU73
 306 0016 2846     		mov	r0, r5
 307 0018 FFF7FEFF 		bl	dprint
 308              	.LVL12:
 136:Core/Src/clean_main.c **** 	}	
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 13


 309              		.loc 1 136 3 view .LVU74
 310 001c 6420     		movs	r0, #100
 311 001e FFF7FEFF 		bl	HAL_Delay
 312              	.LVL13:
 313              	.L22:
 132:Core/Src/clean_main.c **** 		UpdateEnc(1, 10, &stan_enc, false);
 314              		.loc 1 132 17 view .LVU75
 132:Core/Src/clean_main.c **** 		UpdateEnc(1, 10, &stan_enc, false);
 315              		.loc 1 132 8 is_stmt 0 view .LVU76
 316 0022 FFF7FEFF 		bl	button
 317              	.LVL14:
 133:Core/Src/clean_main.c **** 		step_size = stan_enc;
 318              		.loc 1 133 3 is_stmt 1 view .LVU77
 132:Core/Src/clean_main.c **** 		UpdateEnc(1, 10, &stan_enc, false);
 319              		.loc 1 132 8 is_stmt 0 view .LVU78
 320 0026 0346     		mov	r3, r0
 133:Core/Src/clean_main.c **** 		step_size = stan_enc;
 321              		.loc 1 133 3 view .LVU79
 322 0028 0A21     		movs	r1, #10
 323 002a 2246     		mov	r2, r4
 324 002c 0120     		movs	r0, #1
 132:Core/Src/clean_main.c **** 		UpdateEnc(1, 10, &stan_enc, false);
 325              		.loc 1 132 17 discriminator 1 view .LVU80
 326 002e 002B     		cmp	r3, #0
 327 0030 EDD0     		beq	.L23
 138:Core/Src/clean_main.c **** 
 328              		.loc 1 138 1 view .LVU81
 329 0032 70BD     		pop	{r4, r5, r6, pc}
 330              	.L26:
 331              		.align	2
 332              	.L25:
 333 0034 00000000 		.word	stan_enc
 334 0038 00000000 		.word	step_size
 335 003c 00000000 		.word	.LC15
 336              		.cfi_endproc
 337              	.LFE254:
 339              		.section	.rodata.changeTimeout.str1.4,"aMS",%progbits,1
 340              		.align	2
 341              	.LC16:
 342 0000 54696D65 		.ascii	"Timeout in seconds: %d\000"
 342      6F757420 
 342      696E2073 
 342      65636F6E 
 342      64733A20 
 343              		.section	.text.changeTimeout,"ax",%progbits
 344              		.align	1
 345              		.p2align 2,,3
 346              		.global	changeTimeout
 347              		.syntax unified
 348              		.thumb
 349              		.thumb_func
 351              	changeTimeout:
 352              	.LFB255:
 140:Core/Src/clean_main.c **** 	stan_enc = 1 ;
 353              		.loc 1 140 21 is_stmt 1 view -0
 354              		.cfi_startproc
 355              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 14


 356              		@ frame_needed = 0, uses_anonymous_args = 0
 141:Core/Src/clean_main.c **** 	while(button() == 0){
 357              		.loc 1 141 2 view .LVU83
 140:Core/Src/clean_main.c **** 	stan_enc = 1 ;
 358              		.loc 1 140 21 is_stmt 0 view .LVU84
 359 0000 70B5     		push	{r4, r5, r6, lr}
 360              		.cfi_def_cfa_offset 16
 361              		.cfi_offset 4, -16
 362              		.cfi_offset 5, -12
 363              		.cfi_offset 6, -8
 364              		.cfi_offset 14, -4
 141:Core/Src/clean_main.c **** 	while(button() == 0){
 365              		.loc 1 141 11 view .LVU85
 366 0002 0E4C     		ldr	r4, .L31
 144:Core/Src/clean_main.c **** 		dprint("Timeout in seconds: %d",timeout);
 367              		.loc 1 144 11 view .LVU86
 368 0004 0E4E     		ldr	r6, .L31+4
 145:Core/Src/clean_main.c **** 		HAL_Delay(100);
 369              		.loc 1 145 3 view .LVU87
 370 0006 0F4D     		ldr	r5, .L31+8
 141:Core/Src/clean_main.c **** 	while(button() == 0){
 371              		.loc 1 141 11 view .LVU88
 372 0008 0123     		movs	r3, #1
 373 000a 2380     		strh	r3, [r4]	@ movhi
 142:Core/Src/clean_main.c **** 		UpdateEnc(1, 180, &stan_enc, false);
 374              		.loc 1 142 2 is_stmt 1 view .LVU89
 142:Core/Src/clean_main.c **** 		UpdateEnc(1, 180, &stan_enc, false);
 375              		.loc 1 142 7 is_stmt 0 view .LVU90
 376 000c 0DE0     		b	.L28
 377              	.L29:
 143:Core/Src/clean_main.c **** 		timeout = stan_enc*10;
 378              		.loc 1 143 3 view .LVU91
 379 000e FFF7FEFF 		bl	UpdateEnc
 380              	.LVL15:
 144:Core/Src/clean_main.c **** 		dprint("Timeout in seconds: %d",timeout);
 381              		.loc 1 144 3 is_stmt 1 view .LVU92
 144:Core/Src/clean_main.c **** 		dprint("Timeout in seconds: %d",timeout);
 382              		.loc 1 144 21 is_stmt 0 view .LVU93
 383 0012 2188     		ldrh	r1, [r4]
 384 0014 01EB8101 		add	r1, r1, r1, lsl #2
 385 0018 4900     		lsls	r1, r1, #1
 145:Core/Src/clean_main.c **** 		HAL_Delay(100);
 386              		.loc 1 145 3 view .LVU94
 387 001a 2846     		mov	r0, r5
 144:Core/Src/clean_main.c **** 		dprint("Timeout in seconds: %d",timeout);
 388              		.loc 1 144 21 view .LVU95
 389 001c 89B2     		uxth	r1, r1
 144:Core/Src/clean_main.c **** 		dprint("Timeout in seconds: %d",timeout);
 390              		.loc 1 144 11 view .LVU96
 391 001e 3180     		strh	r1, [r6]	@ movhi
 145:Core/Src/clean_main.c **** 		HAL_Delay(100);
 392              		.loc 1 145 3 is_stmt 1 view .LVU97
 393 0020 FFF7FEFF 		bl	dprint
 394              	.LVL16:
 146:Core/Src/clean_main.c **** 	}	
 395              		.loc 1 146 3 view .LVU98
 396 0024 6420     		movs	r0, #100
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 15


 397 0026 FFF7FEFF 		bl	HAL_Delay
 398              	.LVL17:
 399              	.L28:
 142:Core/Src/clean_main.c **** 		UpdateEnc(1, 180, &stan_enc, false);
 400              		.loc 1 142 17 view .LVU99
 142:Core/Src/clean_main.c **** 		UpdateEnc(1, 180, &stan_enc, false);
 401              		.loc 1 142 8 is_stmt 0 view .LVU100
 402 002a FFF7FEFF 		bl	button
 403              	.LVL18:
 143:Core/Src/clean_main.c **** 		timeout = stan_enc*10;
 404              		.loc 1 143 3 is_stmt 1 view .LVU101
 142:Core/Src/clean_main.c **** 		UpdateEnc(1, 180, &stan_enc, false);
 405              		.loc 1 142 8 is_stmt 0 view .LVU102
 406 002e 0346     		mov	r3, r0
 143:Core/Src/clean_main.c **** 		timeout = stan_enc*10;
 407              		.loc 1 143 3 view .LVU103
 408 0030 B421     		movs	r1, #180
 409 0032 2246     		mov	r2, r4
 410 0034 0120     		movs	r0, #1
 142:Core/Src/clean_main.c **** 		UpdateEnc(1, 180, &stan_enc, false);
 411              		.loc 1 142 17 discriminator 1 view .LVU104
 412 0036 002B     		cmp	r3, #0
 413 0038 E9D0     		beq	.L29
 148:Core/Src/clean_main.c **** 
 414              		.loc 1 148 1 view .LVU105
 415 003a 70BD     		pop	{r4, r5, r6, pc}
 416              	.L32:
 417              		.align	2
 418              	.L31:
 419 003c 00000000 		.word	stan_enc
 420 0040 00000000 		.word	timeout
 421 0044 00000000 		.word	.LC16
 422              		.cfi_endproc
 423              	.LFE255:
 425              		.section	.rodata.changeDefaultScreen.str1.4,"aMS",%progbits,1
 426              		.align	2
 427              	.LC17:
 428 0000 44656661 		.ascii	"Default screen:     blank               \000"
 428      756C7420 
 428      73637265 
 428      656E3A20 
 428      20202020 
 429 0029 000000   		.align	2
 430              	.LC18:
 431 002c 44656661 		.ascii	"Default screen:     device name         \000"
 431      756C7420 
 431      73637265 
 431      656E3A20 
 431      20202020 
 432 0055 000000   		.align	2
 433              	.LC19:
 434 0058 44656661 		.ascii	"Default screen:     clock               \000"
 434      756C7420 
 434      73637265 
 434      656E3A20 
 434      20202020 
 435              		.section	.text.changeDefaultScreen,"ax",%progbits
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 16


 436              		.align	1
 437              		.p2align 2,,3
 438              		.global	changeDefaultScreen
 439              		.syntax unified
 440              		.thumb
 441              		.thumb_func
 443              	changeDefaultScreen:
 444              	.LFB256:
 150:Core/Src/clean_main.c **** 	stan_enc = 0 ;
 445              		.loc 1 150 27 is_stmt 1 view -0
 446              		.cfi_startproc
 447              		@ args = 0, pretend = 0, frame = 0
 448              		@ frame_needed = 0, uses_anonymous_args = 0
 151:Core/Src/clean_main.c **** 	while(button() == 0){
 449              		.loc 1 151 2 view .LVU107
 150:Core/Src/clean_main.c **** 	stan_enc = 0 ;
 450              		.loc 1 150 27 is_stmt 0 view .LVU108
 451 0000 70B5     		push	{r4, r5, r6, lr}
 452              		.cfi_def_cfa_offset 16
 453              		.cfi_offset 4, -16
 454              		.cfi_offset 5, -12
 455              		.cfi_offset 6, -8
 456              		.cfi_offset 14, -4
 151:Core/Src/clean_main.c **** 	while(button() == 0){
 457              		.loc 1 151 11 view .LVU109
 458 0002 164C     		ldr	r4, .L43
 154:Core/Src/clean_main.c **** 		if(stan_enc == 0)	dprint("Default screen:     blank               ");
 459              		.loc 1 154 18 view .LVU110
 460 0004 164D     		ldr	r5, .L43+4
 155:Core/Src/clean_main.c **** 		if(stan_enc == 1)	dprint("Default screen:     device name         "); 
 461              		.loc 1 155 21 discriminator 1 view .LVU111
 462 0006 174E     		ldr	r6, .L43+8
 151:Core/Src/clean_main.c **** 	while(button() == 0){
 463              		.loc 1 151 11 view .LVU112
 464 0008 0023     		movs	r3, #0
 465 000a 2380     		strh	r3, [r4]	@ movhi
 152:Core/Src/clean_main.c **** 		UpdateEnc(0, 2, &stan_enc, false);
 466              		.loc 1 152 2 is_stmt 1 view .LVU113
 152:Core/Src/clean_main.c **** 		UpdateEnc(0, 2, &stan_enc, false);
 467              		.loc 1 152 7 is_stmt 0 view .LVU114
 468 000c 06E0     		b	.L34
 469              	.L35:
 156:Core/Src/clean_main.c **** 		if(stan_enc == 2)	dprint("Default screen:     clock               ");
 470              		.loc 1 156 3 is_stmt 1 view .LVU115
 156:Core/Src/clean_main.c **** 		if(stan_enc == 2)	dprint("Default screen:     clock               ");
 471              		.loc 1 156 5 is_stmt 0 view .LVU116
 472 000e 012B     		cmp	r3, #1
 473 0010 18D0     		beq	.L40
 474              	.L36:
 157:Core/Src/clean_main.c **** 		HAL_Delay(100);
 475              		.loc 1 157 3 is_stmt 1 view .LVU117
 157:Core/Src/clean_main.c **** 		HAL_Delay(100);
 476              		.loc 1 157 5 is_stmt 0 view .LVU118
 477 0012 022B     		cmp	r3, #2
 478 0014 1DD0     		beq	.L41
 479              	.L37:
 158:Core/Src/clean_main.c **** 	}	
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 17


 480              		.loc 1 158 3 is_stmt 1 view .LVU119
 481 0016 6420     		movs	r0, #100
 482 0018 FFF7FEFF 		bl	HAL_Delay
 483              	.LVL19:
 484              	.L34:
 152:Core/Src/clean_main.c **** 		UpdateEnc(0, 2, &stan_enc, false);
 485              		.loc 1 152 17 view .LVU120
 152:Core/Src/clean_main.c **** 		UpdateEnc(0, 2, &stan_enc, false);
 486              		.loc 1 152 8 is_stmt 0 view .LVU121
 487 001c FFF7FEFF 		bl	button
 488              	.LVL20:
 153:Core/Src/clean_main.c **** 		default_screen = stan_enc;
 489              		.loc 1 153 3 is_stmt 1 view .LVU122
 490 0020 0221     		movs	r1, #2
 152:Core/Src/clean_main.c **** 		UpdateEnc(0, 2, &stan_enc, false);
 491              		.loc 1 152 8 is_stmt 0 view .LVU123
 492 0022 0346     		mov	r3, r0
 153:Core/Src/clean_main.c **** 		default_screen = stan_enc;
 493              		.loc 1 153 3 view .LVU124
 494 0024 2246     		mov	r2, r4
 152:Core/Src/clean_main.c **** 		UpdateEnc(0, 2, &stan_enc, false);
 495              		.loc 1 152 17 discriminator 1 view .LVU125
 496 0026 C0B9     		cbnz	r0, .L42
 153:Core/Src/clean_main.c **** 		default_screen = stan_enc;
 497              		.loc 1 153 3 view .LVU126
 498 0028 FFF7FEFF 		bl	UpdateEnc
 499              	.LVL21:
 154:Core/Src/clean_main.c **** 		if(stan_enc == 0)	dprint("Default screen:     blank               ");
 500              		.loc 1 154 3 is_stmt 1 view .LVU127
 154:Core/Src/clean_main.c **** 		if(stan_enc == 0)	dprint("Default screen:     blank               ");
 501              		.loc 1 154 18 is_stmt 0 view .LVU128
 502 002c B4F90030 		ldrsh	r3, [r4]
 503 0030 2B70     		strb	r3, [r5]
 155:Core/Src/clean_main.c **** 		if(stan_enc == 1)	dprint("Default screen:     device name         "); 
 504              		.loc 1 155 3 is_stmt 1 view .LVU129
 155:Core/Src/clean_main.c **** 		if(stan_enc == 1)	dprint("Default screen:     device name         "); 
 505              		.loc 1 155 5 is_stmt 0 view .LVU130
 506 0032 002B     		cmp	r3, #0
 507 0034 EBD1     		bne	.L35
 155:Core/Src/clean_main.c **** 		if(stan_enc == 1)	dprint("Default screen:     device name         "); 
 508              		.loc 1 155 21 is_stmt 1 discriminator 1 view .LVU131
 509 0036 3046     		mov	r0, r6
 510 0038 FFF7FEFF 		bl	dprint
 511              	.LVL22:
 156:Core/Src/clean_main.c **** 		if(stan_enc == 2)	dprint("Default screen:     clock               ");
 512              		.loc 1 156 15 is_stmt 0 view .LVU132
 513 003c B4F90030 		ldrsh	r3, [r4]
 156:Core/Src/clean_main.c **** 		if(stan_enc == 2)	dprint("Default screen:     clock               ");
 514              		.loc 1 156 3 is_stmt 1 view .LVU133
 156:Core/Src/clean_main.c **** 		if(stan_enc == 2)	dprint("Default screen:     clock               ");
 515              		.loc 1 156 5 is_stmt 0 view .LVU134
 516 0040 012B     		cmp	r3, #1
 517 0042 E6D1     		bne	.L36
 518              	.L40:
 156:Core/Src/clean_main.c **** 		if(stan_enc == 2)	dprint("Default screen:     clock               ");
 519              		.loc 1 156 21 is_stmt 1 discriminator 1 view .LVU135
 520 0044 0848     		ldr	r0, .L43+12
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 18


 521 0046 FFF7FEFF 		bl	dprint
 522              	.LVL23:
 157:Core/Src/clean_main.c **** 		HAL_Delay(100);
 523              		.loc 1 157 15 is_stmt 0 view .LVU136
 524 004a B4F90030 		ldrsh	r3, [r4]
 157:Core/Src/clean_main.c **** 		HAL_Delay(100);
 525              		.loc 1 157 3 is_stmt 1 view .LVU137
 157:Core/Src/clean_main.c **** 		HAL_Delay(100);
 526              		.loc 1 157 5 is_stmt 0 view .LVU138
 527 004e 022B     		cmp	r3, #2
 528 0050 E1D1     		bne	.L37
 529              	.L41:
 157:Core/Src/clean_main.c **** 		HAL_Delay(100);
 530              		.loc 1 157 21 is_stmt 1 discriminator 1 view .LVU139
 531 0052 0648     		ldr	r0, .L43+16
 532 0054 FFF7FEFF 		bl	dprint
 533              	.LVL24:
 534 0058 DDE7     		b	.L37
 535              	.L42:
 160:Core/Src/clean_main.c **** 
 536              		.loc 1 160 1 is_stmt 0 view .LVU140
 537 005a 70BD     		pop	{r4, r5, r6, pc}
 538              	.L44:
 539              		.align	2
 540              	.L43:
 541 005c 00000000 		.word	stan_enc
 542 0060 00000000 		.word	default_screen
 543 0064 00000000 		.word	.LC17
 544 0068 2C000000 		.word	.LC18
 545 006c 58000000 		.word	.LC19
 546              		.cfi_endproc
 547              	.LFE256:
 549              		.global	__aeabi_i2d
 550              		.global	__aeabi_dmul
 551              		.global	__aeabi_dadd
 552              		.global	__aeabi_d2f
 553              		.global	__aeabi_dsub
 554              		.global	__aeabi_d2uiz
 555              		.section	.text.cyclic_interrupt,"ax",%progbits
 556              		.align	1
 557              		.p2align 2,,3
 558              		.global	cyclic_interrupt
 559              		.syntax unified
 560              		.thumb
 561              		.thumb_func
 563              	cyclic_interrupt:
 564              	.LVL25:
 565              	.LFB265:
 293:Core/Src/clean_main.c **** 
 294:Core/Src/clean_main.c **** void menu(){
 295:Core/Src/clean_main.c **** 
 296:Core/Src/clean_main.c **** 	struct menu_option options[] = {
 297:Core/Src/clean_main.c **** 		{"Bar increment step",changeIncStep},
 298:Core/Src/clean_main.c **** 		{"Sampling mode",changeSamplingMode},
 299:Core/Src/clean_main.c **** 		{"Change timeout",changeTimeout},
 300:Core/Src/clean_main.c **** 		{"Change default      screen",changeDefaultScreen},		
 301:Core/Src/clean_main.c **** 		{"Test DAC", testDAC},
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 19


 302:Core/Src/clean_main.c **** 		{"Test all DAC",testAllDac},
 303:Core/Src/clean_main.c **** 		{"Test filter output",TestFilterOut},
 304:Core/Src/clean_main.c **** 		{"Turn nixie off",disable_nixie},
 305:Core/Src/clean_main.c **** 		{"Turn nixie on",enable_nixie},
 306:Core/Src/clean_main.c **** 		{"Exit",exitMenu}
 307:Core/Src/clean_main.c **** 	};
 308:Core/Src/clean_main.c **** 
 309:Core/Src/clean_main.c **** 	int16_t position = 0;
 310:Core/Src/clean_main.c **** 	uint8_t options_count = sizeof(options)/sizeof(options[0]);
 311:Core/Src/clean_main.c **** 
 312:Core/Src/clean_main.c **** 	while(button()==0){
 313:Core/Src/clean_main.c **** 		UpdateEnc(0,options_count-1, &position, false);
 314:Core/Src/clean_main.c **** 		dprint("%d.%s",position+1, options[position].prompt);
 315:Core/Src/clean_main.c **** 		HAL_Delay(50);
 316:Core/Src/clean_main.c **** 	}
 317:Core/Src/clean_main.c **** 	while(button() == 1);
 318:Core/Src/clean_main.c **** 	options[position].func();
 319:Core/Src/clean_main.c **** 	while(button() == 1);
 320:Core/Src/clean_main.c **** }
 321:Core/Src/clean_main.c **** 
 322:Core/Src/clean_main.c **** void conversion_complete(ADC_HandleTypeDef* hadc) {
 323:Core/Src/clean_main.c **** 
 324:Core/Src/clean_main.c **** 	TIM1 -> CNT = 0;
 325:Core/Src/clean_main.c **** 	HAL_TIM_Base_Start(&htim1);
 326:Core/Src/clean_main.c **** 	//Copy DMA buffer to avoid processing overwritten data, at the same time convert measurements to v
 327:Core/Src/clean_main.c **** 	
 328:Core/Src/clean_main.c **** 	if(operating_mode == 0){	//sum of 2 channels
 329:Core/Src/clean_main.c **** 		for(uint16_t i=0;i<BLOCK_SIZE;i++){
 330:Core/Src/clean_main.c **** 		filterIn[i]= ((samples[i*2]-2048)*(3.3/4096) + (samples[(i*2)+1]-2048)*(3.3/4096))/2;
 331:Core/Src/clean_main.c **** 		}
 332:Core/Src/clean_main.c **** 	}else if(operating_mode == 1){	//left
 333:Core/Src/clean_main.c **** 		for(uint16_t i=0;i<BLOCK_SIZE;i++){			
 334:Core/Src/clean_main.c **** 			filterIn[i]=(samples[i*2]-2048)*(3.3/4096);
 335:Core/Src/clean_main.c **** 		}
 336:Core/Src/clean_main.c **** 	}else if(operating_mode == 2){	//right
 337:Core/Src/clean_main.c **** 		for(uint16_t i=0;i<BLOCK_SIZE;i++){	
 338:Core/Src/clean_main.c **** 			filterIn[i]=(samples[(i*2)+1]-2048)*(3.3/4096);
 339:Core/Src/clean_main.c **** 		}
 340:Core/Src/clean_main.c **** 	}
 341:Core/Src/clean_main.c **** 
 342:Core/Src/clean_main.c **** 	for(uint8_t i=0;i<FILTER_NUMBER;i++){
 343:Core/Src/clean_main.c **** 		processBand(i);
 344:Core/Src/clean_main.c **** 	}
 345:Core/Src/clean_main.c **** 
 346:Core/Src/clean_main.c **** 	HAL_TIM_Base_Stop(&htim1);
 347:Core/Src/clean_main.c **** 	measured_us = TIM1 -> CNT;
 348:Core/Src/clean_main.c **** 
 349:Core/Src/clean_main.c **** }
 350:Core/Src/clean_main.c **** 
 351:Core/Src/clean_main.c **** void cyclic_interrupt(TIM_HandleTypeDef* htim){
 566              		.loc 1 351 47 is_stmt 1 view -0
 567              		.cfi_startproc
 568              		@ args = 0, pretend = 0, frame = 0
 569              		@ frame_needed = 0, uses_anonymous_args = 0
 352:Core/Src/clean_main.c **** 	for(uint8_t i=0;i<FILTER_NUMBER;i++){
 570              		.loc 1 352 2 view .LVU142
 571              	.LBB55:
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 20


 572              		.loc 1 352 6 view .LVU143
 573              		.loc 1 352 19 discriminator 1 view .LVU144
 574              	.LBE55:
 351:Core/Src/clean_main.c **** 	for(uint8_t i=0;i<FILTER_NUMBER;i++){
 575              		.loc 1 351 47 is_stmt 0 view .LVU145
 576 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 577              		.cfi_def_cfa_offset 40
 578              		.cfi_offset 3, -40
 579              		.cfi_offset 4, -36
 580              		.cfi_offset 5, -32
 581              		.cfi_offset 6, -28
 582              		.cfi_offset 7, -24
 583              		.cfi_offset 8, -20
 584              		.cfi_offset 9, -16
 585              		.cfi_offset 10, -12
 586              		.cfi_offset 11, -8
 587              		.cfi_offset 14, -4
 588 0004 DFF8D080 		ldr	r8, .L58+24
 589 0008 314D     		ldr	r5, .L58+16
 590 000a DFF8D0A0 		ldr	r10, .L58+28
 591 000e 2DED028B 		vpush.64	{d8}
 592              		.cfi_def_cfa_offset 48
 593              		.cfi_offset 80, -48
 594              		.cfi_offset 81, -44
 351:Core/Src/clean_main.c **** 	for(uint8_t i=0;i<FILTER_NUMBER;i++){
 595              		.loc 1 351 47 view .LVU146
 596 0012 0024     		movs	r4, #0
 597              	.LBB56:
 353:Core/Src/clean_main.c **** 		if((bar_values[i]+offset)>smooth_bar_values[i]){
 354:Core/Src/clean_main.c **** 			smooth_bar_values[i] += (0.001*step_size);
 355:Core/Src/clean_main.c **** 		}else if((bar_values[i]+offset)<smooth_bar_values[i]){
 356:Core/Src/clean_main.c **** 			smooth_bar_values[i] -= (0.001*step_size);
 357:Core/Src/clean_main.c **** 		}
 358:Core/Src/clean_main.c **** 		setBarInv(i,(uint8_t)(smooth_bar_values[i]*128.125));
 598              		.loc 1 358 45 view .LVU147
 599 0014 4746     		mov	r7, r8
 600 0016 22E0     		b	.L50
 601              	.LVL26:
 602              	.L57:
 354:Core/Src/clean_main.c **** 		}else if((bar_values[i]+offset)<smooth_bar_values[i]){
 603              		.loc 1 354 34 view .LVU148
 604 0018 2E4B     		ldr	r3, .L58+20
 605 001a 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 606 001c FFF7FEFF 		bl	__aeabi_i2d
 607              	.LVL27:
 608 0020 27A3     		adr	r3, .L58
 609 0022 D3E90023 		ldrd	r2, [r3]
 610 0026 FFF7FEFF 		bl	__aeabi_dmul
 611              	.LVL28:
 354:Core/Src/clean_main.c **** 		}else if((bar_values[i]+offset)<smooth_bar_values[i]){
 612              		.loc 1 354 25 view .LVU149
 613 002a 4246     		mov	r2, r8
 614 002c 4B46     		mov	r3, r9
 615 002e FFF7FEFF 		bl	__aeabi_dadd
 616              	.LVL29:
 617 0032 FFF7FEFF 		bl	__aeabi_d2f
 618              	.LVL30:
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 21


 619 0036 0646     		mov	r6, r0	@ float
 620 0038 45F8040C 		str	r0, [r5, #-4]	@ float
 621              	.L48:
 622              		.loc 1 358 3 is_stmt 1 view .LVU150
 623              		.loc 1 358 42 is_stmt 0 view .LVU151
 624 003c 3046     		mov	r0, r6	@ float
 625 003e FFF7FEFF 		bl	__aeabi_f2d
 626              	.LVL31:
 627              		.loc 1 358 45 view .LVU152
 628 0042 21A3     		adr	r3, .L58+8
 629 0044 D3E90023 		ldrd	r2, [r3]
 630 0048 FFF7FEFF 		bl	__aeabi_dmul
 631              	.LVL32:
 632              		.loc 1 358 3 view .LVU153
 633 004c FFF7FEFF 		bl	__aeabi_d2uiz
 634              	.LVL33:
 352:Core/Src/clean_main.c **** 		if((bar_values[i]+offset)>smooth_bar_values[i]){
 635              		.loc 1 352 19 discriminator 1 view .LVU154
 636 0050 0134     		adds	r4, r4, #1
 637              		.loc 1 358 3 view .LVU155
 638 0052 C1B2     		uxtb	r1, r0
 639 0054 5846     		mov	r0, fp
 640 0056 FFF7FEFF 		bl	setBarInv
 641              	.LVL34:
 352:Core/Src/clean_main.c **** 		if((bar_values[i]+offset)>smooth_bar_values[i]){
 642              		.loc 1 352 35 is_stmt 1 discriminator 2 view .LVU156
 352:Core/Src/clean_main.c **** 		if((bar_values[i]+offset)>smooth_bar_values[i]){
 643              		.loc 1 352 19 discriminator 1 view .LVU157
 644 005a 0C2C     		cmp	r4, #12
 645 005c 2BD0     		beq	.L56
 646              	.L50:
 353:Core/Src/clean_main.c **** 		if((bar_values[i]+offset)>smooth_bar_values[i]){
 647              		.loc 1 353 46 is_stmt 0 view .LVU158
 648 005e 55F8046B 		ldr	r6, [r5], #4	@ float
 353:Core/Src/clean_main.c **** 		if((bar_values[i]+offset)>smooth_bar_values[i]){
 649              		.loc 1 353 20 view .LVU159
 650 0062 DAED007A 		vldr.32	s15, [r10]
 353:Core/Src/clean_main.c **** 		if((bar_values[i]+offset)>smooth_bar_values[i]){
 651              		.loc 1 353 17 view .LVU160
 652 0066 B7EC018A 		vldmia.32	r7!, {s16}
 354:Core/Src/clean_main.c **** 		}else if((bar_values[i]+offset)<smooth_bar_values[i]){
 653              		.loc 1 354 21 view .LVU161
 654 006a 3046     		mov	r0, r6	@ float
 353:Core/Src/clean_main.c **** 		if((bar_values[i]+offset)>smooth_bar_values[i]){
 655              		.loc 1 353 20 view .LVU162
 656 006c 38EE278A 		vadd.f32	s16, s16, s15
 354:Core/Src/clean_main.c **** 		}else if((bar_values[i]+offset)<smooth_bar_values[i]){
 657              		.loc 1 354 21 view .LVU163
 658 0070 FFF7FEFF 		bl	__aeabi_f2d
 659              	.LVL35:
 353:Core/Src/clean_main.c **** 		if((bar_values[i]+offset)>smooth_bar_values[i]){
 660              		.loc 1 353 5 view .LVU164
 661 0074 07EE906A 		vmov	s15, r6
 662 0078 B4EEE78A 		vcmpe.f32	s16, s15
 663 007c F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 664 0080 5FFA84FB 		uxtb	fp, r4
 665              	.LVL36:
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 22


 353:Core/Src/clean_main.c **** 		if((bar_values[i]+offset)>smooth_bar_values[i]){
 666              		.loc 1 353 3 is_stmt 1 view .LVU165
 354:Core/Src/clean_main.c **** 		}else if((bar_values[i]+offset)<smooth_bar_values[i]){
 667              		.loc 1 354 4 view .LVU166
 355:Core/Src/clean_main.c **** 			smooth_bar_values[i] -= (0.001*step_size);
 668              		.loc 1 355 9 view .LVU167
 354:Core/Src/clean_main.c **** 		}else if((bar_values[i]+offset)<smooth_bar_values[i]){
 669              		.loc 1 354 21 is_stmt 0 view .LVU168
 670 0084 8046     		mov	r8, r0
 671 0086 8946     		mov	r9, r1
 353:Core/Src/clean_main.c **** 			smooth_bar_values[i] += (0.001*step_size);
 672              		.loc 1 353 5 view .LVU169
 673 0088 C6DC     		bgt	.L57
 356:Core/Src/clean_main.c **** 		}
 674              		.loc 1 356 4 is_stmt 1 view .LVU170
 355:Core/Src/clean_main.c **** 			smooth_bar_values[i] -= (0.001*step_size);
 675              		.loc 1 355 11 is_stmt 0 view .LVU171
 676 008a D7D5     		bpl	.L48
 356:Core/Src/clean_main.c **** 		}
 677              		.loc 1 356 34 view .LVU172
 678 008c 114B     		ldr	r3, .L58+20
 679 008e 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 680 0090 FFF7FEFF 		bl	__aeabi_i2d
 681              	.LVL37:
 682 0094 0AA3     		adr	r3, .L58
 683 0096 D3E90023 		ldrd	r2, [r3]
 684 009a FFF7FEFF 		bl	__aeabi_dmul
 685              	.LVL38:
 686 009e 0246     		mov	r2, r0
 687 00a0 0B46     		mov	r3, r1
 356:Core/Src/clean_main.c **** 		}
 688              		.loc 1 356 25 view .LVU173
 689 00a2 4046     		mov	r0, r8
 690 00a4 4946     		mov	r1, r9
 691 00a6 FFF7FEFF 		bl	__aeabi_dsub
 692              	.LVL39:
 693 00aa FFF7FEFF 		bl	__aeabi_d2f
 694              	.LVL40:
 695 00ae 0646     		mov	r6, r0	@ float
 696 00b0 45F8040C 		str	r0, [r5, #-4]	@ float
 697 00b4 C2E7     		b	.L48
 698              	.LVL41:
 699              	.L56:
 356:Core/Src/clean_main.c **** 		}
 700              		.loc 1 356 25 view .LVU174
 701              	.LBE56:
 359:Core/Src/clean_main.c **** 	}
 360:Core/Src/clean_main.c **** }
 702              		.loc 1 360 1 view .LVU175
 703 00b6 BDEC028B 		vldm	sp!, {d8}
 704              		.cfi_restore 80
 705              		.cfi_restore 81
 706              		.cfi_def_cfa_offset 40
 707 00ba BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 708              	.L59:
 709 00be 00BF     		.align	3
 710              	.L58:
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 23


 711 00c0 FCA9F1D2 		.word	-755914244
 712 00c4 4D62503F 		.word	1062232653
 713 00c8 00000000 		.word	0
 714 00cc 00046040 		.word	1080034304
 715 00d0 00000000 		.word	smooth_bar_values
 716 00d4 00000000 		.word	step_size
 717 00d8 00000000 		.word	bar_values
 718 00dc 00000000 		.word	offset
 719              		.cfi_endproc
 720              	.LFE265:
 722              		.section	.text.disable_nixie,"ax",%progbits
 723              		.align	1
 724              		.p2align 2,,3
 725              		.global	disable_nixie
 726              		.syntax unified
 727              		.thumb
 728              		.thumb_func
 730              	disable_nixie:
 731              	.LFB258:
 180:Core/Src/clean_main.c **** 	HAL_TIM_Base_Stop_IT(&htim4);
 732              		.loc 1 180 21 is_stmt 1 view -0
 733              		.cfi_startproc
 734              		@ args = 0, pretend = 0, frame = 0
 735              		@ frame_needed = 0, uses_anonymous_args = 0
 181:Core/Src/clean_main.c **** 	switchTube(0);
 736              		.loc 1 181 2 view .LVU177
 180:Core/Src/clean_main.c **** 	HAL_TIM_Base_Stop_IT(&htim4);
 737              		.loc 1 180 21 is_stmt 0 view .LVU178
 738 0000 08B5     		push	{r3, lr}
 739              		.cfi_def_cfa_offset 8
 740              		.cfi_offset 3, -8
 741              		.cfi_offset 14, -4
 181:Core/Src/clean_main.c **** 	switchTube(0);
 742              		.loc 1 181 2 view .LVU179
 743 0002 0648     		ldr	r0, .L62
 744 0004 FFF7FEFF 		bl	HAL_TIM_Base_Stop_IT
 745              	.LVL42:
 182:Core/Src/clean_main.c **** 	nixie_state = 0;
 746              		.loc 1 182 2 is_stmt 1 view .LVU180
 747              	.LBB59:
 748              	.LBI59:
 103:Core/Src/clean_main.c **** 	HAL_GPIO_WritePin(EN_TUBE_GPIO_Port,EN_TUBE_Pin,state);
 749              		.loc 1 103 6 view .LVU181
 750              	.LBB60:
 104:Core/Src/clean_main.c **** }
 751              		.loc 1 104 2 view .LVU182
 752 0008 0022     		movs	r2, #0
 753 000a 0548     		ldr	r0, .L62+4
 754 000c 4FF40071 		mov	r1, #512
 755 0010 FFF7FEFF 		bl	HAL_GPIO_WritePin
 756              	.LVL43:
 104:Core/Src/clean_main.c **** }
 757              		.loc 1 104 2 is_stmt 0 view .LVU183
 758              	.LBE60:
 759              	.LBE59:
 183:Core/Src/clean_main.c **** }
 760              		.loc 1 183 2 is_stmt 1 view .LVU184
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 24


 183:Core/Src/clean_main.c **** }
 761              		.loc 1 183 14 is_stmt 0 view .LVU185
 762 0014 034B     		ldr	r3, .L62+8
 763 0016 0022     		movs	r2, #0
 764 0018 1A70     		strb	r2, [r3]
 184:Core/Src/clean_main.c **** 
 765              		.loc 1 184 1 view .LVU186
 766 001a 08BD     		pop	{r3, pc}
 767              	.L63:
 768              		.align	2
 769              	.L62:
 770 001c 00000000 		.word	htim4
 771 0020 00040240 		.word	1073873920
 772 0024 00000000 		.word	nixie_state
 773              		.cfi_endproc
 774              	.LFE258:
 776              		.section	.text.conversion_complete,"ax",%progbits
 777              		.align	1
 778              		.p2align 2,,3
 779              		.global	conversion_complete
 780              		.syntax unified
 781              		.thumb
 782              		.thumb_func
 784              	conversion_complete:
 785              	.LVL44:
 786              	.LFB264:
 322:Core/Src/clean_main.c **** 
 787              		.loc 1 322 51 is_stmt 1 view -0
 788              		.cfi_startproc
 789              		@ args = 0, pretend = 0, frame = 0
 790              		@ frame_needed = 0, uses_anonymous_args = 0
 324:Core/Src/clean_main.c **** 	HAL_TIM_Base_Start(&htim1);
 791              		.loc 1 324 2 view .LVU188
 324:Core/Src/clean_main.c **** 	HAL_TIM_Base_Start(&htim1);
 792              		.loc 1 324 14 is_stmt 0 view .LVU189
 793 0000 5B4B     		ldr	r3, .L84+16
 325:Core/Src/clean_main.c **** 	//Copy DMA buffer to avoid processing overwritten data, at the same time convert measurements to v
 794              		.loc 1 325 2 view .LVU190
 795 0002 5C48     		ldr	r0, .L84+20
 796              	.LVL45:
 322:Core/Src/clean_main.c **** 
 797              		.loc 1 322 51 view .LVU191
 798 0004 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 799              		.cfi_def_cfa_offset 32
 800              		.cfi_offset 4, -32
 801              		.cfi_offset 5, -28
 802              		.cfi_offset 6, -24
 803              		.cfi_offset 7, -20
 804              		.cfi_offset 8, -16
 805              		.cfi_offset 9, -12
 806              		.cfi_offset 10, -8
 807              		.cfi_offset 14, -4
 324:Core/Src/clean_main.c **** 	HAL_TIM_Base_Start(&htim1);
 808              		.loc 1 324 14 view .LVU192
 809 0008 0024     		movs	r4, #0
 810 000a 5C62     		str	r4, [r3, #36]
 325:Core/Src/clean_main.c **** 	//Copy DMA buffer to avoid processing overwritten data, at the same time convert measurements to v
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 25


 811              		.loc 1 325 2 is_stmt 1 view .LVU193
 812 000c FFF7FEFF 		bl	HAL_TIM_Base_Start
 813              	.LVL46:
 328:Core/Src/clean_main.c **** 		for(uint16_t i=0;i<BLOCK_SIZE;i++){
 814              		.loc 1 328 2 view .LVU194
 328:Core/Src/clean_main.c **** 		for(uint16_t i=0;i<BLOCK_SIZE;i++){
 815              		.loc 1 328 20 is_stmt 0 view .LVU195
 816 0010 594B     		ldr	r3, .L84+24
 817 0012 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 328:Core/Src/clean_main.c **** 		for(uint16_t i=0;i<BLOCK_SIZE;i++){
 818              		.loc 1 328 4 view .LVU196
 819 0014 002B     		cmp	r3, #0
 820 0016 6BD1     		bne	.L65
 821 0018 584C     		ldr	r4, .L84+28
 822 001a 594D     		ldr	r5, .L84+32
 823              	.LBB70:
 330:Core/Src/clean_main.c **** 		}
 824              		.loc 1 330 85 view .LVU197
 825 001c 0FF24019 		adr	r9, .L84
 826 0020 D9E90089 		ldrd	r8, [r9]
 827 0024 04F5005A 		add	r10, r4, #8192
 828              	.L66:
 829              	.LVL47:
 330:Core/Src/clean_main.c **** 		}
 830              		.loc 1 330 3 is_stmt 1 view .LVU198
 330:Core/Src/clean_main.c **** 		}
 831              		.loc 1 330 25 is_stmt 0 view .LVU199
 832 0028 2088     		ldrh	r0, [r4]
 330:Core/Src/clean_main.c **** 		}
 833              		.loc 1 330 48 view .LVU200
 834 002a A0F50060 		sub	r0, r0, #2048
 835 002e FFF7FEFF 		bl	__aeabi_i2d
 836              	.LVL48:
 330:Core/Src/clean_main.c **** 		}
 837              		.loc 1 330 58 view .LVU201
 838 0032 6388     		ldrh	r3, [r4, #2]
 330:Core/Src/clean_main.c **** 		}
 839              		.loc 1 330 48 view .LVU202
 840 0034 0646     		mov	r6, r0
 841 0036 A3F50060 		sub	r0, r3, #2048
 842 003a 0F46     		mov	r7, r1
 843 003c FFF7FEFF 		bl	__aeabi_i2d
 844              	.LVL49:
 845 0040 0246     		mov	r2, r0
 846 0042 0B46     		mov	r3, r1
 847 0044 3046     		mov	r0, r6
 848 0046 3946     		mov	r1, r7
 849 0048 FFF7FEFF 		bl	__aeabi_dadd
 850              	.LVL50:
 330:Core/Src/clean_main.c **** 		}
 851              		.loc 1 330 85 view .LVU203
 852 004c 4246     		mov	r2, r8
 853 004e 4B46     		mov	r3, r9
 854 0050 FFF7FEFF 		bl	__aeabi_dmul
 855              	.LVL51:
 856 0054 FFF7FEFF 		bl	__aeabi_d2f
 857              	.LVL52:
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 26


 329:Core/Src/clean_main.c **** 		filterIn[i]= ((samples[i*2]-2048)*(3.3/4096) + (samples[(i*2)+1]-2048)*(3.3/4096))/2;
 858              		.loc 1 329 21 discriminator 1 view .LVU204
 859 0058 0434     		adds	r4, r4, #4
 860              	.LVL53:
 329:Core/Src/clean_main.c **** 		filterIn[i]= ((samples[i*2]-2048)*(3.3/4096) + (samples[(i*2)+1]-2048)*(3.3/4096))/2;
 861              		.loc 1 329 21 discriminator 1 view .LVU205
 862 005a A245     		cmp	r10, r4
 330:Core/Src/clean_main.c **** 		}
 863              		.loc 1 330 85 view .LVU206
 864 005c 45F8040B 		str	r0, [r5], #4	@ float
 329:Core/Src/clean_main.c **** 		filterIn[i]= ((samples[i*2]-2048)*(3.3/4096) + (samples[(i*2)+1]-2048)*(3.3/4096))/2;
 865              		.loc 1 329 34 is_stmt 1 discriminator 3 view .LVU207
 866              	.LVL54:
 329:Core/Src/clean_main.c **** 		filterIn[i]= ((samples[i*2]-2048)*(3.3/4096) + (samples[(i*2)+1]-2048)*(3.3/4096))/2;
 867              		.loc 1 329 21 discriminator 1 view .LVU208
 868 0060 E2D1     		bne	.L66
 869              	.L71:
 870              	.LVL55:
 329:Core/Src/clean_main.c **** 		filterIn[i]= ((samples[i*2]-2048)*(3.3/4096) + (samples[(i*2)+1]-2048)*(3.3/4096))/2;
 871              		.loc 1 329 21 is_stmt 0 discriminator 1 view .LVU209
 872              	.LBE70:
 873              	.LBB71:
 342:Core/Src/clean_main.c **** 		processBand(i);
 874              		.loc 1 342 19 is_stmt 1 discriminator 1 view .LVU210
 342:Core/Src/clean_main.c **** 		processBand(i);
 875              		.loc 1 342 19 is_stmt 0 discriminator 1 view .LVU211
 876 0062 484E     		ldr	r6, .L84+36
 877 0064 DFF82CA1 		ldr	r10, .L84+52
 878 0068 474F     		ldr	r7, .L84+40
 879 006a 484C     		ldr	r4, .L84+44
 880              	.LBB72:
 881              	.LBB73:
 882              	.LBB74:
 883              	.LBB75:
  92:Core/Src/clean_main.c **** 	//set first value from filter output as max for start 
 884              		.loc 1 92 2 view .LVU212
 885 006c DFF81081 		ldr	r8, .L84+32
 886 0070 06F13009 		add	r9, r6, #48
 887              	.L67:
 888              	.LVL56:
  92:Core/Src/clean_main.c **** 	//set first value from filter output as max for start 
 889              		.loc 1 92 2 view .LVU213
 890              	.LBE75:
 891              	.LBE74:
 892              	.LBE73:
 893              	.LBE72:
 343:Core/Src/clean_main.c **** 	}
 894              		.loc 1 343 3 is_stmt 1 view .LVU214
 895              	.LBB84:
 896              	.LBI72:
  88:Core/Src/clean_main.c **** 	//return if wrong bar number
 897              		.loc 1 88 6 view .LVU215
 898              	.LBB82:
  90:Core/Src/clean_main.c **** 	//calculate filter output
 899              		.loc 1 90 2 view .LVU216
 900              	.LBB80:
 901              	.LBI74:
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 27


  88:Core/Src/clean_main.c **** 	//return if wrong bar number
 902              		.loc 1 88 6 view .LVU217
 903              	.LBB78:
  92:Core/Src/clean_main.c **** 	//set first value from filter output as max for start 
 904              		.loc 1 92 2 view .LVU218
  92:Core/Src/clean_main.c **** 	//set first value from filter output as max for start 
 905              		.loc 1 92 68 is_stmt 0 view .LVU219
 906 0074 A4F50055 		sub	r5, r4, #8192
  92:Core/Src/clean_main.c **** 	//set first value from filter output as max for start 
 907              		.loc 1 92 2 view .LVU220
 908 0078 4FF40063 		mov	r3, #2048
 909 007c 2A46     		mov	r2, r5
 910 007e 4146     		mov	r1, r8
 911 0080 5046     		mov	r0, r10
 912 0082 FFF7FEFF 		bl	arm_biquad_cascade_df2T_f32
 913              	.LVL57:
  94:Core/Src/clean_main.c **** 	//search for maximum value in array
 914              		.loc 1 94 2 is_stmt 1 view .LVU221
  94:Core/Src/clean_main.c **** 	//search for maximum value in array
 915              		.loc 1 94 11 is_stmt 0 view .LVU222
 916 0086 95ED007A 		vldr.32	s14, [r5]
 917 008a BCEEC77A 		vcvt.u32.f32	s14, s14
 918 008e A4F5FF53 		sub	r3, r4, #8160
 919 0092 17EE102A 		vmov	r2, s14	@ int
 920 0096 92B2     		uxth	r2, r2
 921 0098 07EE102A 		vmov	s14, r2	@ int
 922              	.LVL58:
  96:Core/Src/clean_main.c **** 		if(filterOut[bandNumber][i]>max_value) max_value = filterOut[bandNumber][i];
 923              		.loc 1 96 2 is_stmt 1 view .LVU223
 924              	.LBB76:
  96:Core/Src/clean_main.c **** 		if(filterOut[bandNumber][i]>max_value) max_value = filterOut[bandNumber][i];
 925              		.loc 1 96 6 view .LVU224
  96:Core/Src/clean_main.c **** 		if(filterOut[bandNumber][i]>max_value) max_value = filterOut[bandNumber][i];
 926              		.loc 1 96 20 discriminator 1 view .LVU225
 927 009c B8EEC77A 		vcvt.f32.s32	s14, s14
 928 00a0 1C3B     		subs	r3, r3, #28
 929              	.LVL59:
 930              	.L75:
  97:Core/Src/clean_main.c **** 	}
 931              		.loc 1 97 3 view .LVU226
  97:Core/Src/clean_main.c **** 	}
 932              		.loc 1 97 42 discriminator 1 view .LVU227
  96:Core/Src/clean_main.c **** 		if(filterOut[bandNumber][i]>max_value) max_value = filterOut[bandNumber][i];
 933              		.loc 1 96 33 discriminator 2 view .LVU228
  97:Core/Src/clean_main.c **** 	}
 934              		.loc 1 97 27 is_stmt 0 view .LVU229
 935 00a2 F3EC017A 		vldmia.32	r3!, {s15}
  96:Core/Src/clean_main.c **** 		if(filterOut[bandNumber][i]>max_value) max_value = filterOut[bandNumber][i];
 936              		.loc 1 96 20 is_stmt 1 discriminator 1 view .LVU230
  97:Core/Src/clean_main.c **** 	}
 937              		.loc 1 97 5 is_stmt 0 view .LVU231
 938 00a6 B4EEE77A 		vcmpe.f32	s14, s15
 939 00aa F1EE10FA 		vmrs	APSR_nzcv, FPSCR
  97:Core/Src/clean_main.c **** 	}
 940              		.loc 1 97 52 discriminator 1 view .LVU232
 941 00ae FCEEE77A 		vcvt.u32.f32	s15, s15
 942              	.LVL60:
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 28


  97:Core/Src/clean_main.c **** 	}
 943              		.loc 1 97 5 view .LVU233
 944 00b2 06D5     		bpl	.L73
  97:Core/Src/clean_main.c **** 	}
 945              		.loc 1 97 52 discriminator 1 view .LVU234
 946 00b4 17EE902A 		vmov	r2, s15	@ int
 947 00b8 92B2     		uxth	r2, r2
 948 00ba 07EE102A 		vmov	s14, r2	@ int
  97:Core/Src/clean_main.c **** 	}
 949              		.loc 1 97 52 discriminator 1 view .LVU235
 950              	.LBE76:
 100:Core/Src/clean_main.c **** }
 951              		.loc 1 100 37 view .LVU236
 952 00be B8EEC77A 		vcvt.f32.s32	s14, s14
 953              	.L73:
 954              	.LBB77:
  96:Core/Src/clean_main.c **** 		if(filterOut[bandNumber][i]>max_value) max_value = filterOut[bandNumber][i];
 955              		.loc 1 96 20 discriminator 1 view .LVU237
 956 00c2 A342     		cmp	r3, r4
 957 00c4 EDD1     		bne	.L75
 958              	.LBE77:
 100:Core/Src/clean_main.c **** }
 959              		.loc 1 100 2 is_stmt 1 view .LVU238
 100:Core/Src/clean_main.c **** }
 960              		.loc 1 100 43 is_stmt 0 view .LVU239
 961 00c6 F6EC017A 		vldmia.32	r6!, {s15}
 962              	.LVL61:
 100:Core/Src/clean_main.c **** }
 963              		.loc 1 100 37 view .LVU240
 964 00ca 27EE277A 		vmul.f32	s14, s14, s15
 965              	.LBE78:
 966              	.LBE80:
 967              	.LBE82:
 968              	.LBE84:
 342:Core/Src/clean_main.c **** 		processBand(i);
 969              		.loc 1 342 19 discriminator 1 view .LVU241
 970 00ce 4E45     		cmp	r6, r9
 971 00d0 0AF10C0A 		add	r10, r10, #12
 972              	.LVL62:
 342:Core/Src/clean_main.c **** 		processBand(i);
 973              		.loc 1 342 19 discriminator 1 view .LVU242
 974 00d4 03F50054 		add	r4, r3, #8192
 975              	.LBB85:
 976              	.LBB83:
 977              	.LBB81:
 978              	.LBB79:
 100:Core/Src/clean_main.c **** }
 979              		.loc 1 100 25 view .LVU243
 980 00d8 A7EC017A 		vstmia.32	r7!, {s14}
 981              	.LVL63:
 100:Core/Src/clean_main.c **** }
 982              		.loc 1 100 25 view .LVU244
 983              	.LBE79:
 984              	.LBE81:
 985              	.LBE83:
 986              	.LBE85:
 342:Core/Src/clean_main.c **** 		processBand(i);
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 29


 987              		.loc 1 342 35 is_stmt 1 discriminator 3 view .LVU245
 342:Core/Src/clean_main.c **** 		processBand(i);
 988              		.loc 1 342 19 discriminator 1 view .LVU246
 989 00dc CAD1     		bne	.L67
 990              	.LBE71:
 346:Core/Src/clean_main.c **** 	measured_us = TIM1 -> CNT;
 991              		.loc 1 346 2 view .LVU247
 992 00de 2548     		ldr	r0, .L84+20
 993 00e0 FFF7FEFF 		bl	HAL_TIM_Base_Stop
 994              	.LVL64:
 347:Core/Src/clean_main.c **** 
 995              		.loc 1 347 2 view .LVU248
 347:Core/Src/clean_main.c **** 
 996              		.loc 1 347 21 is_stmt 0 view .LVU249
 997 00e4 224A     		ldr	r2, .L84+16
 347:Core/Src/clean_main.c **** 
 998              		.loc 1 347 14 view .LVU250
 999 00e6 2A4B     		ldr	r3, .L84+48
 347:Core/Src/clean_main.c **** 
 1000              		.loc 1 347 21 view .LVU251
 1001 00e8 526A     		ldr	r2, [r2, #36]
 347:Core/Src/clean_main.c **** 
 1002              		.loc 1 347 14 view .LVU252
 1003 00ea 1A80     		strh	r2, [r3]	@ movhi
 349:Core/Src/clean_main.c **** 
 1004              		.loc 1 349 1 view .LVU253
 1005 00ec BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1006              	.L65:
 332:Core/Src/clean_main.c **** 		for(uint16_t i=0;i<BLOCK_SIZE;i++){			
 1007              		.loc 1 332 8 is_stmt 1 view .LVU254
 332:Core/Src/clean_main.c **** 		for(uint16_t i=0;i<BLOCK_SIZE;i++){			
 1008              		.loc 1 332 10 is_stmt 0 view .LVU255
 1009 00f0 012B     		cmp	r3, #1
 1010 00f2 1AD0     		beq	.L83
 336:Core/Src/clean_main.c **** 		for(uint16_t i=0;i<BLOCK_SIZE;i++){	
 1011              		.loc 1 336 8 is_stmt 1 view .LVU256
 336:Core/Src/clean_main.c **** 		for(uint16_t i=0;i<BLOCK_SIZE;i++){	
 1012              		.loc 1 336 10 is_stmt 0 view .LVU257
 1013 00f4 022B     		cmp	r3, #2
 1014 00f6 B4D1     		bne	.L71
 1015 00f8 214C     		ldr	r4, .L84+32
 1016 00fa 204D     		ldr	r5, .L84+28
 1017              	.LBB86:
 338:Core/Src/clean_main.c **** 		}
 1018              		.loc 1 338 39 view .LVU258
 1019 00fc 1AA7     		adr	r7, .L84+8
 1020 00fe D7E90067 		ldrd	r6, [r7]
 1021 0102 04F50058 		add	r8, r4, #8192
 1022              	.L72:
 1023              	.LVL65:
 338:Core/Src/clean_main.c **** 		}
 1024              		.loc 1 338 4 is_stmt 1 view .LVU259
 338:Core/Src/clean_main.c **** 		}
 1025              		.loc 1 338 24 is_stmt 0 view .LVU260
 1026 0106 6888     		ldrh	r0, [r5, #2]
 338:Core/Src/clean_main.c **** 		}
 1027              		.loc 1 338 39 view .LVU261
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 30


 1028 0108 A0F50060 		sub	r0, r0, #2048
 1029 010c FFF7FEFF 		bl	__aeabi_i2d
 1030              	.LVL66:
 1031 0110 3246     		mov	r2, r6
 1032 0112 3B46     		mov	r3, r7
 1033 0114 FFF7FEFF 		bl	__aeabi_dmul
 1034              	.LVL67:
 1035 0118 FFF7FEFF 		bl	__aeabi_d2f
 1036              	.LVL68:
 1037 011c 44F8040B 		str	r0, [r4], #4	@ float
 337:Core/Src/clean_main.c **** 			filterIn[i]=(samples[(i*2)+1]-2048)*(3.3/4096);
 1038              		.loc 1 337 34 is_stmt 1 discriminator 3 view .LVU262
 1039              	.LVL69:
 337:Core/Src/clean_main.c **** 			filterIn[i]=(samples[(i*2)+1]-2048)*(3.3/4096);
 1040              		.loc 1 337 21 discriminator 1 view .LVU263
 1041 0120 A045     		cmp	r8, r4
 1042 0122 05F10405 		add	r5, r5, #4
 1043              	.LVL70:
 337:Core/Src/clean_main.c **** 			filterIn[i]=(samples[(i*2)+1]-2048)*(3.3/4096);
 1044              		.loc 1 337 21 is_stmt 0 discriminator 1 view .LVU264
 1045 0126 EED1     		bne	.L72
 1046 0128 9BE7     		b	.L71
 1047              	.LVL71:
 1048              	.L83:
 337:Core/Src/clean_main.c **** 			filterIn[i]=(samples[(i*2)+1]-2048)*(3.3/4096);
 1049              		.loc 1 337 21 discriminator 1 view .LVU265
 1050              	.LBE86:
 1051              	.LBB87:
 334:Core/Src/clean_main.c **** 		}
 1052              		.loc 1 334 35 view .LVU266
 1053 012a 0FA7     		adr	r7, .L84+8
 1054 012c D7E90067 		ldrd	r6, [r7]
 1055 0130 134D     		ldr	r5, .L84+32
 1056 0132 DFF84880 		ldr	r8, .L84+28
 1057              	.L69:
 1058              	.LVL72:
 334:Core/Src/clean_main.c **** 		}
 1059              		.loc 1 334 4 is_stmt 1 view .LVU267
 334:Core/Src/clean_main.c **** 		}
 1060              		.loc 1 334 24 is_stmt 0 view .LVU268
 1061 0136 38F82400 		ldrh	r0, [r8, r4, lsl #2]
 334:Core/Src/clean_main.c **** 		}
 1062              		.loc 1 334 35 view .LVU269
 1063 013a A0F50060 		sub	r0, r0, #2048
 1064 013e FFF7FEFF 		bl	__aeabi_i2d
 1065              	.LVL73:
 1066 0142 3246     		mov	r2, r6
 1067 0144 3B46     		mov	r3, r7
 1068 0146 FFF7FEFF 		bl	__aeabi_dmul
 1069              	.LVL74:
 1070 014a FFF7FEFF 		bl	__aeabi_d2f
 1071              	.LVL75:
 333:Core/Src/clean_main.c **** 			filterIn[i]=(samples[i*2]-2048)*(3.3/4096);
 1072              		.loc 1 333 21 discriminator 1 view .LVU270
 1073 014e 0134     		adds	r4, r4, #1
 1074              	.LVL76:
 333:Core/Src/clean_main.c **** 			filterIn[i]=(samples[i*2]-2048)*(3.3/4096);
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 31


 1075              		.loc 1 333 21 discriminator 1 view .LVU271
 1076 0150 B4F5006F 		cmp	r4, #2048
 334:Core/Src/clean_main.c **** 		}
 1077              		.loc 1 334 35 view .LVU272
 1078 0154 45F8040B 		str	r0, [r5], #4	@ float
 333:Core/Src/clean_main.c **** 			filterIn[i]=(samples[i*2]-2048)*(3.3/4096);
 1079              		.loc 1 333 34 is_stmt 1 discriminator 3 view .LVU273
 1080              	.LVL77:
 333:Core/Src/clean_main.c **** 			filterIn[i]=(samples[i*2]-2048)*(3.3/4096);
 1081              		.loc 1 333 21 discriminator 1 view .LVU274
 1082 0158 EDD1     		bne	.L69
 1083 015a 82E7     		b	.L71
 1084              	.L85:
 1085 015c AFF30080 		.align	3
 1086              	.L84:
 1087 0160 66666666 		.word	1717986918
 1088 0164 66663A3F 		.word	1060791910
 1089 0168 66666666 		.word	1717986918
 1090 016c 66664A3F 		.word	1061840486
 1091 0170 00000140 		.word	1073807360
 1092 0174 00000000 		.word	htim1
 1093 0178 00000000 		.word	operating_mode
 1094 017c 00000000 		.word	samples
 1095 0180 00000000 		.word	filterIn
 1096 0184 00000000 		.word	gain
 1097 0188 00000000 		.word	bar_values
 1098 018c 00200000 		.word	filterOut+8192
 1099 0190 00000000 		.word	measured_us
 1100 0194 00000000 		.word	filter
 1101              	.LBE87:
 1102              		.cfi_endproc
 1103              	.LFE264:
 1105              		.section	.text.enable_nixie,"ax",%progbits
 1106              		.align	1
 1107              		.p2align 2,,3
 1108              		.global	enable_nixie
 1109              		.syntax unified
 1110              		.thumb
 1111              		.thumb_func
 1113              	enable_nixie:
 1114              	.LFB257:
 162:Core/Src/clean_main.c **** 	if(nixie_state == 0){
 1115              		.loc 1 162 20 view -0
 1116              		.cfi_startproc
 1117              		@ args = 0, pretend = 0, frame = 0
 1118              		@ frame_needed = 0, uses_anonymous_args = 0
 163:Core/Src/clean_main.c **** 		for(uint8_t i=0; i<FILTER_NUMBER;i++){
 1119              		.loc 1 163 2 view .LVU276
 162:Core/Src/clean_main.c **** 	if(nixie_state == 0){
 1120              		.loc 1 162 20 is_stmt 0 view .LVU277
 1121 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1122              		.cfi_def_cfa_offset 24
 1123              		.cfi_offset 4, -24
 1124              		.cfi_offset 5, -20
 1125              		.cfi_offset 6, -16
 1126              		.cfi_offset 7, -12
 1127              		.cfi_offset 8, -8
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 32


 1128              		.cfi_offset 14, -4
 163:Core/Src/clean_main.c **** 		for(uint8_t i=0; i<FILTER_NUMBER;i++){
 1129              		.loc 1 163 17 view .LVU278
 1130 0004 DFF86480 		ldr	r8, .L95+12
 1131 0008 98F80050 		ldrb	r5, [r8]	@ zero_extendqisi2
 163:Core/Src/clean_main.c **** 		for(uint8_t i=0; i<FILTER_NUMBER;i++){
 1132              		.loc 1 163 4 view .LVU279
 1133 000c 35BB     		cbnz	r5, .L86
 1134 000e 144E     		ldr	r6, .L95
 1135              	.LBB96:
 1136              	.LBB97:
 1137              	.LBB98:
 166:Core/Src/clean_main.c **** 		}
 1138              		.loc 1 166 25 view .LVU280
 1139 0010 0027     		movs	r7, #0
 1140              	.LBE98:
 1141              	.LBE97:
 1142              	.LBE96:
 163:Core/Src/clean_main.c **** 		for(uint8_t i=0; i<FILTER_NUMBER;i++){
 1143              		.loc 1 163 4 view .LVU281
 1144 0012 2C46     		mov	r4, r5
 1145              	.L88:
 1146              	.LVL78:
 1147              	.LBB108:
 1148              	.LBB106:
 1149              	.LBB99:
 165:Core/Src/clean_main.c **** 			smooth_bar_values[i] = 0;
 1150              		.loc 1 165 4 is_stmt 1 view .LVU282
 1151 0014 E0B2     		uxtb	r0, r4
 1152 0016 0021     		movs	r1, #0
 164:Core/Src/clean_main.c **** 			setBarInv(i,0);
 1153              		.loc 1 164 21 is_stmt 0 discriminator 1 view .LVU283
 1154 0018 0134     		adds	r4, r4, #1
 1155              	.LVL79:
 165:Core/Src/clean_main.c **** 			smooth_bar_values[i] = 0;
 1156              		.loc 1 165 4 view .LVU284
 1157 001a FFF7FEFF 		bl	setBarInv
 1158              	.LVL80:
 166:Core/Src/clean_main.c **** 		}
 1159              		.loc 1 166 4 is_stmt 1 view .LVU285
 164:Core/Src/clean_main.c **** 			setBarInv(i,0);
 1160              		.loc 1 164 21 is_stmt 0 discriminator 1 view .LVU286
 1161 001e 0C2C     		cmp	r4, #12
 166:Core/Src/clean_main.c **** 		}
 1162              		.loc 1 166 25 view .LVU287
 1163 0020 46F8047B 		str	r7, [r6], #4	@ float
 164:Core/Src/clean_main.c **** 			setBarInv(i,0);
 1164              		.loc 1 164 37 is_stmt 1 discriminator 3 view .LVU288
 1165              	.LVL81:
 164:Core/Src/clean_main.c **** 			setBarInv(i,0);
 1166              		.loc 1 164 21 discriminator 1 view .LVU289
 1167 0024 F6D1     		bne	.L88
 1168              	.LBE99:
 168:Core/Src/clean_main.c **** 		for(uint8_t i=0;i<15;i++){
 1169              		.loc 1 168 3 view .LVU290
 1170              	.LVL82:
 1171              	.LBB100:
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 33


 1172              	.LBI100:
 103:Core/Src/clean_main.c **** 	HAL_GPIO_WritePin(EN_TUBE_GPIO_Port,EN_TUBE_Pin,state);
 1173              		.loc 1 103 6 view .LVU291
 1174              	.LBB101:
 104:Core/Src/clean_main.c **** }
 1175              		.loc 1 104 2 view .LVU292
 1176 0026 0F48     		ldr	r0, .L95+4
 1177 0028 0122     		movs	r2, #1
 1178 002a 4FF40071 		mov	r1, #512
 1179 002e FFF7FEFF 		bl	HAL_GPIO_WritePin
 1180              	.LVL83:
 104:Core/Src/clean_main.c **** }
 1181              		.loc 1 104 2 is_stmt 0 view .LVU293
 1182              	.LBE101:
 1183              	.LBE100:
 169:Core/Src/clean_main.c **** 			for(uint8_t j=0;j<FILTER_NUMBER;j++){
 1184              		.loc 1 169 3 is_stmt 1 view .LVU294
 1185              	.LBB102:
 169:Core/Src/clean_main.c **** 			for(uint8_t j=0;j<FILTER_NUMBER;j++){
 1186              		.loc 1 169 7 view .LVU295
 169:Core/Src/clean_main.c **** 			for(uint8_t j=0;j<FILTER_NUMBER;j++){
 1187              		.loc 1 169 20 discriminator 1 view .LVU296
 1188              	.L89:
 1189              	.LBB103:
 170:Core/Src/clean_main.c **** 				setBarInv(j,i);
 1190              		.loc 1 170 21 discriminator 1 view .LVU297
 1191              	.LBE103:
 1192              	.LBE102:
 1193              	.LBE106:
 1194              	.LBE108:
 163:Core/Src/clean_main.c **** 		for(uint8_t i=0; i<FILTER_NUMBER;i++){
 1195              		.loc 1 163 4 is_stmt 0 view .LVU298
 1196 0032 0024     		movs	r4, #0
 1197              	.LVL84:
 1198              	.L90:
 1199              	.LBB109:
 1200              	.LBB107:
 1201              	.LBB105:
 1202              	.LBB104:
 171:Core/Src/clean_main.c **** 			}
 1203              		.loc 1 171 5 is_stmt 1 view .LVU299
 1204 0034 E0B2     		uxtb	r0, r4
 1205 0036 2946     		mov	r1, r5
 170:Core/Src/clean_main.c **** 				setBarInv(j,i);
 1206              		.loc 1 170 21 is_stmt 0 discriminator 1 view .LVU300
 1207 0038 0134     		adds	r4, r4, #1
 1208              	.LVL85:
 171:Core/Src/clean_main.c **** 			}
 1209              		.loc 1 171 5 view .LVU301
 1210 003a FFF7FEFF 		bl	setBarInv
 1211              	.LVL86:
 170:Core/Src/clean_main.c **** 				setBarInv(j,i);
 1212              		.loc 1 170 37 is_stmt 1 discriminator 3 view .LVU302
 170:Core/Src/clean_main.c **** 				setBarInv(j,i);
 1213              		.loc 1 170 21 discriminator 1 view .LVU303
 1214 003e 0C2C     		cmp	r4, #12
 1215 0040 F8D1     		bne	.L90
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 34


 1216              	.LBE104:
 173:Core/Src/clean_main.c **** 		}
 1217              		.loc 1 173 3 view .LVU304
 169:Core/Src/clean_main.c **** 			for(uint8_t j=0;j<FILTER_NUMBER;j++){
 1218              		.loc 1 169 25 is_stmt 0 discriminator 2 view .LVU305
 1219 0042 0135     		adds	r5, r5, #1
 1220              	.LVL87:
 173:Core/Src/clean_main.c **** 		}
 1221              		.loc 1 173 3 view .LVU306
 1222 0044 6420     		movs	r0, #100
 169:Core/Src/clean_main.c **** 			for(uint8_t j=0;j<FILTER_NUMBER;j++){
 1223              		.loc 1 169 25 discriminator 2 view .LVU307
 1224 0046 EDB2     		uxtb	r5, r5
 173:Core/Src/clean_main.c **** 		}
 1225              		.loc 1 173 3 view .LVU308
 1226 0048 FFF7FEFF 		bl	HAL_Delay
 1227              	.LVL88:
 169:Core/Src/clean_main.c **** 			for(uint8_t j=0;j<FILTER_NUMBER;j++){
 1228              		.loc 1 169 25 is_stmt 1 discriminator 2 view .LVU309
 169:Core/Src/clean_main.c **** 			for(uint8_t j=0;j<FILTER_NUMBER;j++){
 1229              		.loc 1 169 20 discriminator 1 view .LVU310
 1230 004c 0F2D     		cmp	r5, #15
 1231 004e F0D1     		bne	.L89
 1232              	.LBE105:
 175:Core/Src/clean_main.c **** 		nixie_state = 1;	
 1233              		.loc 1 175 3 view .LVU311
 1234 0050 0548     		ldr	r0, .L95+8
 1235 0052 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 1236              	.LVL89:
 176:Core/Src/clean_main.c **** 	}
 1237              		.loc 1 176 3 view .LVU312
 176:Core/Src/clean_main.c **** 	}
 1238              		.loc 1 176 15 is_stmt 0 view .LVU313
 1239 0056 0123     		movs	r3, #1
 1240 0058 88F80030 		strb	r3, [r8]
 1241              	.LVL90:
 1242              	.L86:
 176:Core/Src/clean_main.c **** 	}
 1243              		.loc 1 176 15 view .LVU314
 1244              	.LBE107:
 1245              	.LBE109:
 178:Core/Src/clean_main.c **** 
 1246              		.loc 1 178 1 view .LVU315
 1247 005c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1248              	.L96:
 1249              		.align	2
 1250              	.L95:
 1251 0060 00000000 		.word	smooth_bar_values
 1252 0064 00040240 		.word	1073873920
 1253 0068 00000000 		.word	htim4
 1254 006c 00000000 		.word	nixie_state
 1255              		.cfi_endproc
 1256              	.LFE257:
 1258              		.section	.rodata.testDAC.str1.4,"aMS",%progbits,1
 1259              		.align	2
 1260              	.LC20:
 1261 0000 44414320 		.ascii	"DAC Channel:%1d\000"
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 35


 1261      4368616E 
 1261      6E656C3A 
 1261      25316400 
 1262              		.align	2
 1263              	.LC21:
 1264 0010 4E756D62 		.ascii	"Number of DAC:%1d\000"
 1264      6572206F 
 1264      66204441 
 1264      433A2531 
 1264      6400
 1265 0022 0000     		.align	2
 1266              	.LC22:
 1267 0024 44414320 		.ascii	"DAC output:%3d\000"
 1267      6F757470 
 1267      75743A25 
 1267      336400
 1268              		.section	.text.testDAC,"ax",%progbits
 1269              		.align	1
 1270              		.p2align 2,,3
 1271              		.global	testDAC
 1272              		.syntax unified
 1273              		.thumb
 1274              		.thumb_func
 1276              	testDAC:
 1277              	.LFB259:
 186:Core/Src/clean_main.c **** 	for(uint8_t i=0; i<FILTER_NUMBER;i++){
 1278              		.loc 1 186 15 is_stmt 1 view -0
 1279              		.cfi_startproc
 1280              		@ args = 0, pretend = 0, frame = 0
 1281              		@ frame_needed = 0, uses_anonymous_args = 0
 187:Core/Src/clean_main.c **** 		setBarInv(i,0);
 1282              		.loc 1 187 2 view .LVU317
 1283              	.LBB120:
 187:Core/Src/clean_main.c **** 		setBarInv(i,0);
 1284              		.loc 1 187 6 view .LVU318
 1285              	.LVL91:
 187:Core/Src/clean_main.c **** 		setBarInv(i,0);
 1286              		.loc 1 187 20 discriminator 1 view .LVU319
 1287              	.LBE120:
 186:Core/Src/clean_main.c **** 	for(uint8_t i=0; i<FILTER_NUMBER;i++){
 1288              		.loc 1 186 15 is_stmt 0 view .LVU320
 1289 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1290              		.cfi_def_cfa_offset 32
 1291              		.cfi_offset 3, -32
 1292              		.cfi_offset 4, -28
 1293              		.cfi_offset 5, -24
 1294              		.cfi_offset 6, -20
 1295              		.cfi_offset 7, -16
 1296              		.cfi_offset 8, -12
 1297              		.cfi_offset 9, -8
 1298              		.cfi_offset 14, -4
 1299 0004 464D     		ldr	r5, .L117
 1300              	.LBB121:
 189:Core/Src/clean_main.c **** 	}
 1301              		.loc 1 189 24 view .LVU321
 1302 0006 0027     		movs	r7, #0
 1303              	.LBE121:
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 36


 186:Core/Src/clean_main.c **** 	for(uint8_t i=0; i<FILTER_NUMBER;i++){
 1304              		.loc 1 186 15 view .LVU322
 1305 0008 2E46     		mov	r6, r5
 1306 000a 0024     		movs	r4, #0
 1307              	.LVL92:
 1308              	.L98:
 1309              	.LBB122:
 188:Core/Src/clean_main.c **** 		smooth_bar_values[i] = 0;
 1310              		.loc 1 188 3 is_stmt 1 view .LVU323
 1311 000c E0B2     		uxtb	r0, r4
 1312 000e 0021     		movs	r1, #0
 187:Core/Src/clean_main.c **** 		setBarInv(i,0);
 1313              		.loc 1 187 20 is_stmt 0 discriminator 1 view .LVU324
 1314 0010 0134     		adds	r4, r4, #1
 1315              	.LVL93:
 188:Core/Src/clean_main.c **** 		smooth_bar_values[i] = 0;
 1316              		.loc 1 188 3 view .LVU325
 1317 0012 FFF7FEFF 		bl	setBarInv
 1318              	.LVL94:
 189:Core/Src/clean_main.c **** 	}
 1319              		.loc 1 189 3 is_stmt 1 view .LVU326
 187:Core/Src/clean_main.c **** 		setBarInv(i,0);
 1320              		.loc 1 187 20 is_stmt 0 discriminator 1 view .LVU327
 1321 0016 0C2C     		cmp	r4, #12
 189:Core/Src/clean_main.c **** 	}
 1322              		.loc 1 189 24 view .LVU328
 1323 0018 46F8047B 		str	r7, [r6], #4	@ float
 187:Core/Src/clean_main.c **** 		setBarInv(i,0);
 1324              		.loc 1 187 36 is_stmt 1 discriminator 3 view .LVU329
 1325              	.LVL95:
 187:Core/Src/clean_main.c **** 		setBarInv(i,0);
 1326              		.loc 1 187 20 discriminator 1 view .LVU330
 1327 001c F6D1     		bne	.L98
 1328              	.LBE122:
 191:Core/Src/clean_main.c **** 	stan_enc = 0;
 1329              		.loc 1 191 2 view .LVU331
 1330 001e 4148     		ldr	r0, .L117+4
 192:Core/Src/clean_main.c **** 	while(button() == 0){
 1331              		.loc 1 192 11 is_stmt 0 view .LVU332
 1332 0020 414C     		ldr	r4, .L117+8
 195:Core/Src/clean_main.c **** 		HAL_Delay(50);
 1333              		.loc 1 195 3 view .LVU333
 1334 0022 424E     		ldr	r6, .L117+12
 191:Core/Src/clean_main.c **** 	stan_enc = 0;
 1335              		.loc 1 191 2 view .LVU334
 1336 0024 FFF7FEFF 		bl	HAL_TIM_Base_Stop_IT
 1337              	.LVL96:
 192:Core/Src/clean_main.c **** 	while(button() == 0){
 1338              		.loc 1 192 2 is_stmt 1 view .LVU335
 192:Core/Src/clean_main.c **** 	while(button() == 0){
 1339              		.loc 1 192 11 is_stmt 0 view .LVU336
 1340 0028 0023     		movs	r3, #0
 1341 002a 2380     		strh	r3, [r4]	@ movhi
 193:Core/Src/clean_main.c **** 		UpdateEnc(0, 3, &stan_enc, false);
 1342              		.loc 1 193 2 is_stmt 1 view .LVU337
 193:Core/Src/clean_main.c **** 		UpdateEnc(0, 3, &stan_enc, false);
 1343              		.loc 1 193 7 is_stmt 0 view .LVU338
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 37


 1344 002c 09E0     		b	.L99
 1345              	.L100:
 194:Core/Src/clean_main.c **** 		dprint("DAC Channel:%1d",stan_enc);
 1346              		.loc 1 194 3 view .LVU339
 1347 002e FFF7FEFF 		bl	UpdateEnc
 1348              	.LVL97:
 195:Core/Src/clean_main.c **** 		HAL_Delay(50);
 1349              		.loc 1 195 3 is_stmt 1 view .LVU340
 1350 0032 3046     		mov	r0, r6
 1351 0034 B4F90010 		ldrsh	r1, [r4]
 1352 0038 FFF7FEFF 		bl	dprint
 1353              	.LVL98:
 196:Core/Src/clean_main.c **** 	}
 1354              		.loc 1 196 3 view .LVU341
 1355 003c 3220     		movs	r0, #50
 1356 003e FFF7FEFF 		bl	HAL_Delay
 1357              	.LVL99:
 1358              	.L99:
 193:Core/Src/clean_main.c **** 		UpdateEnc(0, 3, &stan_enc, false);
 1359              		.loc 1 193 17 view .LVU342
 193:Core/Src/clean_main.c **** 		UpdateEnc(0, 3, &stan_enc, false);
 1360              		.loc 1 193 8 is_stmt 0 view .LVU343
 1361 0042 FFF7FEFF 		bl	button
 1362              	.LVL100:
 194:Core/Src/clean_main.c **** 		dprint("DAC Channel:%1d",stan_enc);
 1363              		.loc 1 194 3 is_stmt 1 view .LVU344
 1364 0046 0321     		movs	r1, #3
 193:Core/Src/clean_main.c **** 		UpdateEnc(0, 3, &stan_enc, false);
 1365              		.loc 1 193 8 is_stmt 0 view .LVU345
 1366 0048 0346     		mov	r3, r0
 194:Core/Src/clean_main.c **** 		dprint("DAC Channel:%1d",stan_enc);
 1367              		.loc 1 194 3 view .LVU346
 1368 004a 2246     		mov	r2, r4
 193:Core/Src/clean_main.c **** 		UpdateEnc(0, 3, &stan_enc, false);
 1369              		.loc 1 193 17 discriminator 1 view .LVU347
 1370 004c 0028     		cmp	r0, #0
 1371 004e EED0     		beq	.L100
 198:Core/Src/clean_main.c **** 	while(button() == 1);
 1372              		.loc 1 198 2 is_stmt 1 view .LVU348
 198:Core/Src/clean_main.c **** 	while(button() == 1);
 1373              		.loc 1 198 6 is_stmt 0 view .LVU349
 1374 0050 B4F90060 		ldrsh	r6, [r4]
 1375              	.LVL101:
 199:Core/Src/clean_main.c **** 	stan_enc = 0;
 1376              		.loc 1 199 2 is_stmt 1 view .LVU350
 1377              	.L101:
 199:Core/Src/clean_main.c **** 	stan_enc = 0;
 1378              		.loc 1 199 17 discriminator 1 view .LVU351
 199:Core/Src/clean_main.c **** 	stan_enc = 0;
 1379              		.loc 1 199 8 is_stmt 0 discriminator 1 view .LVU352
 1380 0054 FFF7FEFF 		bl	button
 1381              	.LVL102:
 199:Core/Src/clean_main.c **** 	stan_enc = 0;
 1382              		.loc 1 199 17 discriminator 1 view .LVU353
 1383 0058 0028     		cmp	r0, #0
 1384 005a FBD1     		bne	.L101
 200:Core/Src/clean_main.c **** 	while(button() == 0){
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 38


 1385              		.loc 1 200 2 is_stmt 1 view .LVU354
 202:Core/Src/clean_main.c **** 		dprint("Number of DAC:%1d",stan_enc); 
 1386              		.loc 1 202 3 is_stmt 0 view .LVU355
 1387 005c 324F     		ldr	r7, .L117+8
 203:Core/Src/clean_main.c **** 		HAL_Delay(50);
 1388              		.loc 1 203 3 view .LVU356
 1389 005e DFF8D880 		ldr	r8, .L117+24
 200:Core/Src/clean_main.c **** 	while(button() == 0){
 1390              		.loc 1 200 11 view .LVU357
 1391 0062 2080     		strh	r0, [r4]	@ movhi
 201:Core/Src/clean_main.c **** 		UpdateEnc(0, 3, &stan_enc, false);
 1392              		.loc 1 201 2 is_stmt 1 view .LVU358
 201:Core/Src/clean_main.c **** 		UpdateEnc(0, 3, &stan_enc, false);
 1393              		.loc 1 201 7 is_stmt 0 view .LVU359
 1394 0064 09E0     		b	.L102
 1395              	.L103:
 202:Core/Src/clean_main.c **** 		dprint("Number of DAC:%1d",stan_enc); 
 1396              		.loc 1 202 3 view .LVU360
 1397 0066 FFF7FEFF 		bl	UpdateEnc
 1398              	.LVL103:
 203:Core/Src/clean_main.c **** 		HAL_Delay(50);
 1399              		.loc 1 203 3 is_stmt 1 view .LVU361
 1400 006a 4046     		mov	r0, r8
 1401 006c B4F90010 		ldrsh	r1, [r4]
 1402 0070 FFF7FEFF 		bl	dprint
 1403              	.LVL104:
 204:Core/Src/clean_main.c **** 	}
 1404              		.loc 1 204 3 view .LVU362
 1405 0074 3220     		movs	r0, #50
 1406 0076 FFF7FEFF 		bl	HAL_Delay
 1407              	.LVL105:
 1408              	.L102:
 201:Core/Src/clean_main.c **** 		UpdateEnc(0, 3, &stan_enc, false);
 1409              		.loc 1 201 17 view .LVU363
 201:Core/Src/clean_main.c **** 		UpdateEnc(0, 3, &stan_enc, false);
 1410              		.loc 1 201 8 is_stmt 0 view .LVU364
 1411 007a FFF7FEFF 		bl	button
 1412              	.LVL106:
 202:Core/Src/clean_main.c **** 		dprint("Number of DAC:%1d",stan_enc); 
 1413              		.loc 1 202 3 is_stmt 1 view .LVU365
 1414 007e 0321     		movs	r1, #3
 201:Core/Src/clean_main.c **** 		UpdateEnc(0, 3, &stan_enc, false);
 1415              		.loc 1 201 8 is_stmt 0 view .LVU366
 1416 0080 0346     		mov	r3, r0
 202:Core/Src/clean_main.c **** 		dprint("Number of DAC:%1d",stan_enc); 
 1417              		.loc 1 202 3 view .LVU367
 1418 0082 3A46     		mov	r2, r7
 201:Core/Src/clean_main.c **** 		UpdateEnc(0, 3, &stan_enc, false);
 1419              		.loc 1 201 17 discriminator 1 view .LVU368
 1420 0084 0028     		cmp	r0, #0
 1421 0086 EED0     		beq	.L103
 206:Core/Src/clean_main.c **** 	while(button() == 1);
 1422              		.loc 1 206 2 is_stmt 1 view .LVU369
 206:Core/Src/clean_main.c **** 	while(button() == 1);
 1423              		.loc 1 206 6 is_stmt 0 view .LVU370
 1424 0088 B4F90080 		ldrsh	r8, [r4]
 1425              	.LVL107:
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 39


 207:Core/Src/clean_main.c **** 	stan_enc = 0;
 1426              		.loc 1 207 2 is_stmt 1 view .LVU371
 1427              	.L104:
 207:Core/Src/clean_main.c **** 	stan_enc = 0;
 1428              		.loc 1 207 17 discriminator 1 view .LVU372
 207:Core/Src/clean_main.c **** 	stan_enc = 0;
 1429              		.loc 1 207 8 is_stmt 0 discriminator 1 view .LVU373
 1430 008c FFF7FEFF 		bl	button
 1431              	.LVL108:
 207:Core/Src/clean_main.c **** 	stan_enc = 0;
 1432              		.loc 1 207 17 discriminator 1 view .LVU374
 1433 0090 0028     		cmp	r0, #0
 1434 0092 FBD1     		bne	.L104
 208:Core/Src/clean_main.c **** 	while(button() == 0){
 1435              		.loc 1 208 2 is_stmt 1 view .LVU375
 210:Core/Src/clean_main.c **** 		dprint("DAC output:%3d",stan_enc);
 1436              		.loc 1 210 3 is_stmt 0 view .LVU376
 1437 0094 244F     		ldr	r7, .L117+8
 211:Core/Src/clean_main.c **** 		dac_write(channel,stan_enc,dac_number);
 1438              		.loc 1 211 3 view .LVU377
 1439 0096 DFF8A490 		ldr	r9, .L117+28
 208:Core/Src/clean_main.c **** 	while(button() == 0){
 1440              		.loc 1 208 11 view .LVU378
 1441 009a 2080     		strh	r0, [r4]	@ movhi
 209:Core/Src/clean_main.c **** 		UpdateEnc(0, 255, &stan_enc, true);
 1442              		.loc 1 209 2 is_stmt 1 view .LVU379
 209:Core/Src/clean_main.c **** 		UpdateEnc(0, 255, &stan_enc, true);
 1443              		.loc 1 209 7 is_stmt 0 view .LVU380
 1444 009c 0FE0     		b	.L105
 1445              	.L106:
 210:Core/Src/clean_main.c **** 		dprint("DAC output:%3d",stan_enc);
 1446              		.loc 1 210 3 view .LVU381
 1447 009e FFF7FEFF 		bl	UpdateEnc
 1448              	.LVL109:
 211:Core/Src/clean_main.c **** 		dac_write(channel,stan_enc,dac_number);
 1449              		.loc 1 211 3 is_stmt 1 view .LVU382
 1450 00a2 B4F90010 		ldrsh	r1, [r4]
 1451 00a6 4846     		mov	r0, r9
 1452 00a8 FFF7FEFF 		bl	dprint
 1453              	.LVL110:
 212:Core/Src/clean_main.c **** 		HAL_Delay(50);	
 1454              		.loc 1 212 3 view .LVU383
 1455 00ac F0B2     		uxtb	r0, r6
 1456 00ae 2178     		ldrb	r1, [r4]	@ zero_extendqisi2
 1457 00b0 5FFA88F2 		uxtb	r2, r8
 1458 00b4 FFF7FEFF 		bl	dac_write
 1459              	.LVL111:
 213:Core/Src/clean_main.c **** 	}
 1460              		.loc 1 213 3 view .LVU384
 1461 00b8 3220     		movs	r0, #50
 1462 00ba FFF7FEFF 		bl	HAL_Delay
 1463              	.LVL112:
 1464              	.L105:
 209:Core/Src/clean_main.c **** 		UpdateEnc(0, 255, &stan_enc, true);
 1465              		.loc 1 209 17 view .LVU385
 209:Core/Src/clean_main.c **** 		UpdateEnc(0, 255, &stan_enc, true);
 1466              		.loc 1 209 8 is_stmt 0 view .LVU386
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 40


 1467 00be FFF7FEFF 		bl	button
 1468              	.LVL113:
 210:Core/Src/clean_main.c **** 		dprint("DAC output:%3d",stan_enc);
 1469              		.loc 1 210 3 is_stmt 1 view .LVU387
 1470 00c2 0123     		movs	r3, #1
 1471 00c4 3A46     		mov	r2, r7
 1472 00c6 FF21     		movs	r1, #255
 209:Core/Src/clean_main.c **** 		UpdateEnc(0, 255, &stan_enc, true);
 1473              		.loc 1 209 17 is_stmt 0 discriminator 1 view .LVU388
 1474 00c8 0028     		cmp	r0, #0
 1475 00ca E8D0     		beq	.L106
 215:Core/Src/clean_main.c **** 	enable_nixie();
 1476              		.loc 1 215 2 is_stmt 1 view .LVU389
 215:Core/Src/clean_main.c **** 	enable_nixie();
 1477              		.loc 1 215 14 is_stmt 0 view .LVU390
 1478 00cc 184F     		ldr	r7, .L117+16
 1479 00ce 0024     		movs	r4, #0
 1480              	.LBB123:
 1481              	.LBB124:
 1482              	.LBB125:
 1483              	.LBB126:
 166:Core/Src/clean_main.c **** 		}
 1484              		.loc 1 166 25 view .LVU391
 1485 00d0 0026     		movs	r6, #0
 1486              	.LVL114:
 166:Core/Src/clean_main.c **** 		}
 1487              		.loc 1 166 25 view .LVU392
 1488              	.LBE126:
 1489              	.LBE125:
 1490              	.LBE124:
 1491              	.LBE123:
 215:Core/Src/clean_main.c **** 	enable_nixie();
 1492              		.loc 1 215 14 view .LVU393
 1493 00d2 3C70     		strb	r4, [r7]
 216:Core/Src/clean_main.c **** }
 1494              		.loc 1 216 2 is_stmt 1 view .LVU394
 1495              	.LBB138:
 1496              	.LBI123:
 162:Core/Src/clean_main.c **** 	if(nixie_state == 0){
 1497              		.loc 1 162 6 view .LVU395
 163:Core/Src/clean_main.c **** 		for(uint8_t i=0; i<FILTER_NUMBER;i++){
 1498              		.loc 1 163 2 view .LVU396
 1499              	.LBB136:
 1500              	.LBI124:
 162:Core/Src/clean_main.c **** 	if(nixie_state == 0){
 1501              		.loc 1 162 6 view .LVU397
 1502              	.LVL115:
 1503              	.LBB134:
 1504              	.LBB127:
 164:Core/Src/clean_main.c **** 			setBarInv(i,0);
 1505              		.loc 1 164 21 discriminator 1 view .LVU398
 1506              	.L107:
 165:Core/Src/clean_main.c **** 			smooth_bar_values[i] = 0;
 1507              		.loc 1 165 4 view .LVU399
 1508 00d4 E0B2     		uxtb	r0, r4
 1509 00d6 0021     		movs	r1, #0
 164:Core/Src/clean_main.c **** 			setBarInv(i,0);
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 41


 1510              		.loc 1 164 21 is_stmt 0 discriminator 1 view .LVU400
 1511 00d8 0134     		adds	r4, r4, #1
 1512              	.LVL116:
 165:Core/Src/clean_main.c **** 			smooth_bar_values[i] = 0;
 1513              		.loc 1 165 4 view .LVU401
 1514 00da FFF7FEFF 		bl	setBarInv
 1515              	.LVL117:
 166:Core/Src/clean_main.c **** 		}
 1516              		.loc 1 166 4 is_stmt 1 view .LVU402
 164:Core/Src/clean_main.c **** 			setBarInv(i,0);
 1517              		.loc 1 164 21 is_stmt 0 discriminator 1 view .LVU403
 1518 00de 0C2C     		cmp	r4, #12
 166:Core/Src/clean_main.c **** 		}
 1519              		.loc 1 166 25 view .LVU404
 1520 00e0 45F8046B 		str	r6, [r5], #4	@ float
 164:Core/Src/clean_main.c **** 			setBarInv(i,0);
 1521              		.loc 1 164 37 is_stmt 1 discriminator 3 view .LVU405
 1522              	.LVL118:
 164:Core/Src/clean_main.c **** 			setBarInv(i,0);
 1523              		.loc 1 164 21 discriminator 1 view .LVU406
 1524 00e4 F6D1     		bne	.L107
 1525              	.LBE127:
 168:Core/Src/clean_main.c **** 		for(uint8_t i=0;i<15;i++){
 1526              		.loc 1 168 3 view .LVU407
 1527              	.LVL119:
 1528              	.LBB128:
 1529              	.LBI128:
 103:Core/Src/clean_main.c **** 	HAL_GPIO_WritePin(EN_TUBE_GPIO_Port,EN_TUBE_Pin,state);
 1530              		.loc 1 103 6 view .LVU408
 1531              	.LBB129:
 104:Core/Src/clean_main.c **** }
 1532              		.loc 1 104 2 view .LVU409
 1533 00e6 1348     		ldr	r0, .L117+20
 1534 00e8 0122     		movs	r2, #1
 1535 00ea 4FF40071 		mov	r1, #512
 1536 00ee FFF7FEFF 		bl	HAL_GPIO_WritePin
 1537              	.LVL120:
 104:Core/Src/clean_main.c **** }
 1538              		.loc 1 104 2 is_stmt 0 view .LVU410
 1539              	.LBE129:
 1540              	.LBE128:
 169:Core/Src/clean_main.c **** 			for(uint8_t j=0;j<FILTER_NUMBER;j++){
 1541              		.loc 1 169 3 is_stmt 1 view .LVU411
 1542              	.LBB130:
 169:Core/Src/clean_main.c **** 			for(uint8_t j=0;j<FILTER_NUMBER;j++){
 1543              		.loc 1 169 7 view .LVU412
 169:Core/Src/clean_main.c **** 			for(uint8_t j=0;j<FILTER_NUMBER;j++){
 1544              		.loc 1 169 20 discriminator 1 view .LVU413
 169:Core/Src/clean_main.c **** 			for(uint8_t j=0;j<FILTER_NUMBER;j++){
 1545              		.loc 1 169 15 is_stmt 0 view .LVU414
 1546 00f2 0025     		movs	r5, #0
 1547              	.LVL121:
 1548              	.L108:
 1549              	.LBB131:
 170:Core/Src/clean_main.c **** 				setBarInv(j,i);
 1550              		.loc 1 170 21 is_stmt 1 discriminator 1 view .LVU415
 1551              	.LBE131:
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 42


 1552              	.LBE130:
 1553              	.LBE134:
 1554              	.LBE136:
 1555              	.LBE138:
 215:Core/Src/clean_main.c **** 	enable_nixie();
 1556              		.loc 1 215 14 is_stmt 0 view .LVU416
 1557 00f4 0024     		movs	r4, #0
 1558              	.LVL122:
 1559              	.L109:
 1560              	.LBB139:
 1561              	.LBB137:
 1562              	.LBB135:
 1563              	.LBB133:
 1564              	.LBB132:
 171:Core/Src/clean_main.c **** 			}
 1565              		.loc 1 171 5 is_stmt 1 view .LVU417
 1566 00f6 E0B2     		uxtb	r0, r4
 1567 00f8 2946     		mov	r1, r5
 170:Core/Src/clean_main.c **** 				setBarInv(j,i);
 1568              		.loc 1 170 21 is_stmt 0 discriminator 1 view .LVU418
 1569 00fa 0134     		adds	r4, r4, #1
 1570              	.LVL123:
 171:Core/Src/clean_main.c **** 			}
 1571              		.loc 1 171 5 view .LVU419
 1572 00fc FFF7FEFF 		bl	setBarInv
 1573              	.LVL124:
 170:Core/Src/clean_main.c **** 				setBarInv(j,i);
 1574              		.loc 1 170 37 is_stmt 1 discriminator 3 view .LVU420
 170:Core/Src/clean_main.c **** 				setBarInv(j,i);
 1575              		.loc 1 170 21 discriminator 1 view .LVU421
 1576 0100 0C2C     		cmp	r4, #12
 1577 0102 F8D1     		bne	.L109
 1578              	.LBE132:
 173:Core/Src/clean_main.c **** 		}
 1579              		.loc 1 173 3 view .LVU422
 169:Core/Src/clean_main.c **** 			for(uint8_t j=0;j<FILTER_NUMBER;j++){
 1580              		.loc 1 169 25 is_stmt 0 discriminator 2 view .LVU423
 1581 0104 0135     		adds	r5, r5, #1
 1582              	.LVL125:
 173:Core/Src/clean_main.c **** 		}
 1583              		.loc 1 173 3 view .LVU424
 1584 0106 6420     		movs	r0, #100
 169:Core/Src/clean_main.c **** 			for(uint8_t j=0;j<FILTER_NUMBER;j++){
 1585              		.loc 1 169 25 discriminator 2 view .LVU425
 1586 0108 EDB2     		uxtb	r5, r5
 173:Core/Src/clean_main.c **** 		}
 1587              		.loc 1 173 3 view .LVU426
 1588 010a FFF7FEFF 		bl	HAL_Delay
 1589              	.LVL126:
 169:Core/Src/clean_main.c **** 			for(uint8_t j=0;j<FILTER_NUMBER;j++){
 1590              		.loc 1 169 25 is_stmt 1 discriminator 2 view .LVU427
 169:Core/Src/clean_main.c **** 			for(uint8_t j=0;j<FILTER_NUMBER;j++){
 1591              		.loc 1 169 20 discriminator 1 view .LVU428
 1592 010e 0F2D     		cmp	r5, #15
 1593 0110 F0D1     		bne	.L108
 1594              	.LBE133:
 175:Core/Src/clean_main.c **** 		nixie_state = 1;	
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 43


 1595              		.loc 1 175 3 view .LVU429
 1596 0112 0448     		ldr	r0, .L117+4
 1597 0114 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 1598              	.LVL127:
 176:Core/Src/clean_main.c **** 	}
 1599              		.loc 1 176 3 view .LVU430
 176:Core/Src/clean_main.c **** 	}
 1600              		.loc 1 176 15 is_stmt 0 view .LVU431
 1601 0118 0123     		movs	r3, #1
 1602 011a 3B70     		strb	r3, [r7]
 1603              	.LVL128:
 176:Core/Src/clean_main.c **** 	}
 1604              		.loc 1 176 15 view .LVU432
 1605              	.LBE135:
 1606              	.LBE137:
 1607              	.LBE139:
 217:Core/Src/clean_main.c **** 
 1608              		.loc 1 217 1 view .LVU433
 1609 011c BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1610              	.LVL129:
 1611              	.L118:
 217:Core/Src/clean_main.c **** 
 1612              		.loc 1 217 1 view .LVU434
 1613              		.align	2
 1614              	.L117:
 1615 0120 00000000 		.word	smooth_bar_values
 1616 0124 00000000 		.word	htim4
 1617 0128 00000000 		.word	stan_enc
 1618 012c 00000000 		.word	.LC20
 1619 0130 00000000 		.word	nixie_state
 1620 0134 00040240 		.word	1073873920
 1621 0138 10000000 		.word	.LC21
 1622 013c 24000000 		.word	.LC22
 1623              		.cfi_endproc
 1624              	.LFE259:
 1626              		.section	.rodata.testAllDac.str1.4,"aMS",%progbits,1
 1627              		.align	2
 1628              	.LC23:
 1629 0000 54657374 		.ascii	"Testing all DACs    sequentially\000"
 1629      696E6720 
 1629      616C6C20 
 1629      44414373 
 1629      20202020 
 1630              		.section	.text.testAllDac,"ax",%progbits
 1631              		.align	1
 1632              		.p2align 2,,3
 1633              		.global	testAllDac
 1634              		.syntax unified
 1635              		.thumb
 1636              		.thumb_func
 1638              	testAllDac:
 1639              	.LFB260:
 219:Core/Src/clean_main.c **** 	for(uint8_t i=0; i<FILTER_NUMBER;i++){
 1640              		.loc 1 219 18 is_stmt 1 view -0
 1641              		.cfi_startproc
 1642              		@ args = 0, pretend = 0, frame = 0
 1643              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 44


 220:Core/Src/clean_main.c **** 		setBarInv(i,0);
 1644              		.loc 1 220 2 view .LVU436
 1645              	.LBB172:
 220:Core/Src/clean_main.c **** 		setBarInv(i,0);
 1646              		.loc 1 220 6 view .LVU437
 1647              	.LVL130:
 220:Core/Src/clean_main.c **** 		setBarInv(i,0);
 1648              		.loc 1 220 20 discriminator 1 view .LVU438
 1649              	.LBE172:
 219:Core/Src/clean_main.c **** 	for(uint8_t i=0; i<FILTER_NUMBER;i++){
 1650              		.loc 1 219 18 is_stmt 0 view .LVU439
 1651 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1652              		.cfi_def_cfa_offset 24
 1653              		.cfi_offset 3, -24
 1654              		.cfi_offset 4, -20
 1655              		.cfi_offset 5, -16
 1656              		.cfi_offset 6, -12
 1657              		.cfi_offset 7, -8
 1658              		.cfi_offset 14, -4
 1659 0002 5C4D     		ldr	r5, .L164
 1660              	.LBB173:
 222:Core/Src/clean_main.c **** 	}
 1661              		.loc 1 222 24 view .LVU440
 1662 0004 0027     		movs	r7, #0
 1663              	.LBE173:
 219:Core/Src/clean_main.c **** 	for(uint8_t i=0; i<FILTER_NUMBER;i++){
 1664              		.loc 1 219 18 view .LVU441
 1665 0006 2E46     		mov	r6, r5
 1666 0008 0024     		movs	r4, #0
 1667              	.LVL131:
 1668              	.L120:
 1669              	.LBB174:
 221:Core/Src/clean_main.c **** 		smooth_bar_values[i] = 0;
 1670              		.loc 1 221 3 is_stmt 1 view .LVU442
 1671 000a E0B2     		uxtb	r0, r4
 1672 000c 0021     		movs	r1, #0
 220:Core/Src/clean_main.c **** 		setBarInv(i,0);
 1673              		.loc 1 220 20 is_stmt 0 discriminator 1 view .LVU443
 1674 000e 0134     		adds	r4, r4, #1
 1675              	.LVL132:
 221:Core/Src/clean_main.c **** 		smooth_bar_values[i] = 0;
 1676              		.loc 1 221 3 view .LVU444
 1677 0010 FFF7FEFF 		bl	setBarInv
 1678              	.LVL133:
 222:Core/Src/clean_main.c **** 	}
 1679              		.loc 1 222 3 is_stmt 1 view .LVU445
 220:Core/Src/clean_main.c **** 		setBarInv(i,0);
 1680              		.loc 1 220 20 is_stmt 0 discriminator 1 view .LVU446
 1681 0014 0C2C     		cmp	r4, #12
 222:Core/Src/clean_main.c **** 	}
 1682              		.loc 1 222 24 view .LVU447
 1683 0016 46F8047B 		str	r7, [r6], #4	@ float
 220:Core/Src/clean_main.c **** 		setBarInv(i,0);
 1684              		.loc 1 220 36 is_stmt 1 discriminator 3 view .LVU448
 1685              	.LVL134:
 220:Core/Src/clean_main.c **** 		setBarInv(i,0);
 1686              		.loc 1 220 20 discriminator 1 view .LVU449
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 45


 1687 001a F6D1     		bne	.L120
 1688              	.LBE174:
 224:Core/Src/clean_main.c **** 	dprint("Testing all DACs    sequentially");
 1689              		.loc 1 224 2 view .LVU450
 1690 001c 5648     		ldr	r0, .L164+4
 1691 001e FFF7FEFF 		bl	HAL_TIM_Base_Stop_IT
 1692              	.LVL135:
 225:Core/Src/clean_main.c **** 	for(uint8_t i=0;i<12;i++){
 1693              		.loc 1 225 2 view .LVU451
 1694 0022 5648     		ldr	r0, .L164+8
 1695 0024 FFF7FEFF 		bl	dprint
 1696              	.LVL136:
 226:Core/Src/clean_main.c **** 		for(uint8_t j=0;j<220;j++){
 1697              		.loc 1 226 2 view .LVU452
 1698              	.LBB175:
 226:Core/Src/clean_main.c **** 		for(uint8_t j=0;j<220;j++){
 1699              		.loc 1 226 6 view .LVU453
 226:Core/Src/clean_main.c **** 		for(uint8_t j=0;j<220;j++){
 1700              		.loc 1 226 19 discriminator 1 view .LVU454
 226:Core/Src/clean_main.c **** 		for(uint8_t j=0;j<220;j++){
 1701              		.loc 1 226 14 is_stmt 0 view .LVU455
 1702 0028 0026     		movs	r6, #0
 1703              	.LVL137:
 1704              	.L121:
 1705              	.LBB176:
 227:Core/Src/clean_main.c **** 			setBarInv(i,j);
 1706              		.loc 1 227 20 is_stmt 1 discriminator 1 view .LVU456
 1707              	.LBE176:
 1708              	.LBE175:
 219:Core/Src/clean_main.c **** 	for(uint8_t i=0; i<FILTER_NUMBER;i++){
 1709              		.loc 1 219 18 is_stmt 0 view .LVU457
 1710 002a 0024     		movs	r4, #0
 1711 002c 02E0     		b	.L127
 1712              	.LVL138:
 1713              	.L122:
 1714              	.LBB214:
 1715              	.LBB197:
 227:Core/Src/clean_main.c **** 			setBarInv(i,j);
 1716              		.loc 1 227 20 discriminator 1 view .LVU458
 1717 002e 0134     		adds	r4, r4, #1
 1718              	.LVL139:
 227:Core/Src/clean_main.c **** 			setBarInv(i,j);
 1719              		.loc 1 227 20 discriminator 1 view .LVU459
 1720 0030 DC2C     		cmp	r4, #220
 1721 0032 35D0     		beq	.L132
 1722              	.LVL140:
 1723              	.L127:
 228:Core/Src/clean_main.c **** 			HAL_Delay(5);
 1724              		.loc 1 228 4 is_stmt 1 view .LVU460
 1725 0034 E1B2     		uxtb	r1, r4
 1726 0036 3046     		mov	r0, r6
 1727 0038 FFF7FEFF 		bl	setBarInv
 1728              	.LVL141:
 229:Core/Src/clean_main.c **** 			if(button()==1){
 1729              		.loc 1 229 4 view .LVU461
 1730 003c 0520     		movs	r0, #5
 1731 003e FFF7FEFF 		bl	HAL_Delay
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 46


 1732              	.LVL142:
 230:Core/Src/clean_main.c **** 				nixie_state = 0;
 1733              		.loc 1 230 4 view .LVU462
 230:Core/Src/clean_main.c **** 				nixie_state = 0;
 1734              		.loc 1 230 7 is_stmt 0 view .LVU463
 1735 0042 FFF7FEFF 		bl	button
 1736              	.LVL143:
 227:Core/Src/clean_main.c **** 			setBarInv(i,j);
 1737              		.loc 1 227 26 is_stmt 1 discriminator 2 view .LVU464
 227:Core/Src/clean_main.c **** 			setBarInv(i,j);
 1738              		.loc 1 227 20 discriminator 1 view .LVU465
 230:Core/Src/clean_main.c **** 				nixie_state = 0;
 1739              		.loc 1 230 6 is_stmt 0 discriminator 1 view .LVU466
 1740 0046 0028     		cmp	r0, #0
 1741 0048 F1D0     		beq	.L122
 231:Core/Src/clean_main.c **** 				enable_nixie();
 1742              		.loc 1 231 5 is_stmt 1 view .LVU467
 231:Core/Src/clean_main.c **** 				enable_nixie();
 1743              		.loc 1 231 17 is_stmt 0 view .LVU468
 1744 004a 4D4E     		ldr	r6, .L164+12
 1745              	.LVL144:
 231:Core/Src/clean_main.c **** 				enable_nixie();
 1746              		.loc 1 231 17 view .LVU469
 1747 004c 0024     		movs	r4, #0
 1748              	.LVL145:
 1749              	.LBB177:
 1750              	.LBB178:
 1751              	.LBB179:
 1752              	.LBB180:
 166:Core/Src/clean_main.c **** 		}
 1753              		.loc 1 166 25 view .LVU470
 1754 004e 0027     		movs	r7, #0
 1755              	.LBE180:
 1756              	.LBE179:
 1757              	.LBE178:
 1758              	.LBE177:
 231:Core/Src/clean_main.c **** 				enable_nixie();
 1759              		.loc 1 231 17 view .LVU471
 1760 0050 3470     		strb	r4, [r6]
 232:Core/Src/clean_main.c **** 				return;
 1761              		.loc 1 232 5 is_stmt 1 view .LVU472
 1762              	.LBB194:
 1763              	.LBI177:
 162:Core/Src/clean_main.c **** 	if(nixie_state == 0){
 1764              		.loc 1 162 6 view .LVU473
 163:Core/Src/clean_main.c **** 		for(uint8_t i=0; i<FILTER_NUMBER;i++){
 1765              		.loc 1 163 2 view .LVU474
 1766              	.LBB191:
 1767              	.LBI178:
 162:Core/Src/clean_main.c **** 	if(nixie_state == 0){
 1768              		.loc 1 162 6 view .LVU475
 1769              	.LVL146:
 1770              	.LBB188:
 1771              	.LBB181:
 164:Core/Src/clean_main.c **** 			setBarInv(i,0);
 1772              		.loc 1 164 21 discriminator 1 view .LVU476
 1773              	.L123:
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 47


 165:Core/Src/clean_main.c **** 			smooth_bar_values[i] = 0;
 1774              		.loc 1 165 4 view .LVU477
 1775 0052 E0B2     		uxtb	r0, r4
 1776 0054 0021     		movs	r1, #0
 164:Core/Src/clean_main.c **** 			setBarInv(i,0);
 1777              		.loc 1 164 21 is_stmt 0 discriminator 1 view .LVU478
 1778 0056 0134     		adds	r4, r4, #1
 1779              	.LVL147:
 165:Core/Src/clean_main.c **** 			smooth_bar_values[i] = 0;
 1780              		.loc 1 165 4 view .LVU479
 1781 0058 FFF7FEFF 		bl	setBarInv
 1782              	.LVL148:
 166:Core/Src/clean_main.c **** 		}
 1783              		.loc 1 166 4 is_stmt 1 view .LVU480
 164:Core/Src/clean_main.c **** 			setBarInv(i,0);
 1784              		.loc 1 164 21 is_stmt 0 discriminator 1 view .LVU481
 1785 005c 0C2C     		cmp	r4, #12
 166:Core/Src/clean_main.c **** 		}
 1786              		.loc 1 166 25 view .LVU482
 1787 005e 45F8047B 		str	r7, [r5], #4	@ float
 164:Core/Src/clean_main.c **** 			setBarInv(i,0);
 1788              		.loc 1 164 37 is_stmt 1 discriminator 3 view .LVU483
 1789              	.LVL149:
 164:Core/Src/clean_main.c **** 			setBarInv(i,0);
 1790              		.loc 1 164 21 discriminator 1 view .LVU484
 1791 0062 F6D1     		bne	.L123
 1792              	.LBE181:
 168:Core/Src/clean_main.c **** 		for(uint8_t i=0;i<15;i++){
 1793              		.loc 1 168 3 view .LVU485
 1794              	.LVL150:
 1795              	.LBB182:
 1796              	.LBI182:
 103:Core/Src/clean_main.c **** 	HAL_GPIO_WritePin(EN_TUBE_GPIO_Port,EN_TUBE_Pin,state);
 1797              		.loc 1 103 6 view .LVU486
 1798              	.LBB183:
 104:Core/Src/clean_main.c **** }
 1799              		.loc 1 104 2 view .LVU487
 1800 0064 4748     		ldr	r0, .L164+16
 1801 0066 0122     		movs	r2, #1
 1802 0068 4FF40071 		mov	r1, #512
 1803 006c FFF7FEFF 		bl	HAL_GPIO_WritePin
 1804              	.LVL151:
 104:Core/Src/clean_main.c **** }
 1805              		.loc 1 104 2 is_stmt 0 view .LVU488
 1806              	.LBE183:
 1807              	.LBE182:
 169:Core/Src/clean_main.c **** 			for(uint8_t j=0;j<FILTER_NUMBER;j++){
 1808              		.loc 1 169 3 is_stmt 1 view .LVU489
 1809              	.LBB184:
 169:Core/Src/clean_main.c **** 			for(uint8_t j=0;j<FILTER_NUMBER;j++){
 1810              		.loc 1 169 7 view .LVU490
 169:Core/Src/clean_main.c **** 			for(uint8_t j=0;j<FILTER_NUMBER;j++){
 1811              		.loc 1 169 20 discriminator 1 view .LVU491
 169:Core/Src/clean_main.c **** 			for(uint8_t j=0;j<FILTER_NUMBER;j++){
 1812              		.loc 1 169 15 is_stmt 0 view .LVU492
 1813 0070 0025     		movs	r5, #0
 1814              	.LVL152:
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 48


 1815              	.L124:
 1816              	.LBB185:
 170:Core/Src/clean_main.c **** 				setBarInv(j,i);
 1817              		.loc 1 170 21 is_stmt 1 discriminator 1 view .LVU493
 1818              	.LBE185:
 1819              	.LBE184:
 1820              	.LBE188:
 1821              	.LBE191:
 1822              	.LBE194:
 231:Core/Src/clean_main.c **** 				enable_nixie();
 1823              		.loc 1 231 17 is_stmt 0 view .LVU494
 1824 0072 0024     		movs	r4, #0
 1825              	.LVL153:
 1826              	.L125:
 1827              	.LBB195:
 1828              	.LBB192:
 1829              	.LBB189:
 1830              	.LBB187:
 1831              	.LBB186:
 171:Core/Src/clean_main.c **** 			}
 1832              		.loc 1 171 5 is_stmt 1 view .LVU495
 1833 0074 E0B2     		uxtb	r0, r4
 1834 0076 2946     		mov	r1, r5
 170:Core/Src/clean_main.c **** 				setBarInv(j,i);
 1835              		.loc 1 170 21 is_stmt 0 discriminator 1 view .LVU496
 1836 0078 0134     		adds	r4, r4, #1
 1837              	.LVL154:
 171:Core/Src/clean_main.c **** 			}
 1838              		.loc 1 171 5 view .LVU497
 1839 007a FFF7FEFF 		bl	setBarInv
 1840              	.LVL155:
 170:Core/Src/clean_main.c **** 				setBarInv(j,i);
 1841              		.loc 1 170 37 is_stmt 1 discriminator 3 view .LVU498
 170:Core/Src/clean_main.c **** 				setBarInv(j,i);
 1842              		.loc 1 170 21 discriminator 1 view .LVU499
 1843 007e 0C2C     		cmp	r4, #12
 1844 0080 F8D1     		bne	.L125
 1845              	.LBE186:
 173:Core/Src/clean_main.c **** 		}
 1846              		.loc 1 173 3 view .LVU500
 169:Core/Src/clean_main.c **** 			for(uint8_t j=0;j<FILTER_NUMBER;j++){
 1847              		.loc 1 169 25 is_stmt 0 discriminator 2 view .LVU501
 1848 0082 0135     		adds	r5, r5, #1
 1849              	.LVL156:
 173:Core/Src/clean_main.c **** 		}
 1850              		.loc 1 173 3 view .LVU502
 1851 0084 6420     		movs	r0, #100
 169:Core/Src/clean_main.c **** 			for(uint8_t j=0;j<FILTER_NUMBER;j++){
 1852              		.loc 1 169 25 discriminator 2 view .LVU503
 1853 0086 EDB2     		uxtb	r5, r5
 173:Core/Src/clean_main.c **** 		}
 1854              		.loc 1 173 3 view .LVU504
 1855 0088 FFF7FEFF 		bl	HAL_Delay
 1856              	.LVL157:
 169:Core/Src/clean_main.c **** 			for(uint8_t j=0;j<FILTER_NUMBER;j++){
 1857              		.loc 1 169 25 is_stmt 1 discriminator 2 view .LVU505
 169:Core/Src/clean_main.c **** 			for(uint8_t j=0;j<FILTER_NUMBER;j++){
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 49


 1858              		.loc 1 169 20 discriminator 1 view .LVU506
 1859 008c 0F2D     		cmp	r5, #15
 1860 008e F0D1     		bne	.L124
 1861              	.LVL158:
 1862              	.L126:
 169:Core/Src/clean_main.c **** 			for(uint8_t j=0;j<FILTER_NUMBER;j++){
 1863              		.loc 1 169 20 is_stmt 0 discriminator 1 view .LVU507
 1864              	.LBE187:
 175:Core/Src/clean_main.c **** 		nixie_state = 1;	
 1865              		.loc 1 175 3 is_stmt 1 view .LVU508
 1866 0090 3948     		ldr	r0, .L164+4
 1867 0092 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 1868              	.LVL159:
 176:Core/Src/clean_main.c **** 	}
 1869              		.loc 1 176 3 view .LVU509
 176:Core/Src/clean_main.c **** 	}
 1870              		.loc 1 176 15 is_stmt 0 view .LVU510
 1871 0096 0123     		movs	r3, #1
 1872 0098 3370     		strb	r3, [r6]
 1873              	.LBE189:
 1874              	.LBE192:
 1875              	.LBE195:
 233:Core/Src/clean_main.c **** 			} 
 1876              		.loc 1 233 5 is_stmt 1 view .LVU511
 1877              	.LBE197:
 1878              	.LBE214:
 250:Core/Src/clean_main.c **** 
 1879              		.loc 1 250 1 is_stmt 0 view .LVU512
 1880 009a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1881              	.LVL160:
 1882              	.L128:
 1883              	.LBB215:
 1884              	.LBB198:
 236:Core/Src/clean_main.c **** 			setBarInv(i,j);
 1885              		.loc 1 236 22 discriminator 1 view .LVU513
 1886 009c 052C     		cmp	r4, #5
 1887 009e 35D0     		beq	.L163
 1888              	.LVL161:
 1889              	.L132:
 237:Core/Src/clean_main.c **** 			HAL_Delay(5);
 1890              		.loc 1 237 4 is_stmt 1 view .LVU514
 1891 00a0 2146     		mov	r1, r4
 1892 00a2 3046     		mov	r0, r6
 1893 00a4 FFF7FEFF 		bl	setBarInv
 1894              	.LVL162:
 238:Core/Src/clean_main.c **** 			if(button()==1){
 1895              		.loc 1 238 4 view .LVU515
 1896 00a8 0520     		movs	r0, #5
 1897 00aa FFF7FEFF 		bl	HAL_Delay
 1898              	.LVL163:
 239:Core/Src/clean_main.c **** 				nixie_state = 0;
 1899              		.loc 1 239 4 view .LVU516
 239:Core/Src/clean_main.c **** 				nixie_state = 0;
 1900              		.loc 1 239 7 is_stmt 0 view .LVU517
 1901 00ae FFF7FEFF 		bl	button
 1902              	.LVL164:
 236:Core/Src/clean_main.c **** 			setBarInv(i,j);
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 50


 1903              		.loc 1 236 26 is_stmt 1 discriminator 2 view .LVU518
 1904 00b2 013C     		subs	r4, r4, #1
 1905              	.LVL165:
 236:Core/Src/clean_main.c **** 			setBarInv(i,j);
 1906              		.loc 1 236 26 is_stmt 0 discriminator 2 view .LVU519
 1907 00b4 E4B2     		uxtb	r4, r4
 1908              	.LVL166:
 236:Core/Src/clean_main.c **** 			setBarInv(i,j);
 1909              		.loc 1 236 22 is_stmt 1 discriminator 1 view .LVU520
 239:Core/Src/clean_main.c **** 				nixie_state = 0;
 1910              		.loc 1 239 6 is_stmt 0 discriminator 1 view .LVU521
 1911 00b6 0028     		cmp	r0, #0
 1912 00b8 F0D0     		beq	.L128
 240:Core/Src/clean_main.c **** 				enable_nixie();
 1913              		.loc 1 240 5 is_stmt 1 view .LVU522
 240:Core/Src/clean_main.c **** 				enable_nixie();
 1914              		.loc 1 240 17 is_stmt 0 view .LVU523
 1915 00ba 314E     		ldr	r6, .L164+12
 1916              	.LVL167:
 240:Core/Src/clean_main.c **** 				enable_nixie();
 1917              		.loc 1 240 17 view .LVU524
 1918 00bc 0024     		movs	r4, #0
 1919              	.LVL168:
 1920              	.LBB199:
 1921              	.LBB200:
 1922              	.LBB201:
 166:Core/Src/clean_main.c **** 		}
 1923              		.loc 1 166 25 view .LVU525
 1924 00be 0027     		movs	r7, #0
 1925              	.LBE201:
 1926              	.LBE200:
 1927              	.LBE199:
 240:Core/Src/clean_main.c **** 				enable_nixie();
 1928              		.loc 1 240 17 view .LVU526
 1929 00c0 3470     		strb	r4, [r6]
 241:Core/Src/clean_main.c **** 				return;
 1930              		.loc 1 241 5 is_stmt 1 view .LVU527
 1931              	.LBB211:
 1932              	.LBI199:
 162:Core/Src/clean_main.c **** 	if(nixie_state == 0){
 1933              		.loc 1 162 6 view .LVU528
 163:Core/Src/clean_main.c **** 		for(uint8_t i=0; i<FILTER_NUMBER;i++){
 1934              		.loc 1 163 2 view .LVU529
 1935              	.LBB209:
 1936              	.LBI200:
 162:Core/Src/clean_main.c **** 	if(nixie_state == 0){
 1937              		.loc 1 162 6 view .LVU530
 1938              	.LVL169:
 1939              	.LBB202:
 164:Core/Src/clean_main.c **** 			setBarInv(i,0);
 1940              		.loc 1 164 21 discriminator 1 view .LVU531
 1941              	.L129:
 165:Core/Src/clean_main.c **** 			smooth_bar_values[i] = 0;
 1942              		.loc 1 165 4 view .LVU532
 1943 00c2 E0B2     		uxtb	r0, r4
 1944 00c4 0021     		movs	r1, #0
 164:Core/Src/clean_main.c **** 			setBarInv(i,0);
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 51


 1945              		.loc 1 164 21 is_stmt 0 discriminator 1 view .LVU533
 1946 00c6 0134     		adds	r4, r4, #1
 1947              	.LVL170:
 165:Core/Src/clean_main.c **** 			smooth_bar_values[i] = 0;
 1948              		.loc 1 165 4 view .LVU534
 1949 00c8 FFF7FEFF 		bl	setBarInv
 1950              	.LVL171:
 166:Core/Src/clean_main.c **** 		}
 1951              		.loc 1 166 4 is_stmt 1 view .LVU535
 164:Core/Src/clean_main.c **** 			setBarInv(i,0);
 1952              		.loc 1 164 21 is_stmt 0 discriminator 1 view .LVU536
 1953 00cc 0C2C     		cmp	r4, #12
 166:Core/Src/clean_main.c **** 		}
 1954              		.loc 1 166 25 view .LVU537
 1955 00ce 45F8047B 		str	r7, [r5], #4	@ float
 164:Core/Src/clean_main.c **** 			setBarInv(i,0);
 1956              		.loc 1 164 37 is_stmt 1 discriminator 3 view .LVU538
 1957              	.LVL172:
 164:Core/Src/clean_main.c **** 			setBarInv(i,0);
 1958              		.loc 1 164 21 discriminator 1 view .LVU539
 1959 00d2 F6D1     		bne	.L129
 1960              	.LBE202:
 168:Core/Src/clean_main.c **** 		for(uint8_t i=0;i<15;i++){
 1961              		.loc 1 168 3 view .LVU540
 1962              	.LVL173:
 1963              	.LBB203:
 1964              	.LBI203:
 103:Core/Src/clean_main.c **** 	HAL_GPIO_WritePin(EN_TUBE_GPIO_Port,EN_TUBE_Pin,state);
 1965              		.loc 1 103 6 view .LVU541
 1966              	.LBB204:
 104:Core/Src/clean_main.c **** }
 1967              		.loc 1 104 2 view .LVU542
 1968 00d4 2B48     		ldr	r0, .L164+16
 1969 00d6 0122     		movs	r2, #1
 1970 00d8 4FF40071 		mov	r1, #512
 1971 00dc FFF7FEFF 		bl	HAL_GPIO_WritePin
 1972              	.LVL174:
 104:Core/Src/clean_main.c **** }
 1973              		.loc 1 104 2 is_stmt 0 view .LVU543
 1974              	.LBE204:
 1975              	.LBE203:
 169:Core/Src/clean_main.c **** 			for(uint8_t j=0;j<FILTER_NUMBER;j++){
 1976              		.loc 1 169 3 is_stmt 1 view .LVU544
 1977              	.LBB205:
 169:Core/Src/clean_main.c **** 			for(uint8_t j=0;j<FILTER_NUMBER;j++){
 1978              		.loc 1 169 7 view .LVU545
 169:Core/Src/clean_main.c **** 			for(uint8_t j=0;j<FILTER_NUMBER;j++){
 1979              		.loc 1 169 20 discriminator 1 view .LVU546
 169:Core/Src/clean_main.c **** 			for(uint8_t j=0;j<FILTER_NUMBER;j++){
 1980              		.loc 1 169 15 is_stmt 0 view .LVU547
 1981 00e0 0025     		movs	r5, #0
 1982              	.LVL175:
 1983              	.L130:
 1984              	.LBB206:
 170:Core/Src/clean_main.c **** 				setBarInv(j,i);
 1985              		.loc 1 170 21 is_stmt 1 discriminator 1 view .LVU548
 1986              	.LBE206:
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 52


 1987              	.LBE205:
 1988              	.LBE209:
 1989              	.LBE211:
 240:Core/Src/clean_main.c **** 				enable_nixie();
 1990              		.loc 1 240 17 is_stmt 0 view .LVU549
 1991 00e2 0024     		movs	r4, #0
 1992              	.LVL176:
 1993              	.L131:
 1994              	.LBB212:
 1995              	.LBB210:
 1996              	.LBB208:
 1997              	.LBB207:
 171:Core/Src/clean_main.c **** 			}
 1998              		.loc 1 171 5 is_stmt 1 view .LVU550
 1999 00e4 E0B2     		uxtb	r0, r4
 2000 00e6 2946     		mov	r1, r5
 170:Core/Src/clean_main.c **** 				setBarInv(j,i);
 2001              		.loc 1 170 21 is_stmt 0 discriminator 1 view .LVU551
 2002 00e8 0134     		adds	r4, r4, #1
 2003              	.LVL177:
 171:Core/Src/clean_main.c **** 			}
 2004              		.loc 1 171 5 view .LVU552
 2005 00ea FFF7FEFF 		bl	setBarInv
 2006              	.LVL178:
 170:Core/Src/clean_main.c **** 				setBarInv(j,i);
 2007              		.loc 1 170 37 is_stmt 1 discriminator 3 view .LVU553
 170:Core/Src/clean_main.c **** 				setBarInv(j,i);
 2008              		.loc 1 170 21 discriminator 1 view .LVU554
 2009 00ee 0C2C     		cmp	r4, #12
 2010 00f0 F8D1     		bne	.L131
 2011              	.LBE207:
 173:Core/Src/clean_main.c **** 		}
 2012              		.loc 1 173 3 view .LVU555
 169:Core/Src/clean_main.c **** 			for(uint8_t j=0;j<FILTER_NUMBER;j++){
 2013              		.loc 1 169 25 is_stmt 0 discriminator 2 view .LVU556
 2014 00f2 0135     		adds	r5, r5, #1
 2015              	.LVL179:
 173:Core/Src/clean_main.c **** 		}
 2016              		.loc 1 173 3 view .LVU557
 2017 00f4 6420     		movs	r0, #100
 169:Core/Src/clean_main.c **** 			for(uint8_t j=0;j<FILTER_NUMBER;j++){
 2018              		.loc 1 169 25 discriminator 2 view .LVU558
 2019 00f6 EDB2     		uxtb	r5, r5
 173:Core/Src/clean_main.c **** 		}
 2020              		.loc 1 173 3 view .LVU559
 2021 00f8 FFF7FEFF 		bl	HAL_Delay
 2022              	.LVL180:
 169:Core/Src/clean_main.c **** 			for(uint8_t j=0;j<FILTER_NUMBER;j++){
 2023              		.loc 1 169 25 is_stmt 1 discriminator 2 view .LVU560
 169:Core/Src/clean_main.c **** 			for(uint8_t j=0;j<FILTER_NUMBER;j++){
 2024              		.loc 1 169 20 discriminator 1 view .LVU561
 2025 00fc 0F2D     		cmp	r5, #15
 2026 00fe F0D1     		bne	.L130
 2027              	.LBE208:
 2028              	.LBE210:
 2029              	.LBE212:
 2030              	.LBE198:
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 53


 2031              	.LBB213:
 2032              	.LBB196:
 2033              	.LBB193:
 2034              	.LBB190:
 175:Core/Src/clean_main.c **** 		nixie_state = 1;	
 2035              		.loc 1 175 3 view .LVU562
 2036 0100 1D48     		ldr	r0, .L164+4
 2037 0102 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 2038              	.LVL181:
 176:Core/Src/clean_main.c **** 	}
 2039              		.loc 1 176 3 view .LVU563
 176:Core/Src/clean_main.c **** 	}
 2040              		.loc 1 176 15 is_stmt 0 view .LVU564
 2041 0106 0123     		movs	r3, #1
 2042 0108 3370     		strb	r3, [r6]
 2043              	.LBE190:
 2044              	.LBE193:
 2045              	.LBE196:
 233:Core/Src/clean_main.c **** 			} 
 2046              		.loc 1 233 5 is_stmt 1 view .LVU565
 2047              	.LBE213:
 2048              	.LBE215:
 250:Core/Src/clean_main.c **** 
 2049              		.loc 1 250 1 is_stmt 0 view .LVU566
 2050 010a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2051              	.LVL182:
 2052              	.L163:
 2053              	.LBB216:
 226:Core/Src/clean_main.c **** 		for(uint8_t j=0;j<220;j++){
 2054              		.loc 1 226 24 is_stmt 1 discriminator 2 view .LVU567
 2055 010c 0136     		adds	r6, r6, #1
 2056              	.LVL183:
 226:Core/Src/clean_main.c **** 		for(uint8_t j=0;j<220;j++){
 2057              		.loc 1 226 24 is_stmt 0 discriminator 2 view .LVU568
 2058 010e F6B2     		uxtb	r6, r6
 2059              	.LVL184:
 226:Core/Src/clean_main.c **** 		for(uint8_t j=0;j<220;j++){
 2060              		.loc 1 226 19 is_stmt 1 discriminator 1 view .LVU569
 2061 0110 0C2E     		cmp	r6, #12
 2062 0112 8AD1     		bne	.L121
 2063 0114 0446     		mov	r4, r0
 2064              	.LVL185:
 2065              	.L133:
 226:Core/Src/clean_main.c **** 		for(uint8_t j=0;j<220;j++){
 2066              		.loc 1 226 19 is_stmt 0 discriminator 1 view .LVU570
 2067              	.LBE216:
 2068              	.LBB217:
 246:Core/Src/clean_main.c **** 	while(button()==0);
 2069              		.loc 1 246 28 is_stmt 1 discriminator 3 view .LVU571
 2070 0116 E0B2     		uxtb	r0, r4
 2071 0118 DC21     		movs	r1, #220
 246:Core/Src/clean_main.c **** 	while(button()==0);
 2072              		.loc 1 246 19 is_stmt 0 discriminator 2 view .LVU572
 2073 011a 0134     		adds	r4, r4, #1
 2074              	.LVL186:
 246:Core/Src/clean_main.c **** 	while(button()==0);
 2075              		.loc 1 246 28 discriminator 3 view .LVU573
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 54


 2076 011c FFF7FEFF 		bl	setBar
 2077              	.LVL187:
 246:Core/Src/clean_main.c **** 	while(button()==0);
 2078              		.loc 1 246 24 is_stmt 1 discriminator 3 view .LVU574
 246:Core/Src/clean_main.c **** 	while(button()==0);
 2079              		.loc 1 246 19 discriminator 2 view .LVU575
 2080 0120 0C2C     		cmp	r4, #12
 2081 0122 F8D1     		bne	.L133
 2082              	.L134:
 2083              	.LBE217:
 247:Core/Src/clean_main.c **** 	nixie_state = 0;
 2084              		.loc 1 247 16 discriminator 1 view .LVU576
 247:Core/Src/clean_main.c **** 	nixie_state = 0;
 2085              		.loc 1 247 8 is_stmt 0 discriminator 1 view .LVU577
 2086 0124 FFF7FEFF 		bl	button
 2087              	.LVL188:
 247:Core/Src/clean_main.c **** 	nixie_state = 0;
 2088              		.loc 1 247 16 discriminator 1 view .LVU578
 2089 0128 0028     		cmp	r0, #0
 2090 012a FBD0     		beq	.L134
 248:Core/Src/clean_main.c **** 	enable_nixie();
 2091              		.loc 1 248 2 is_stmt 1 view .LVU579
 248:Core/Src/clean_main.c **** 	enable_nixie();
 2092              		.loc 1 248 14 is_stmt 0 view .LVU580
 2093 012c 144E     		ldr	r6, .L164+12
 2094              	.LVL189:
 248:Core/Src/clean_main.c **** 	enable_nixie();
 2095              		.loc 1 248 14 view .LVU581
 2096 012e 0024     		movs	r4, #0
 2097              	.LBB218:
 2098              	.LBB219:
 2099              	.LBB220:
 166:Core/Src/clean_main.c **** 		}
 2100              		.loc 1 166 25 view .LVU582
 2101 0130 0027     		movs	r7, #0
 2102              	.LBE220:
 2103              	.LBE219:
 2104              	.LBE218:
 248:Core/Src/clean_main.c **** 	enable_nixie();
 2105              		.loc 1 248 14 view .LVU583
 2106 0132 3470     		strb	r4, [r6]
 249:Core/Src/clean_main.c **** }
 2107              		.loc 1 249 2 is_stmt 1 view .LVU584
 2108              	.LBB230:
 2109              	.LBI218:
 162:Core/Src/clean_main.c **** 	if(nixie_state == 0){
 2110              		.loc 1 162 6 view .LVU585
 163:Core/Src/clean_main.c **** 		for(uint8_t i=0; i<FILTER_NUMBER;i++){
 2111              		.loc 1 163 2 view .LVU586
 2112              	.LBB228:
 2113              	.LBI219:
 162:Core/Src/clean_main.c **** 	if(nixie_state == 0){
 2114              		.loc 1 162 6 view .LVU587
 2115              	.LVL190:
 2116              	.LBB221:
 164:Core/Src/clean_main.c **** 			setBarInv(i,0);
 2117              		.loc 1 164 21 discriminator 1 view .LVU588
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 55


 2118              	.L135:
 165:Core/Src/clean_main.c **** 			smooth_bar_values[i] = 0;
 2119              		.loc 1 165 4 view .LVU589
 2120 0134 E0B2     		uxtb	r0, r4
 2121 0136 0021     		movs	r1, #0
 164:Core/Src/clean_main.c **** 			setBarInv(i,0);
 2122              		.loc 1 164 21 is_stmt 0 discriminator 1 view .LVU590
 2123 0138 0134     		adds	r4, r4, #1
 2124              	.LVL191:
 165:Core/Src/clean_main.c **** 			smooth_bar_values[i] = 0;
 2125              		.loc 1 165 4 view .LVU591
 2126 013a FFF7FEFF 		bl	setBarInv
 2127              	.LVL192:
 166:Core/Src/clean_main.c **** 		}
 2128              		.loc 1 166 4 is_stmt 1 view .LVU592
 164:Core/Src/clean_main.c **** 			setBarInv(i,0);
 2129              		.loc 1 164 21 is_stmt 0 discriminator 1 view .LVU593
 2130 013e 0C2C     		cmp	r4, #12
 166:Core/Src/clean_main.c **** 		}
 2131              		.loc 1 166 25 view .LVU594
 2132 0140 45F8047B 		str	r7, [r5], #4	@ float
 164:Core/Src/clean_main.c **** 			setBarInv(i,0);
 2133              		.loc 1 164 37 is_stmt 1 discriminator 3 view .LVU595
 2134              	.LVL193:
 164:Core/Src/clean_main.c **** 			setBarInv(i,0);
 2135              		.loc 1 164 21 discriminator 1 view .LVU596
 2136 0144 F6D1     		bne	.L135
 2137              	.LBE221:
 168:Core/Src/clean_main.c **** 		for(uint8_t i=0;i<15;i++){
 2138              		.loc 1 168 3 view .LVU597
 2139              	.LVL194:
 2140              	.LBB222:
 2141              	.LBI222:
 103:Core/Src/clean_main.c **** 	HAL_GPIO_WritePin(EN_TUBE_GPIO_Port,EN_TUBE_Pin,state);
 2142              		.loc 1 103 6 view .LVU598
 2143              	.LBB223:
 104:Core/Src/clean_main.c **** }
 2144              		.loc 1 104 2 view .LVU599
 2145 0146 0F48     		ldr	r0, .L164+16
 2146 0148 0122     		movs	r2, #1
 2147 014a 4FF40071 		mov	r1, #512
 2148 014e FFF7FEFF 		bl	HAL_GPIO_WritePin
 2149              	.LVL195:
 104:Core/Src/clean_main.c **** }
 2150              		.loc 1 104 2 is_stmt 0 view .LVU600
 2151              	.LBE223:
 2152              	.LBE222:
 169:Core/Src/clean_main.c **** 			for(uint8_t j=0;j<FILTER_NUMBER;j++){
 2153              		.loc 1 169 3 is_stmt 1 view .LVU601
 2154              	.LBB224:
 169:Core/Src/clean_main.c **** 			for(uint8_t j=0;j<FILTER_NUMBER;j++){
 2155              		.loc 1 169 7 view .LVU602
 169:Core/Src/clean_main.c **** 			for(uint8_t j=0;j<FILTER_NUMBER;j++){
 2156              		.loc 1 169 20 discriminator 1 view .LVU603
 169:Core/Src/clean_main.c **** 			for(uint8_t j=0;j<FILTER_NUMBER;j++){
 2157              		.loc 1 169 15 is_stmt 0 view .LVU604
 2158 0152 0025     		movs	r5, #0
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 56


 2159              	.LVL196:
 2160              	.L136:
 2161              	.LBB225:
 170:Core/Src/clean_main.c **** 				setBarInv(j,i);
 2162              		.loc 1 170 21 is_stmt 1 discriminator 1 view .LVU605
 2163              	.LBE225:
 2164              	.LBE224:
 2165              	.LBE228:
 2166              	.LBE230:
 248:Core/Src/clean_main.c **** 	enable_nixie();
 2167              		.loc 1 248 14 is_stmt 0 view .LVU606
 2168 0154 0024     		movs	r4, #0
 2169              	.LVL197:
 2170              	.L137:
 2171              	.LBB231:
 2172              	.LBB229:
 2173              	.LBB227:
 2174              	.LBB226:
 171:Core/Src/clean_main.c **** 			}
 2175              		.loc 1 171 5 is_stmt 1 view .LVU607
 2176 0156 E0B2     		uxtb	r0, r4
 2177 0158 2946     		mov	r1, r5
 170:Core/Src/clean_main.c **** 				setBarInv(j,i);
 2178              		.loc 1 170 21 is_stmt 0 discriminator 1 view .LVU608
 2179 015a 0134     		adds	r4, r4, #1
 2180              	.LVL198:
 171:Core/Src/clean_main.c **** 			}
 2181              		.loc 1 171 5 view .LVU609
 2182 015c FFF7FEFF 		bl	setBarInv
 2183              	.LVL199:
 170:Core/Src/clean_main.c **** 				setBarInv(j,i);
 2184              		.loc 1 170 37 is_stmt 1 discriminator 3 view .LVU610
 170:Core/Src/clean_main.c **** 				setBarInv(j,i);
 2185              		.loc 1 170 21 discriminator 1 view .LVU611
 2186 0160 0C2C     		cmp	r4, #12
 2187 0162 F8D1     		bne	.L137
 2188              	.LBE226:
 173:Core/Src/clean_main.c **** 		}
 2189              		.loc 1 173 3 view .LVU612
 169:Core/Src/clean_main.c **** 			for(uint8_t j=0;j<FILTER_NUMBER;j++){
 2190              		.loc 1 169 25 is_stmt 0 discriminator 2 view .LVU613
 2191 0164 0135     		adds	r5, r5, #1
 2192              	.LVL200:
 173:Core/Src/clean_main.c **** 		}
 2193              		.loc 1 173 3 view .LVU614
 2194 0166 6420     		movs	r0, #100
 169:Core/Src/clean_main.c **** 			for(uint8_t j=0;j<FILTER_NUMBER;j++){
 2195              		.loc 1 169 25 discriminator 2 view .LVU615
 2196 0168 EDB2     		uxtb	r5, r5
 173:Core/Src/clean_main.c **** 		}
 2197              		.loc 1 173 3 view .LVU616
 2198 016a FFF7FEFF 		bl	HAL_Delay
 2199              	.LVL201:
 169:Core/Src/clean_main.c **** 			for(uint8_t j=0;j<FILTER_NUMBER;j++){
 2200              		.loc 1 169 25 is_stmt 1 discriminator 2 view .LVU617
 169:Core/Src/clean_main.c **** 			for(uint8_t j=0;j<FILTER_NUMBER;j++){
 2201              		.loc 1 169 20 discriminator 1 view .LVU618
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 57


 2202 016e 0F2D     		cmp	r5, #15
 2203 0170 F0D1     		bne	.L136
 2204 0172 8DE7     		b	.L126
 2205              	.L165:
 2206              		.align	2
 2207              	.L164:
 2208 0174 00000000 		.word	smooth_bar_values
 2209 0178 00000000 		.word	htim4
 2210 017c 00000000 		.word	.LC23
 2211 0180 00000000 		.word	nixie_state
 2212 0184 00040240 		.word	1073873920
 2213              	.LBE227:
 2214              	.LBE229:
 2215              	.LBE231:
 2216              		.cfi_endproc
 2217              	.LFE260:
 2219              		.section	.text.initializeFilters,"ax",%progbits
 2220              		.align	1
 2221              		.p2align 2,,3
 2222              		.global	initializeFilters
 2223              		.syntax unified
 2224              		.thumb
 2225              		.thumb_func
 2227              	initializeFilters:
 2228              	.LVL202:
 2229              	.LFB249:
  82:Core/Src/clean_main.c **** 	for(uint8_t i=0;i<numberOfFilters;i++){
 2230              		.loc 1 82 48 view -0
 2231              		.cfi_startproc
 2232              		@ args = 0, pretend = 0, frame = 0
 2233              		@ frame_needed = 0, uses_anonymous_args = 0
  83:Core/Src/clean_main.c **** 		arm_biquad_cascade_df2T_init_f32(&filter[i],1,filterCoefficients[i],filterState[i]);
 2234              		.loc 1 83 2 view .LVU620
 2235              	.LBB232:
  83:Core/Src/clean_main.c **** 		arm_biquad_cascade_df2T_init_f32(&filter[i],1,filterCoefficients[i],filterState[i]);
 2236              		.loc 1 83 6 view .LVU621
  83:Core/Src/clean_main.c **** 		arm_biquad_cascade_df2T_init_f32(&filter[i],1,filterCoefficients[i],filterState[i]);
 2237              		.loc 1 83 19 discriminator 1 view .LVU622
 2238 0000 98B1     		cbz	r0, .L172
 2239              	.LBE232:
  82:Core/Src/clean_main.c **** 	for(uint8_t i=0;i<numberOfFilters;i++){
 2240              		.loc 1 82 48 is_stmt 0 view .LVU623
 2241 0002 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2242              		.cfi_def_cfa_offset 24
 2243              		.cfi_offset 3, -24
 2244              		.cfi_offset 4, -20
 2245              		.cfi_offset 5, -16
 2246              		.cfi_offset 6, -12
 2247              		.cfi_offset 7, -8
 2248              		.cfi_offset 14, -4
 2249 0004 094C     		ldr	r4, .L175
 2250 0006 0A4E     		ldr	r6, .L175+4
 2251 0008 0A4D     		ldr	r5, .L175+8
 2252 000a 04EBC007 		add	r7, r4, r0, lsl #3
 2253              	.LVL203:
 2254              	.L168:
 2255              	.LBB233:
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 58


  84:Core/Src/clean_main.c **** 	}
 2256              		.loc 1 84 3 is_stmt 1 view .LVU624
 2257 000e 2346     		mov	r3, r4
 2258 0010 2A46     		mov	r2, r5
 2259 0012 3046     		mov	r0, r6
 2260 0014 0121     		movs	r1, #1
  83:Core/Src/clean_main.c **** 		arm_biquad_cascade_df2T_init_f32(&filter[i],1,filterCoefficients[i],filterState[i]);
 2261              		.loc 1 83 19 is_stmt 0 discriminator 1 view .LVU625
 2262 0016 0834     		adds	r4, r4, #8
  84:Core/Src/clean_main.c **** 	}
 2263              		.loc 1 84 3 view .LVU626
 2264 0018 FFF7FEFF 		bl	arm_biquad_cascade_df2T_init_f32
 2265              	.LVL204:
  83:Core/Src/clean_main.c **** 		arm_biquad_cascade_df2T_init_f32(&filter[i],1,filterCoefficients[i],filterState[i]);
 2266              		.loc 1 83 37 is_stmt 1 discriminator 3 view .LVU627
  83:Core/Src/clean_main.c **** 		arm_biquad_cascade_df2T_init_f32(&filter[i],1,filterCoefficients[i],filterState[i]);
 2267              		.loc 1 83 19 discriminator 1 view .LVU628
 2268 001c A742     		cmp	r7, r4
 2269 001e 06F10C06 		add	r6, r6, #12
 2270 0022 05F11405 		add	r5, r5, #20
 2271 0026 F2D1     		bne	.L168
 2272              	.LBE233:
  86:Core/Src/clean_main.c **** 
 2273              		.loc 1 86 1 is_stmt 0 view .LVU629
 2274 0028 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2275              	.LVL205:
 2276              	.L172:
 2277              		.cfi_def_cfa_offset 0
 2278              		.cfi_restore 3
 2279              		.cfi_restore 4
 2280              		.cfi_restore 5
 2281              		.cfi_restore 6
 2282              		.cfi_restore 7
 2283              		.cfi_restore 14
  86:Core/Src/clean_main.c **** 
 2284              		.loc 1 86 1 view .LVU630
 2285 002a 7047     		bx	lr
 2286              	.L176:
 2287              		.align	2
 2288              	.L175:
 2289 002c 00000000 		.word	filterState
 2290 0030 00000000 		.word	filter
 2291 0034 00000000 		.word	filterCoefficients
 2292              		.cfi_endproc
 2293              	.LFE249:
 2295              		.section	.text.processBand,"ax",%progbits
 2296              		.align	1
 2297              		.p2align 2,,3
 2298              		.global	processBand
 2299              		.syntax unified
 2300              		.thumb
 2301              		.thumb_func
 2303              	processBand:
 2304              	.LVL206:
 2305              	.LFB250:
  88:Core/Src/clean_main.c **** 	//return if wrong bar number
 2306              		.loc 1 88 37 is_stmt 1 view -0
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 59


 2307              		.cfi_startproc
 2308              		@ args = 0, pretend = 0, frame = 0
 2309              		@ frame_needed = 0, uses_anonymous_args = 0
  90:Core/Src/clean_main.c **** 	//calculate filter output
 2310              		.loc 1 90 2 view .LVU632
  90:Core/Src/clean_main.c **** 	//calculate filter output
 2311              		.loc 1 90 4 is_stmt 0 view .LVU633
 2312 0000 0B28     		cmp	r0, #11
 2313 0002 00D9     		bls	.L188
 2314 0004 7047     		bx	lr
 2315              	.L188:
 2316              	.LVL207:
 2317              	.LBB237:
 2318              	.LBI237:
  88:Core/Src/clean_main.c **** 	//return if wrong bar number
 2319              		.loc 1 88 6 is_stmt 1 view .LVU634
 2320              	.LBB238:
  92:Core/Src/clean_main.c **** 	//set first value from filter output as max for start 
 2321              		.loc 1 92 2 view .LVU635
 2322              	.LBE238:
 2323              	.LBE237:
  88:Core/Src/clean_main.c **** 	//return if wrong bar number
 2324              		.loc 1 88 37 is_stmt 0 view .LVU636
 2325 0006 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2326              		.cfi_def_cfa_offset 24
 2327              		.cfi_offset 3, -24
 2328              		.cfi_offset 4, -20
 2329              		.cfi_offset 5, -16
 2330              		.cfi_offset 6, -12
 2331              		.cfi_offset 7, -8
 2332              		.cfi_offset 14, -4
 2333              	.LBB242:
 2334              	.LBB241:
  92:Core/Src/clean_main.c **** 	//set first value from filter output as max for start 
 2335              		.loc 1 92 68 view .LVU637
 2336 0008 1F4E     		ldr	r6, .L189
  92:Core/Src/clean_main.c **** 	//set first value from filter output as max for start 
 2337              		.loc 1 92 30 view .LVU638
 2338 000a 204B     		ldr	r3, .L189+4
  92:Core/Src/clean_main.c **** 	//set first value from filter output as max for start 
 2339              		.loc 1 92 2 view .LVU639
 2340 000c 2049     		ldr	r1, .L189+8
  92:Core/Src/clean_main.c **** 	//set first value from filter output as max for start 
 2341              		.loc 1 92 68 view .LVU640
 2342 000e 06EB4037 		add	r7, r6, r0, lsl #13
 2343 0012 0446     		mov	r4, r0
  92:Core/Src/clean_main.c **** 	//set first value from filter output as max for start 
 2344              		.loc 1 92 30 view .LVU641
 2345 0014 00EB4000 		add	r0, r0, r0, lsl #1
 2346              	.LVL208:
  92:Core/Src/clean_main.c **** 	//set first value from filter output as max for start 
 2347              		.loc 1 92 2 view .LVU642
 2348 0018 03EB8000 		add	r0, r3, r0, lsl #2
 2349 001c 3A46     		mov	r2, r7
 2350 001e 4FF40063 		mov	r3, #2048
 2351 0022 FFF7FEFF 		bl	arm_biquad_cascade_df2T_f32
 2352              	.LVL209:
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 60


  94:Core/Src/clean_main.c **** 	//search for maximum value in array
 2353              		.loc 1 94 2 is_stmt 1 view .LVU643
  94:Core/Src/clean_main.c **** 	//search for maximum value in array
 2354              		.loc 1 94 11 is_stmt 0 view .LVU644
 2355 0026 97ED007A 		vldr.32	s14, [r7]
 2356 002a BCEEC77A 		vcvt.u32.f32	s14, s14
 2357 002e 6503     		lsls	r5, r4, #13
 2358 0030 17EE100A 		vmov	r0, s14	@ int
 2359 0034 80B2     		uxth	r0, r0
 2360 0036 07EE100A 		vmov	s14, r0	@ int
 2361              	.LVL210:
  96:Core/Src/clean_main.c **** 		if(filterOut[bandNumber][i]>max_value) max_value = filterOut[bandNumber][i];
 2362              		.loc 1 96 2 is_stmt 1 view .LVU645
 2363              	.LBB239:
  96:Core/Src/clean_main.c **** 		if(filterOut[bandNumber][i]>max_value) max_value = filterOut[bandNumber][i];
 2364              		.loc 1 96 6 view .LVU646
  96:Core/Src/clean_main.c **** 		if(filterOut[bandNumber][i]>max_value) max_value = filterOut[bandNumber][i];
 2365              		.loc 1 96 20 discriminator 1 view .LVU647
 2366 003a 2B1D     		adds	r3, r5, #4
 2367 003c 06F50052 		add	r2, r6, #8192
 2368 0040 B8EEC77A 		vcvt.f32.s32	s14, s14
 2369 0044 3344     		add	r3, r3, r6
 2370 0046 2A44     		add	r2, r2, r5
 2371              	.LVL211:
 2372              	.L181:
  97:Core/Src/clean_main.c **** 	}
 2373              		.loc 1 97 3 view .LVU648
  97:Core/Src/clean_main.c **** 	}
 2374              		.loc 1 97 42 discriminator 1 view .LVU649
  96:Core/Src/clean_main.c **** 		if(filterOut[bandNumber][i]>max_value) max_value = filterOut[bandNumber][i];
 2375              		.loc 1 96 33 discriminator 2 view .LVU650
  96:Core/Src/clean_main.c **** 		if(filterOut[bandNumber][i]>max_value) max_value = filterOut[bandNumber][i];
 2376              		.loc 1 96 20 discriminator 1 view .LVU651
  97:Core/Src/clean_main.c **** 	}
 2377              		.loc 1 97 27 is_stmt 0 view .LVU652
 2378 0048 F3EC017A 		vldmia.32	r3!, {s15}
  97:Core/Src/clean_main.c **** 	}
 2379              		.loc 1 97 5 view .LVU653
 2380 004c B4EEE77A 		vcmpe.f32	s14, s15
 2381 0050 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
  97:Core/Src/clean_main.c **** 	}
 2382              		.loc 1 97 52 discriminator 1 view .LVU654
 2383 0054 FCEEE77A 		vcvt.u32.f32	s15, s15
 2384              	.LVL212:
  97:Core/Src/clean_main.c **** 	}
 2385              		.loc 1 97 5 view .LVU655
 2386 0058 06D5     		bpl	.L179
  97:Core/Src/clean_main.c **** 	}
 2387              		.loc 1 97 52 discriminator 1 view .LVU656
 2388 005a 17EE901A 		vmov	r1, s15	@ int
 2389 005e 89B2     		uxth	r1, r1
 2390 0060 07EE101A 		vmov	s14, r1	@ int
  97:Core/Src/clean_main.c **** 	}
 2391              		.loc 1 97 52 discriminator 1 view .LVU657
 2392              	.LBE239:
 100:Core/Src/clean_main.c **** }
 2393              		.loc 1 100 37 view .LVU658
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 61


 2394 0064 B8EEC77A 		vcvt.f32.s32	s14, s14
 2395              	.L179:
 2396              	.LBB240:
  96:Core/Src/clean_main.c **** 		if(filterOut[bandNumber][i]>max_value) max_value = filterOut[bandNumber][i];
 2397              		.loc 1 96 20 discriminator 1 view .LVU659
 2398 0068 9A42     		cmp	r2, r3
 2399 006a EDD1     		bne	.L181
 2400              	.LBE240:
 100:Core/Src/clean_main.c **** }
 2401              		.loc 1 100 2 is_stmt 1 view .LVU660
 100:Core/Src/clean_main.c **** }
 2402              		.loc 1 100 43 is_stmt 0 view .LVU661
 2403 006c 094A     		ldr	r2, .L189+12
 100:Core/Src/clean_main.c **** }
 2404              		.loc 1 100 25 view .LVU662
 2405 006e 0A4B     		ldr	r3, .L189+16
 100:Core/Src/clean_main.c **** }
 2406              		.loc 1 100 43 view .LVU663
 2407 0070 02EB8402 		add	r2, r2, r4, lsl #2
 100:Core/Src/clean_main.c **** }
 2408              		.loc 1 100 37 view .LVU664
 2409 0074 D2ED007A 		vldr.32	s15, [r2]
 2410              	.LVL213:
 100:Core/Src/clean_main.c **** }
 2411              		.loc 1 100 37 view .LVU665
 2412 0078 67EE877A 		vmul.f32	s15, s15, s14
 100:Core/Src/clean_main.c **** }
 2413              		.loc 1 100 25 view .LVU666
 2414 007c 03EB8403 		add	r3, r3, r4, lsl #2
 2415 0080 C3ED007A 		vstr.32	s15, [r3]
 2416              	.LVL214:
 100:Core/Src/clean_main.c **** }
 2417              		.loc 1 100 25 view .LVU667
 2418              	.LBE241:
 2419              	.LBE242:
 101:Core/Src/clean_main.c **** 
 2420              		.loc 1 101 1 view .LVU668
 2421 0084 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2422              	.L190:
 2423 0086 00BF     		.align	2
 2424              	.L189:
 2425 0088 00000000 		.word	filterOut
 2426 008c 00000000 		.word	filter
 2427 0090 00000000 		.word	filterIn
 2428 0094 00000000 		.word	gain
 2429 0098 00000000 		.word	bar_values
 2430              		.cfi_endproc
 2431              	.LFE250:
 2433              		.section	.text.switchTube,"ax",%progbits
 2434              		.align	1
 2435              		.p2align 2,,3
 2436              		.global	switchTube
 2437              		.syntax unified
 2438              		.thumb
 2439              		.thumb_func
 2441              	switchTube:
 2442              	.LVL215:
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 62


 2443              	.LFB251:
 103:Core/Src/clean_main.c **** 	HAL_GPIO_WritePin(EN_TUBE_GPIO_Port,EN_TUBE_Pin,state);
 2444              		.loc 1 103 28 is_stmt 1 view -0
 2445              		.cfi_startproc
 2446              		@ args = 0, pretend = 0, frame = 0
 2447              		@ frame_needed = 0, uses_anonymous_args = 0
 2448              		@ link register save eliminated.
 104:Core/Src/clean_main.c **** }
 2449              		.loc 1 104 2 view .LVU670
 103:Core/Src/clean_main.c **** 	HAL_GPIO_WritePin(EN_TUBE_GPIO_Port,EN_TUBE_Pin,state);
 2450              		.loc 1 103 28 is_stmt 0 view .LVU671
 2451 0000 0246     		mov	r2, r0
 104:Core/Src/clean_main.c **** }
 2452              		.loc 1 104 2 view .LVU672
 2453 0002 4FF40071 		mov	r1, #512
 2454 0006 0148     		ldr	r0, .L192
 2455              	.LVL216:
 104:Core/Src/clean_main.c **** }
 2456              		.loc 1 104 2 view .LVU673
 2457 0008 FFF7FEBF 		b	HAL_GPIO_WritePin
 2458              	.LVL217:
 2459              	.L193:
 104:Core/Src/clean_main.c **** }
 2460              		.loc 1 104 2 view .LVU674
 2461              		.align	2
 2462              	.L192:
 2463 000c 00040240 		.word	1073873920
 2464              		.cfi_endproc
 2465              	.LFE251:
 2467              		.section	.rodata.defaultScreen.str1.4,"aMS",%progbits,1
 2468              		.align	2
 2469              	.LC24:
 2470 0000 2020204E 		.ascii	"   Nixie spectrum          analyzer      \000"
 2470      69786965 
 2470      20737065 
 2470      63747275 
 2470      6D202020 
 2471              		.global	__aeabi_dcmpgt
 2472              		.section	.text.defaultScreen,"ax",%progbits
 2473              		.align	1
 2474              		.p2align 2,,3
 2475              		.global	defaultScreen
 2476              		.syntax unified
 2477              		.thumb
 2478              		.thumb_func
 2480              	defaultScreen:
 2481              	.LFB261:
 252:Core/Src/clean_main.c **** 	while(button() == 1);
 2482              		.loc 1 252 21 is_stmt 1 view -0
 2483              		.cfi_startproc
 2484              		@ args = 0, pretend = 0, frame = 0
 2485              		@ frame_needed = 0, uses_anonymous_args = 0
 2486 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2487              		.cfi_def_cfa_offset 40
 2488              		.cfi_offset 3, -40
 2489              		.cfi_offset 4, -36
 2490              		.cfi_offset 5, -32
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 63


 2491              		.cfi_offset 6, -28
 2492              		.cfi_offset 7, -24
 2493              		.cfi_offset 8, -20
 2494              		.cfi_offset 9, -16
 2495              		.cfi_offset 10, -12
 2496              		.cfi_offset 11, -8
 2497              		.cfi_offset 14, -4
 2498 0004 2DED028B 		vpush.64	{d8}
 2499              		.cfi_def_cfa_offset 48
 2500              		.cfi_offset 80, -48
 2501              		.cfi_offset 81, -44
 2502              	.L195:
 253:Core/Src/clean_main.c **** 
 2503              		.loc 1 253 17 discriminator 1 view .LVU676
 253:Core/Src/clean_main.c **** 
 2504              		.loc 1 253 8 is_stmt 0 discriminator 1 view .LVU677
 2505 0008 FFF7FEFF 		bl	button
 2506              	.LVL218:
 253:Core/Src/clean_main.c **** 
 2507              		.loc 1 253 17 discriminator 1 view .LVU678
 2508 000c 0028     		cmp	r0, #0
 2509 000e FBD1     		bne	.L195
 256:Core/Src/clean_main.c **** 		clearDisp();
 2510              		.loc 1 256 2 is_stmt 1 view .LVU679
 256:Core/Src/clean_main.c **** 		clearDisp();
 2511              		.loc 1 256 20 is_stmt 0 view .LVU680
 2512 0010 774C     		ldr	r4, .L233+8
 2513 0012 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 256:Core/Src/clean_main.c **** 		clearDisp();
 2514              		.loc 1 256 4 view .LVU681
 2515 0014 002B     		cmp	r3, #0
 2516 0016 00F0DB80 		beq	.L230
 260:Core/Src/clean_main.c **** 		dprint("   Nixie spectrum          analyzer      ");
 2517              		.loc 1 260 2 is_stmt 1 view .LVU682
 260:Core/Src/clean_main.c **** 		dprint("   Nixie spectrum          analyzer      ");
 2518              		.loc 1 260 4 is_stmt 0 view .LVU683
 2519 001a 012B     		cmp	r3, #1
 2520 001c 00F0DE80 		beq	.L231
 2521              	.L197:
 2522              	.LBB268:
 2523              	.LBB269:
 275:Core/Src/clean_main.c **** 				i=0;
 2524              		.loc 1 275 6 view .LVU684
 2525 0020 71A7     		adr	r7, .L233
 2526 0022 D7E90067 		ldrd	r6, [r7]
 273:Core/Src/clean_main.c **** 
 2527              		.loc 1 273 12 view .LVU685
 2528 0026 DFED738A 		vldr.32	s17, .L233+12
 2529              	.LBB270:
 2530              	.LBB271:
 2531              	.LBB272:
 2532              	.LBB273:
 2533              	.LBB274:
 166:Core/Src/clean_main.c **** 		}
 2534              		.loc 1 166 25 view .LVU686
 2535 002a 9FED738A 		vldr.32	s16, .L233+16
 2536              	.L198:
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 64


 2537              	.LBE274:
 2538              	.LBE273:
 2539              	.LBE272:
 2540              	.LBE271:
 2541              	.LBE270:
 2542              	.LBE269:
 2543              	.LBE268:
 264:Core/Src/clean_main.c **** 		for(uint8_t i=0;i<timeout*2;i++){
 2544              		.loc 1 264 16 is_stmt 1 view .LVU687
 264:Core/Src/clean_main.c **** 		for(uint8_t i=0;i<timeout*2;i++){
 2545              		.loc 1 264 8 is_stmt 0 view .LVU688
 2546 002e FFF7FEFF 		bl	button
 2547              	.LVL219:
 264:Core/Src/clean_main.c **** 		for(uint8_t i=0;i<timeout*2;i++){
 2548              		.loc 1 264 16 discriminator 1 view .LVU689
 2549 0032 0446     		mov	r4, r0
 2550 0034 0028     		cmp	r0, #0
 2551 0036 5BD1     		bne	.L215
 2552              	.LVL220:
 2553              	.LBB313:
 265:Core/Src/clean_main.c **** 			if(button() == 1){
 2554              		.loc 1 265 20 is_stmt 1 discriminator 1 view .LVU690
 265:Core/Src/clean_main.c **** 			if(button() == 1){
 2555              		.loc 1 265 28 is_stmt 0 discriminator 1 view .LVU691
 2556 0038 DFF8D0A1 		ldr	r10, .L233+36
 2557 003c DFF8D091 		ldr	r9, .L233+40
 265:Core/Src/clean_main.c **** 			if(button() == 1){
 2558              		.loc 1 265 20 discriminator 1 view .LVU692
 2559 0040 BAF80030 		ldrh	r3, [r10]
 2560 0044 002B     		cmp	r3, #0
 2561 0046 00F08380 		beq	.L216
 2562              	.LBB308:
 2563              	.LBB288:
 272:Core/Src/clean_main.c **** 			avg_lvl = avg_lvl/FILTER_NUMBER;
 2564              		.loc 1 272 62 discriminator 3 view .LVU693
 2565 004a DFF8C881 		ldr	r8, .L233+44
 2566 004e 0BE0     		b	.L214
 2567              	.LVL221:
 2568              	.L232:
 272:Core/Src/clean_main.c **** 			avg_lvl = avg_lvl/FILTER_NUMBER;
 2569              		.loc 1 272 62 discriminator 3 view .LVU694
 2570              	.LBE288:
 2571              	.LBE308:
 265:Core/Src/clean_main.c **** 			if(button() == 1){
 2572              		.loc 1 265 32 discriminator 2 view .LVU695
 2573 0050 0134     		adds	r4, r4, #1
 2574              	.LVL222:
 265:Core/Src/clean_main.c **** 			if(button() == 1){
 2575              		.loc 1 265 32 discriminator 2 view .LVU696
 2576 0052 E4B2     		uxtb	r4, r4
 265:Core/Src/clean_main.c **** 			if(button() == 1){
 2577              		.loc 1 265 20 discriminator 1 view .LVU697
 2578 0054 2546     		mov	r5, r4
 2579              	.LVL223:
 2580              	.L201:
 2581              	.LBB309:
 279:Core/Src/clean_main.c **** 				//wyswietl zegarek
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 65


 2582              		.loc 1 279 4 is_stmt 1 view .LVU698
 281:Core/Src/clean_main.c **** 			HAL_Delay(500);
 2583              		.loc 1 281 4 view .LVU699
 282:Core/Src/clean_main.c **** 		}
 2584              		.loc 1 282 4 view .LVU700
 2585 0056 4FF4FA70 		mov	r0, #500
 2586 005a FFF7FEFF 		bl	HAL_Delay
 2587              	.LVL224:
 2588              	.LBE309:
 265:Core/Src/clean_main.c **** 			if(button() == 1){
 2589              		.loc 1 265 32 discriminator 2 view .LVU701
 265:Core/Src/clean_main.c **** 			if(button() == 1){
 2590              		.loc 1 265 20 discriminator 1 view .LVU702
 265:Core/Src/clean_main.c **** 			if(button() == 1){
 2591              		.loc 1 265 28 is_stmt 0 discriminator 1 view .LVU703
 2592 005e BAF80030 		ldrh	r3, [r10]
 265:Core/Src/clean_main.c **** 			if(button() == 1){
 2593              		.loc 1 265 20 discriminator 1 view .LVU704
 2594 0062 B5EB430F 		cmp	r5, r3, lsl #1
 2595 0066 73DA     		bge	.L216
 2596              	.LVL225:
 2597              	.L214:
 2598              	.LBB310:
 266:Core/Src/clean_main.c **** 				enable_nixie();
 2599              		.loc 1 266 4 is_stmt 1 view .LVU705
 266:Core/Src/clean_main.c **** 				enable_nixie();
 2600              		.loc 1 266 7 is_stmt 0 view .LVU706
 2601 0068 FFF7FEFF 		bl	button
 2602              	.LVL226:
 266:Core/Src/clean_main.c **** 				enable_nixie();
 2603              		.loc 1 266 6 discriminator 1 view .LVU707
 2604 006c 0028     		cmp	r0, #0
 2605 006e 7CD1     		bne	.L199
 2606              	.LVL227:
 2607              	.LBB289:
 272:Core/Src/clean_main.c **** 			avg_lvl = avg_lvl/FILTER_NUMBER;
 2608              		.loc 1 272 21 is_stmt 1 discriminator 1 view .LVU708
 272:Core/Src/clean_main.c **** 			avg_lvl = avg_lvl/FILTER_NUMBER;
 2609              		.loc 1 272 41 discriminator 3 view .LVU709
 272:Core/Src/clean_main.c **** 			avg_lvl = avg_lvl/FILTER_NUMBER;
 2610              		.loc 1 272 37 discriminator 3 view .LVU710
 272:Core/Src/clean_main.c **** 			avg_lvl = avg_lvl/FILTER_NUMBER;
 2611              		.loc 1 272 21 discriminator 1 view .LVU711
 272:Core/Src/clean_main.c **** 			avg_lvl = avg_lvl/FILTER_NUMBER;
 2612              		.loc 1 272 41 discriminator 3 view .LVU712
 272:Core/Src/clean_main.c **** 			avg_lvl = avg_lvl/FILTER_NUMBER;
 2613              		.loc 1 272 49 is_stmt 0 discriminator 3 view .LVU713
 2614 0070 98ED017A 		vldr.32	s14, [r8, #4]
 2615 0074 D8ED007A 		vldr.32	s15, [r8]
 2616 0078 D8ED026A 		vldr.32	s13, [r8, #8]
 2617 007c 77EE877A 		vadd.f32	s15, s15, s14
 2618              	.LVL228:
 272:Core/Src/clean_main.c **** 			avg_lvl = avg_lvl/FILTER_NUMBER;
 2619              		.loc 1 272 37 is_stmt 1 discriminator 3 view .LVU714
 272:Core/Src/clean_main.c **** 			avg_lvl = avg_lvl/FILTER_NUMBER;
 2620              		.loc 1 272 21 discriminator 1 view .LVU715
 272:Core/Src/clean_main.c **** 			avg_lvl = avg_lvl/FILTER_NUMBER;
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 66


 2621              		.loc 1 272 41 discriminator 3 view .LVU716
 272:Core/Src/clean_main.c **** 			avg_lvl = avg_lvl/FILTER_NUMBER;
 2622              		.loc 1 272 49 is_stmt 0 discriminator 3 view .LVU717
 2623 0080 98ED037A 		vldr.32	s14, [r8, #12]
 2624 0084 77EEA67A 		vadd.f32	s15, s15, s13
 2625              	.LVL229:
 272:Core/Src/clean_main.c **** 			avg_lvl = avg_lvl/FILTER_NUMBER;
 2626              		.loc 1 272 37 is_stmt 1 discriminator 3 view .LVU718
 272:Core/Src/clean_main.c **** 			avg_lvl = avg_lvl/FILTER_NUMBER;
 2627              		.loc 1 272 21 discriminator 1 view .LVU719
 272:Core/Src/clean_main.c **** 			avg_lvl = avg_lvl/FILTER_NUMBER;
 2628              		.loc 1 272 41 discriminator 3 view .LVU720
 272:Core/Src/clean_main.c **** 			avg_lvl = avg_lvl/FILTER_NUMBER;
 2629              		.loc 1 272 49 is_stmt 0 discriminator 3 view .LVU721
 2630 0088 D8ED046A 		vldr.32	s13, [r8, #16]
 2631 008c 77EE877A 		vadd.f32	s15, s15, s14
 2632              	.LVL230:
 272:Core/Src/clean_main.c **** 			avg_lvl = avg_lvl/FILTER_NUMBER;
 2633              		.loc 1 272 37 is_stmt 1 discriminator 3 view .LVU722
 272:Core/Src/clean_main.c **** 			avg_lvl = avg_lvl/FILTER_NUMBER;
 2634              		.loc 1 272 21 discriminator 1 view .LVU723
 272:Core/Src/clean_main.c **** 			avg_lvl = avg_lvl/FILTER_NUMBER;
 2635              		.loc 1 272 41 discriminator 3 view .LVU724
 272:Core/Src/clean_main.c **** 			avg_lvl = avg_lvl/FILTER_NUMBER;
 2636              		.loc 1 272 49 is_stmt 0 discriminator 3 view .LVU725
 2637 0090 98ED057A 		vldr.32	s14, [r8, #20]
 2638 0094 77EEA67A 		vadd.f32	s15, s15, s13
 2639              	.LVL231:
 272:Core/Src/clean_main.c **** 			avg_lvl = avg_lvl/FILTER_NUMBER;
 2640              		.loc 1 272 37 is_stmt 1 discriminator 3 view .LVU726
 272:Core/Src/clean_main.c **** 			avg_lvl = avg_lvl/FILTER_NUMBER;
 2641              		.loc 1 272 21 discriminator 1 view .LVU727
 272:Core/Src/clean_main.c **** 			avg_lvl = avg_lvl/FILTER_NUMBER;
 2642              		.loc 1 272 41 discriminator 3 view .LVU728
 272:Core/Src/clean_main.c **** 			avg_lvl = avg_lvl/FILTER_NUMBER;
 2643              		.loc 1 272 49 is_stmt 0 discriminator 3 view .LVU729
 2644 0098 D8ED066A 		vldr.32	s13, [r8, #24]
 2645 009c 77EE877A 		vadd.f32	s15, s15, s14
 2646              	.LVL232:
 272:Core/Src/clean_main.c **** 			avg_lvl = avg_lvl/FILTER_NUMBER;
 2647              		.loc 1 272 37 is_stmt 1 discriminator 3 view .LVU730
 272:Core/Src/clean_main.c **** 			avg_lvl = avg_lvl/FILTER_NUMBER;
 2648              		.loc 1 272 21 discriminator 1 view .LVU731
 272:Core/Src/clean_main.c **** 			avg_lvl = avg_lvl/FILTER_NUMBER;
 2649              		.loc 1 272 41 discriminator 3 view .LVU732
 272:Core/Src/clean_main.c **** 			avg_lvl = avg_lvl/FILTER_NUMBER;
 2650              		.loc 1 272 49 is_stmt 0 discriminator 3 view .LVU733
 2651 00a0 98ED077A 		vldr.32	s14, [r8, #28]
 2652 00a4 77EEA67A 		vadd.f32	s15, s15, s13
 2653              	.LVL233:
 272:Core/Src/clean_main.c **** 			avg_lvl = avg_lvl/FILTER_NUMBER;
 2654              		.loc 1 272 37 is_stmt 1 discriminator 3 view .LVU734
 272:Core/Src/clean_main.c **** 			avg_lvl = avg_lvl/FILTER_NUMBER;
 2655              		.loc 1 272 21 discriminator 1 view .LVU735
 272:Core/Src/clean_main.c **** 			avg_lvl = avg_lvl/FILTER_NUMBER;
 2656              		.loc 1 272 41 discriminator 3 view .LVU736
 272:Core/Src/clean_main.c **** 			avg_lvl = avg_lvl/FILTER_NUMBER;
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 67


 2657              		.loc 1 272 49 is_stmt 0 discriminator 3 view .LVU737
 2658 00a8 D8ED086A 		vldr.32	s13, [r8, #32]
 2659 00ac 77EE877A 		vadd.f32	s15, s15, s14
 2660              	.LVL234:
 272:Core/Src/clean_main.c **** 			avg_lvl = avg_lvl/FILTER_NUMBER;
 2661              		.loc 1 272 37 is_stmt 1 discriminator 3 view .LVU738
 272:Core/Src/clean_main.c **** 			avg_lvl = avg_lvl/FILTER_NUMBER;
 2662              		.loc 1 272 21 discriminator 1 view .LVU739
 272:Core/Src/clean_main.c **** 			avg_lvl = avg_lvl/FILTER_NUMBER;
 2663              		.loc 1 272 41 discriminator 3 view .LVU740
 272:Core/Src/clean_main.c **** 			avg_lvl = avg_lvl/FILTER_NUMBER;
 2664              		.loc 1 272 49 is_stmt 0 discriminator 3 view .LVU741
 2665 00b0 98ED097A 		vldr.32	s14, [r8, #36]
 2666 00b4 77EEA67A 		vadd.f32	s15, s15, s13
 2667              	.LVL235:
 272:Core/Src/clean_main.c **** 			avg_lvl = avg_lvl/FILTER_NUMBER;
 2668              		.loc 1 272 37 is_stmt 1 discriminator 3 view .LVU742
 272:Core/Src/clean_main.c **** 			avg_lvl = avg_lvl/FILTER_NUMBER;
 2669              		.loc 1 272 21 discriminator 1 view .LVU743
 272:Core/Src/clean_main.c **** 			avg_lvl = avg_lvl/FILTER_NUMBER;
 2670              		.loc 1 272 41 discriminator 3 view .LVU744
 272:Core/Src/clean_main.c **** 			avg_lvl = avg_lvl/FILTER_NUMBER;
 2671              		.loc 1 272 49 is_stmt 0 discriminator 3 view .LVU745
 2672 00b8 D8ED0A6A 		vldr.32	s13, [r8, #40]
 2673 00bc 77EE877A 		vadd.f32	s15, s15, s14
 2674              	.LVL236:
 272:Core/Src/clean_main.c **** 			avg_lvl = avg_lvl/FILTER_NUMBER;
 2675              		.loc 1 272 37 is_stmt 1 discriminator 3 view .LVU746
 272:Core/Src/clean_main.c **** 			avg_lvl = avg_lvl/FILTER_NUMBER;
 2676              		.loc 1 272 21 discriminator 1 view .LVU747
 272:Core/Src/clean_main.c **** 			avg_lvl = avg_lvl/FILTER_NUMBER;
 2677              		.loc 1 272 41 discriminator 3 view .LVU748
 272:Core/Src/clean_main.c **** 			avg_lvl = avg_lvl/FILTER_NUMBER;
 2678              		.loc 1 272 49 is_stmt 0 discriminator 3 view .LVU749
 2679 00c0 98ED0B7A 		vldr.32	s14, [r8, #44]
 2680 00c4 77EEA67A 		vadd.f32	s15, s15, s13
 2681              	.LVL237:
 272:Core/Src/clean_main.c **** 			avg_lvl = avg_lvl/FILTER_NUMBER;
 2682              		.loc 1 272 37 is_stmt 1 discriminator 3 view .LVU750
 272:Core/Src/clean_main.c **** 			avg_lvl = avg_lvl/FILTER_NUMBER;
 2683              		.loc 1 272 21 discriminator 1 view .LVU751
 272:Core/Src/clean_main.c **** 			avg_lvl = avg_lvl/FILTER_NUMBER;
 2684              		.loc 1 272 41 discriminator 3 view .LVU752
 272:Core/Src/clean_main.c **** 			avg_lvl = avg_lvl/FILTER_NUMBER;
 2685              		.loc 1 272 49 is_stmt 0 discriminator 3 view .LVU753
 2686 00c8 77EE877A 		vadd.f32	s15, s15, s14
 2687              	.LVL238:
 272:Core/Src/clean_main.c **** 			avg_lvl = avg_lvl/FILTER_NUMBER;
 2688              		.loc 1 272 37 is_stmt 1 discriminator 3 view .LVU754
 272:Core/Src/clean_main.c **** 			avg_lvl = avg_lvl/FILTER_NUMBER;
 2689              		.loc 1 272 21 discriminator 1 view .LVU755
 2690              	.LBE289:
 273:Core/Src/clean_main.c **** 
 2691              		.loc 1 273 4 view .LVU756
 275:Core/Src/clean_main.c **** 				i=0;
 2692              		.loc 1 275 4 view .LVU757
 275:Core/Src/clean_main.c **** 				i=0;
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 68


 2693              		.loc 1 275 15 is_stmt 0 view .LVU758
 2694 00cc 67EEA87A 		vmul.f32	s15, s15, s17
 2695              	.LVL239:
 275:Core/Src/clean_main.c **** 				i=0;
 2696              		.loc 1 275 15 view .LVU759
 2697 00d0 17EE900A 		vmov	r0, s15
 2698 00d4 FFF7FEFF 		bl	__aeabi_f2d
 2699              	.LVL240:
 275:Core/Src/clean_main.c **** 				i=0;
 2700              		.loc 1 275 6 view .LVU760
 2701 00d8 3246     		mov	r2, r6
 2702 00da 3B46     		mov	r3, r7
 2703 00dc FFF7FEFF 		bl	__aeabi_dcmpgt
 2704              	.LVL241:
 2705 00e0 0028     		cmp	r0, #0
 2706 00e2 B5D0     		beq	.L232
 276:Core/Src/clean_main.c **** 				enable_nixie();
 2707              		.loc 1 276 5 is_stmt 1 view .LVU761
 2708              	.LVL242:
 277:Core/Src/clean_main.c **** 			}
 2709              		.loc 1 277 5 view .LVU762
 2710              	.LBB290:
 2711              	.LBI270:
 162:Core/Src/clean_main.c **** 	if(nixie_state == 0){
 2712              		.loc 1 162 6 view .LVU763
 2713              	.LBB286:
 163:Core/Src/clean_main.c **** 		for(uint8_t i=0; i<FILTER_NUMBER;i++){
 2714              		.loc 1 163 2 view .LVU764
 163:Core/Src/clean_main.c **** 		for(uint8_t i=0; i<FILTER_NUMBER;i++){
 2715              		.loc 1 163 17 is_stmt 0 view .LVU765
 2716 00e4 99F80050 		ldrb	r5, [r9]	@ zero_extendqisi2
 163:Core/Src/clean_main.c **** 		for(uint8_t i=0; i<FILTER_NUMBER;i++){
 2717              		.loc 1 163 4 view .LVU766
 2718 00e8 55B1     		cbz	r5, .L208
 2719              	.L213:
 2720 00ea 0125     		movs	r5, #1
 2721 00ec 2C46     		mov	r4, r5
 2722 00ee B2E7     		b	.L201
 2723              	.LVL243:
 2724              	.L215:
 163:Core/Src/clean_main.c **** 		for(uint8_t i=0; i<FILTER_NUMBER;i++){
 2725              		.loc 1 163 4 view .LVU767
 2726              	.LBE286:
 2727              	.LBE290:
 2728              	.LBE310:
 2729              	.LBE313:
 287:Core/Src/clean_main.c **** }
 2730              		.loc 1 287 17 is_stmt 1 discriminator 1 view .LVU768
 287:Core/Src/clean_main.c **** }
 2731              		.loc 1 287 8 is_stmt 0 discriminator 1 view .LVU769
 2732 00f0 FFF7FEFF 		bl	button
 2733              	.LVL244:
 287:Core/Src/clean_main.c **** }
 2734              		.loc 1 287 17 discriminator 1 view .LVU770
 2735 00f4 0028     		cmp	r0, #0
 2736 00f6 FBD1     		bne	.L215
 2737              	.L194:
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 69


 288:Core/Src/clean_main.c **** 
 2738              		.loc 1 288 1 view .LVU771
 2739 00f8 BDEC028B 		vldm	sp!, {d8}
 2740              		.cfi_remember_state
 2741              		.cfi_restore 80
 2742              		.cfi_restore 81
 2743              		.cfi_def_cfa_offset 40
 2744 00fc BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2745              	.LVL245:
 2746              	.L208:
 2747              		.cfi_restore_state
 288:Core/Src/clean_main.c **** 
 2748              		.loc 1 288 1 view .LVU772
 2749 0100 DFF800B1 		ldr	fp, .L233+28
 2750              	.LBB314:
 2751              	.LBB311:
 2752              	.LBB291:
 2753              	.LBB287:
 163:Core/Src/clean_main.c **** 		for(uint8_t i=0; i<FILTER_NUMBER;i++){
 2754              		.loc 1 163 4 view .LVU773
 2755 0104 2C46     		mov	r4, r5
 2756              	.L209:
 2757              	.LVL246:
 2758              	.LBB284:
 2759              	.LBB282:
 2760              	.LBB275:
 165:Core/Src/clean_main.c **** 			smooth_bar_values[i] = 0;
 2761              		.loc 1 165 4 is_stmt 1 view .LVU774
 2762 0106 E0B2     		uxtb	r0, r4
 2763 0108 0021     		movs	r1, #0
 164:Core/Src/clean_main.c **** 			setBarInv(i,0);
 2764              		.loc 1 164 21 is_stmt 0 discriminator 1 view .LVU775
 2765 010a 0134     		adds	r4, r4, #1
 2766              	.LVL247:
 165:Core/Src/clean_main.c **** 			smooth_bar_values[i] = 0;
 2767              		.loc 1 165 4 view .LVU776
 2768 010c FFF7FEFF 		bl	setBarInv
 2769              	.LVL248:
 166:Core/Src/clean_main.c **** 		}
 2770              		.loc 1 166 4 is_stmt 1 view .LVU777
 164:Core/Src/clean_main.c **** 			setBarInv(i,0);
 2771              		.loc 1 164 21 is_stmt 0 discriminator 1 view .LVU778
 2772 0110 0C2C     		cmp	r4, #12
 166:Core/Src/clean_main.c **** 		}
 2773              		.loc 1 166 25 view .LVU779
 2774 0112 ABEC018A 		vstmia.32	fp!, {s16}
 164:Core/Src/clean_main.c **** 			setBarInv(i,0);
 2775              		.loc 1 164 37 is_stmt 1 discriminator 3 view .LVU780
 2776              	.LVL249:
 164:Core/Src/clean_main.c **** 			setBarInv(i,0);
 2777              		.loc 1 164 21 discriminator 1 view .LVU781
 2778 0116 F6D1     		bne	.L209
 2779              	.LBE275:
 168:Core/Src/clean_main.c **** 		for(uint8_t i=0;i<15;i++){
 2780              		.loc 1 168 3 view .LVU782
 2781              	.LVL250:
 2782              	.LBB276:
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 70


 2783              	.LBI276:
 103:Core/Src/clean_main.c **** 	HAL_GPIO_WritePin(EN_TUBE_GPIO_Port,EN_TUBE_Pin,state);
 2784              		.loc 1 103 6 view .LVU783
 2785              	.LBB277:
 104:Core/Src/clean_main.c **** }
 2786              		.loc 1 104 2 view .LVU784
 2787 0118 3848     		ldr	r0, .L233+20
 2788 011a 0122     		movs	r2, #1
 2789 011c 4FF40071 		mov	r1, #512
 2790 0120 FFF7FEFF 		bl	HAL_GPIO_WritePin
 2791              	.LVL251:
 104:Core/Src/clean_main.c **** }
 2792              		.loc 1 104 2 is_stmt 0 view .LVU785
 2793              	.LBE277:
 2794              	.LBE276:
 169:Core/Src/clean_main.c **** 			for(uint8_t j=0;j<FILTER_NUMBER;j++){
 2795              		.loc 1 169 3 is_stmt 1 view .LVU786
 2796              	.LBB278:
 169:Core/Src/clean_main.c **** 			for(uint8_t j=0;j<FILTER_NUMBER;j++){
 2797              		.loc 1 169 7 view .LVU787
 169:Core/Src/clean_main.c **** 			for(uint8_t j=0;j<FILTER_NUMBER;j++){
 2798              		.loc 1 169 20 discriminator 1 view .LVU788
 2799              	.L210:
 2800              	.LBB279:
 170:Core/Src/clean_main.c **** 				setBarInv(j,i);
 2801              		.loc 1 170 21 discriminator 1 view .LVU789
 2802              	.LBE279:
 2803              	.LBE278:
 2804              	.LBE282:
 2805              	.LBE284:
 163:Core/Src/clean_main.c **** 		for(uint8_t i=0; i<FILTER_NUMBER;i++){
 2806              		.loc 1 163 4 is_stmt 0 view .LVU790
 2807 0124 0024     		movs	r4, #0
 2808              	.LVL252:
 2809              	.L211:
 2810              	.LBB285:
 2811              	.LBB283:
 2812              	.LBB281:
 2813              	.LBB280:
 171:Core/Src/clean_main.c **** 			}
 2814              		.loc 1 171 5 is_stmt 1 view .LVU791
 2815 0126 E0B2     		uxtb	r0, r4
 2816 0128 2946     		mov	r1, r5
 170:Core/Src/clean_main.c **** 				setBarInv(j,i);
 2817              		.loc 1 170 21 is_stmt 0 discriminator 1 view .LVU792
 2818 012a 0134     		adds	r4, r4, #1
 2819              	.LVL253:
 171:Core/Src/clean_main.c **** 			}
 2820              		.loc 1 171 5 view .LVU793
 2821 012c FFF7FEFF 		bl	setBarInv
 2822              	.LVL254:
 170:Core/Src/clean_main.c **** 				setBarInv(j,i);
 2823              		.loc 1 170 37 is_stmt 1 discriminator 3 view .LVU794
 170:Core/Src/clean_main.c **** 				setBarInv(j,i);
 2824              		.loc 1 170 21 discriminator 1 view .LVU795
 2825 0130 0C2C     		cmp	r4, #12
 2826 0132 F8D1     		bne	.L211
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 71


 2827              	.LBE280:
 173:Core/Src/clean_main.c **** 		}
 2828              		.loc 1 173 3 view .LVU796
 169:Core/Src/clean_main.c **** 			for(uint8_t j=0;j<FILTER_NUMBER;j++){
 2829              		.loc 1 169 25 is_stmt 0 discriminator 2 view .LVU797
 2830 0134 0135     		adds	r5, r5, #1
 2831              	.LVL255:
 173:Core/Src/clean_main.c **** 		}
 2832              		.loc 1 173 3 view .LVU798
 2833 0136 6420     		movs	r0, #100
 169:Core/Src/clean_main.c **** 			for(uint8_t j=0;j<FILTER_NUMBER;j++){
 2834              		.loc 1 169 25 discriminator 2 view .LVU799
 2835 0138 EDB2     		uxtb	r5, r5
 173:Core/Src/clean_main.c **** 		}
 2836              		.loc 1 173 3 view .LVU800
 2837 013a FFF7FEFF 		bl	HAL_Delay
 2838              	.LVL256:
 169:Core/Src/clean_main.c **** 			for(uint8_t j=0;j<FILTER_NUMBER;j++){
 2839              		.loc 1 169 25 is_stmt 1 discriminator 2 view .LVU801
 169:Core/Src/clean_main.c **** 			for(uint8_t j=0;j<FILTER_NUMBER;j++){
 2840              		.loc 1 169 20 discriminator 1 view .LVU802
 2841 013e 0F2D     		cmp	r5, #15
 2842 0140 F0D1     		bne	.L210
 2843              	.LBE281:
 175:Core/Src/clean_main.c **** 		nixie_state = 1;	
 2844              		.loc 1 175 3 view .LVU803
 2845 0142 2F48     		ldr	r0, .L233+24
 2846 0144 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 2847              	.LVL257:
 176:Core/Src/clean_main.c **** 	}
 2848              		.loc 1 176 3 view .LVU804
 176:Core/Src/clean_main.c **** 	}
 2849              		.loc 1 176 15 is_stmt 0 view .LVU805
 2850 0148 0123     		movs	r3, #1
 2851 014a 89F80030 		strb	r3, [r9]
 2852              	.LVL258:
 178:Core/Src/clean_main.c **** 
 2853              		.loc 1 178 1 view .LVU806
 2854 014e CCE7     		b	.L213
 2855              	.LVL259:
 2856              	.L216:
 178:Core/Src/clean_main.c **** 
 2857              		.loc 1 178 1 view .LVU807
 2858              	.LBE283:
 2859              	.LBE285:
 2860              	.LBE287:
 2861              	.LBE291:
 2862              	.LBE311:
 2863              	.LBE314:
 284:Core/Src/clean_main.c **** 	}
 2864              		.loc 1 284 3 is_stmt 1 view .LVU808
 2865              	.LBB315:
 2866              	.LBI315:
 180:Core/Src/clean_main.c **** 	HAL_TIM_Base_Stop_IT(&htim4);
 2867              		.loc 1 180 6 view .LVU809
 2868              	.LBB316:
 181:Core/Src/clean_main.c **** 	switchTube(0);
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 72


 2869              		.loc 1 181 2 view .LVU810
 2870 0150 2B48     		ldr	r0, .L233+24
 2871 0152 FFF7FEFF 		bl	HAL_TIM_Base_Stop_IT
 2872              	.LVL260:
 182:Core/Src/clean_main.c **** 	nixie_state = 0;
 2873              		.loc 1 182 2 view .LVU811
 2874              	.LBB317:
 2875              	.LBI317:
 103:Core/Src/clean_main.c **** 	HAL_GPIO_WritePin(EN_TUBE_GPIO_Port,EN_TUBE_Pin,state);
 2876              		.loc 1 103 6 view .LVU812
 2877              	.LBB318:
 104:Core/Src/clean_main.c **** }
 2878              		.loc 1 104 2 view .LVU813
 2879 0156 2948     		ldr	r0, .L233+20
 2880 0158 0022     		movs	r2, #0
 2881 015a 4FF40071 		mov	r1, #512
 2882 015e FFF7FEFF 		bl	HAL_GPIO_WritePin
 2883              	.LVL261:
 104:Core/Src/clean_main.c **** }
 2884              		.loc 1 104 2 is_stmt 0 view .LVU814
 2885              	.LBE318:
 2886              	.LBE317:
 183:Core/Src/clean_main.c **** }
 2887              		.loc 1 183 2 is_stmt 1 view .LVU815
 183:Core/Src/clean_main.c **** }
 2888              		.loc 1 183 14 is_stmt 0 view .LVU816
 2889 0162 0023     		movs	r3, #0
 2890 0164 89F80030 		strb	r3, [r9]
 184:Core/Src/clean_main.c **** 
 2891              		.loc 1 184 1 view .LVU817
 2892 0168 61E7     		b	.L198
 2893              	.LVL262:
 2894              	.L199:
 184:Core/Src/clean_main.c **** 
 2895              		.loc 1 184 1 view .LVU818
 2896              	.LBE316:
 2897              	.LBE315:
 2898              	.LBB319:
 2899              	.LBB312:
 267:Core/Src/clean_main.c **** 				while(button() == 1);
 2900              		.loc 1 267 5 is_stmt 1 view .LVU819
 2901              	.LBB292:
 2902              	.LBI292:
 162:Core/Src/clean_main.c **** 	if(nixie_state == 0){
 2903              		.loc 1 162 6 view .LVU820
 2904              	.LBB293:
 163:Core/Src/clean_main.c **** 		for(uint8_t i=0; i<FILTER_NUMBER;i++){
 2905              		.loc 1 163 2 view .LVU821
 163:Core/Src/clean_main.c **** 		for(uint8_t i=0; i<FILTER_NUMBER;i++){
 2906              		.loc 1 163 17 is_stmt 0 view .LVU822
 2907 016a 99F80050 		ldrb	r5, [r9]	@ zero_extendqisi2
 163:Core/Src/clean_main.c **** 		for(uint8_t i=0; i<FILTER_NUMBER;i++){
 2908              		.loc 1 163 4 view .LVU823
 2909 016e 35BB     		cbnz	r5, .L207
 2910 0170 244E     		ldr	r6, .L233+28
 2911              	.LBB294:
 2912              	.LBB295:
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 73


 2913              	.LBB296:
 166:Core/Src/clean_main.c **** 		}
 2914              		.loc 1 166 25 view .LVU824
 2915 0172 0027     		movs	r7, #0
 2916              	.LBE296:
 2917              	.LBE295:
 2918              	.LBE294:
 163:Core/Src/clean_main.c **** 		for(uint8_t i=0; i<FILTER_NUMBER;i++){
 2919              		.loc 1 163 4 view .LVU825
 2920 0174 2C46     		mov	r4, r5
 2921              	.LVL263:
 2922              	.L203:
 2923              	.LBB306:
 2924              	.LBB304:
 2925              	.LBB297:
 165:Core/Src/clean_main.c **** 			smooth_bar_values[i] = 0;
 2926              		.loc 1 165 4 is_stmt 1 view .LVU826
 2927 0176 E0B2     		uxtb	r0, r4
 2928 0178 0021     		movs	r1, #0
 164:Core/Src/clean_main.c **** 			setBarInv(i,0);
 2929              		.loc 1 164 21 is_stmt 0 discriminator 1 view .LVU827
 2930 017a 0134     		adds	r4, r4, #1
 2931              	.LVL264:
 165:Core/Src/clean_main.c **** 			smooth_bar_values[i] = 0;
 2932              		.loc 1 165 4 view .LVU828
 2933 017c FFF7FEFF 		bl	setBarInv
 2934              	.LVL265:
 166:Core/Src/clean_main.c **** 		}
 2935              		.loc 1 166 4 is_stmt 1 view .LVU829
 164:Core/Src/clean_main.c **** 			setBarInv(i,0);
 2936              		.loc 1 164 21 is_stmt 0 discriminator 1 view .LVU830
 2937 0180 0C2C     		cmp	r4, #12
 166:Core/Src/clean_main.c **** 		}
 2938              		.loc 1 166 25 view .LVU831
 2939 0182 46F8047B 		str	r7, [r6], #4	@ float
 164:Core/Src/clean_main.c **** 			setBarInv(i,0);
 2940              		.loc 1 164 37 is_stmt 1 discriminator 3 view .LVU832
 2941              	.LVL266:
 164:Core/Src/clean_main.c **** 			setBarInv(i,0);
 2942              		.loc 1 164 21 discriminator 1 view .LVU833
 2943 0186 F6D1     		bne	.L203
 2944              	.LBE297:
 168:Core/Src/clean_main.c **** 		for(uint8_t i=0;i<15;i++){
 2945              		.loc 1 168 3 view .LVU834
 2946              	.LVL267:
 2947              	.LBB298:
 2948              	.LBI298:
 103:Core/Src/clean_main.c **** 	HAL_GPIO_WritePin(EN_TUBE_GPIO_Port,EN_TUBE_Pin,state);
 2949              		.loc 1 103 6 view .LVU835
 2950              	.LBB299:
 104:Core/Src/clean_main.c **** }
 2951              		.loc 1 104 2 view .LVU836
 2952 0188 1C48     		ldr	r0, .L233+20
 2953 018a 0122     		movs	r2, #1
 2954 018c 4FF40071 		mov	r1, #512
 2955 0190 FFF7FEFF 		bl	HAL_GPIO_WritePin
 2956              	.LVL268:
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 74


 104:Core/Src/clean_main.c **** }
 2957              		.loc 1 104 2 is_stmt 0 view .LVU837
 2958              	.LBE299:
 2959              	.LBE298:
 169:Core/Src/clean_main.c **** 			for(uint8_t j=0;j<FILTER_NUMBER;j++){
 2960              		.loc 1 169 3 is_stmt 1 view .LVU838
 2961              	.LBB300:
 169:Core/Src/clean_main.c **** 			for(uint8_t j=0;j<FILTER_NUMBER;j++){
 2962              		.loc 1 169 7 view .LVU839
 169:Core/Src/clean_main.c **** 			for(uint8_t j=0;j<FILTER_NUMBER;j++){
 2963              		.loc 1 169 20 discriminator 1 view .LVU840
 2964              	.L204:
 2965              	.LBB301:
 170:Core/Src/clean_main.c **** 				setBarInv(j,i);
 2966              		.loc 1 170 21 discriminator 1 view .LVU841
 2967              	.LBE301:
 2968              	.LBE300:
 2969              	.LBE304:
 2970              	.LBE306:
 163:Core/Src/clean_main.c **** 		for(uint8_t i=0; i<FILTER_NUMBER;i++){
 2971              		.loc 1 163 4 is_stmt 0 view .LVU842
 2972 0194 0024     		movs	r4, #0
 2973              	.LVL269:
 2974              	.L205:
 2975              	.LBB307:
 2976              	.LBB305:
 2977              	.LBB303:
 2978              	.LBB302:
 171:Core/Src/clean_main.c **** 			}
 2979              		.loc 1 171 5 is_stmt 1 view .LVU843
 2980 0196 E0B2     		uxtb	r0, r4
 2981 0198 2946     		mov	r1, r5
 170:Core/Src/clean_main.c **** 				setBarInv(j,i);
 2982              		.loc 1 170 21 is_stmt 0 discriminator 1 view .LVU844
 2983 019a 0134     		adds	r4, r4, #1
 2984              	.LVL270:
 171:Core/Src/clean_main.c **** 			}
 2985              		.loc 1 171 5 view .LVU845
 2986 019c FFF7FEFF 		bl	setBarInv
 2987              	.LVL271:
 170:Core/Src/clean_main.c **** 				setBarInv(j,i);
 2988              		.loc 1 170 37 is_stmt 1 discriminator 3 view .LVU846
 170:Core/Src/clean_main.c **** 				setBarInv(j,i);
 2989              		.loc 1 170 21 discriminator 1 view .LVU847
 2990 01a0 0C2C     		cmp	r4, #12
 2991 01a2 F8D1     		bne	.L205
 2992              	.LBE302:
 173:Core/Src/clean_main.c **** 		}
 2993              		.loc 1 173 3 view .LVU848
 169:Core/Src/clean_main.c **** 			for(uint8_t j=0;j<FILTER_NUMBER;j++){
 2994              		.loc 1 169 25 is_stmt 0 discriminator 2 view .LVU849
 2995 01a4 0135     		adds	r5, r5, #1
 2996              	.LVL272:
 173:Core/Src/clean_main.c **** 		}
 2997              		.loc 1 173 3 view .LVU850
 2998 01a6 6420     		movs	r0, #100
 169:Core/Src/clean_main.c **** 			for(uint8_t j=0;j<FILTER_NUMBER;j++){
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 75


 2999              		.loc 1 169 25 discriminator 2 view .LVU851
 3000 01a8 EDB2     		uxtb	r5, r5
 173:Core/Src/clean_main.c **** 		}
 3001              		.loc 1 173 3 view .LVU852
 3002 01aa FFF7FEFF 		bl	HAL_Delay
 3003              	.LVL273:
 169:Core/Src/clean_main.c **** 			for(uint8_t j=0;j<FILTER_NUMBER;j++){
 3004              		.loc 1 169 25 is_stmt 1 discriminator 2 view .LVU853
 169:Core/Src/clean_main.c **** 			for(uint8_t j=0;j<FILTER_NUMBER;j++){
 3005              		.loc 1 169 20 discriminator 1 view .LVU854
 3006 01ae 0F2D     		cmp	r5, #15
 3007 01b0 F0D1     		bne	.L204
 3008              	.LBE303:
 175:Core/Src/clean_main.c **** 		nixie_state = 1;	
 3009              		.loc 1 175 3 view .LVU855
 3010 01b2 1348     		ldr	r0, .L233+24
 3011 01b4 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 3012              	.LVL274:
 176:Core/Src/clean_main.c **** 	}
 3013              		.loc 1 176 3 view .LVU856
 176:Core/Src/clean_main.c **** 	}
 3014              		.loc 1 176 15 is_stmt 0 view .LVU857
 3015 01b8 0123     		movs	r3, #1
 3016 01ba 89F80030 		strb	r3, [r9]
 3017              	.LVL275:
 3018              	.L207:
 176:Core/Src/clean_main.c **** 	}
 3019              		.loc 1 176 15 view .LVU858
 3020              	.LBE305:
 3021              	.LBE307:
 3022              	.LBE293:
 3023              	.LBE292:
 268:Core/Src/clean_main.c **** 				return;
 3024              		.loc 1 268 20 is_stmt 1 discriminator 1 view .LVU859
 268:Core/Src/clean_main.c **** 				return;
 3025              		.loc 1 268 11 is_stmt 0 discriminator 1 view .LVU860
 3026 01be FFF7FEFF 		bl	button
 3027              	.LVL276:
 268:Core/Src/clean_main.c **** 				return;
 3028              		.loc 1 268 20 discriminator 1 view .LVU861
 3029 01c2 0028     		cmp	r0, #0
 3030 01c4 98D0     		beq	.L194
 268:Core/Src/clean_main.c **** 				return;
 3031              		.loc 1 268 20 is_stmt 1 discriminator 1 view .LVU862
 268:Core/Src/clean_main.c **** 				return;
 3032              		.loc 1 268 11 is_stmt 0 discriminator 1 view .LVU863
 3033 01c6 FFF7FEFF 		bl	button
 3034              	.LVL277:
 268:Core/Src/clean_main.c **** 				return;
 3035              		.loc 1 268 20 discriminator 1 view .LVU864
 3036 01ca 0028     		cmp	r0, #0
 3037 01cc F7D1     		bne	.L207
 3038 01ce 93E7     		b	.L194
 3039              	.LVL278:
 3040              	.L230:
 268:Core/Src/clean_main.c **** 				return;
 3041              		.loc 1 268 20 discriminator 1 view .LVU865
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 76


 3042              	.LBE312:
 3043              	.LBE319:
 257:Core/Src/clean_main.c **** 	}
 3044              		.loc 1 257 3 is_stmt 1 view .LVU866
 3045 01d0 FFF7FEFF 		bl	clearDisp
 3046              	.LVL279:
 260:Core/Src/clean_main.c **** 		dprint("   Nixie spectrum          analyzer      ");
 3047              		.loc 1 260 20 is_stmt 0 view .LVU867
 3048 01d4 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 260:Core/Src/clean_main.c **** 		dprint("   Nixie spectrum          analyzer      ");
 3049              		.loc 1 260 2 is_stmt 1 view .LVU868
 260:Core/Src/clean_main.c **** 		dprint("   Nixie spectrum          analyzer      ");
 3050              		.loc 1 260 4 is_stmt 0 view .LVU869
 3051 01d6 012B     		cmp	r3, #1
 3052 01d8 7FF422AF 		bne	.L197
 3053              	.L231:
 261:Core/Src/clean_main.c **** 	}
 3054              		.loc 1 261 3 is_stmt 1 view .LVU870
 3055 01dc 0A48     		ldr	r0, .L233+32
 3056 01de FFF7FEFF 		bl	dprint
 3057              	.LVL280:
 3058 01e2 1DE7     		b	.L197
 3059              	.L234:
 3060 01e4 AFF30080 		.align	3
 3061              	.L233:
 3062 01e8 9A999999 		.word	-1717986918
 3063 01ec 9999A93F 		.word	1068079513
 3064 01f0 00000000 		.word	default_screen
 3065 01f4 ABAAAA3D 		.word	1034594987
 3066 01f8 00000000 		.word	0
 3067 01fc 00040240 		.word	1073873920
 3068 0200 00000000 		.word	htim4
 3069 0204 00000000 		.word	smooth_bar_values
 3070 0208 00000000 		.word	.LC24
 3071 020c 00000000 		.word	timeout
 3072 0210 00000000 		.word	nixie_state
 3073 0214 00000000 		.word	bar_values
 3074              		.cfi_endproc
 3075              	.LFE261:
 3077              		.section	.rodata.menu.str1.4,"aMS",%progbits,1
 3078              		.align	2
 3079              	.LC26:
 3080 0000 25642E25 		.ascii	"%d.%s\000"
 3080      7300
 3081              		.section	.text.menu,"ax",%progbits
 3082              		.align	1
 3083              		.p2align 2,,3
 3084              		.global	menu
 3085              		.syntax unified
 3086              		.thumb
 3087              		.thumb_func
 3089              	menu:
 3090              	.LFB263:
 294:Core/Src/clean_main.c **** 
 3091              		.loc 1 294 12 view -0
 3092              		.cfi_startproc
 3093              		@ args = 0, pretend = 0, frame = 88
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 77


 3094              		@ frame_needed = 0, uses_anonymous_args = 0
 296:Core/Src/clean_main.c **** 		{"Bar increment step",changeIncStep},
 3095              		.loc 1 296 2 view .LVU872
 294:Core/Src/clean_main.c **** 
 3096              		.loc 1 294 12 is_stmt 0 view .LVU873
 3097 0000 10B5     		push	{r4, lr}
 3098              		.cfi_def_cfa_offset 8
 3099              		.cfi_offset 4, -8
 3100              		.cfi_offset 14, -4
 3101 0002 96B0     		sub	sp, sp, #88
 3102              		.cfi_def_cfa_offset 96
 296:Core/Src/clean_main.c **** 		{"Bar increment step",changeIncStep},
 3103              		.loc 1 296 21 view .LVU874
 3104 0004 1949     		ldr	r1, .L243
 314:Core/Src/clean_main.c **** 		HAL_Delay(50);
 3105              		.loc 1 314 3 view .LVU875
 3106 0006 1A4C     		ldr	r4, .L243+4
 296:Core/Src/clean_main.c **** 		{"Bar increment step",changeIncStep},
 3107              		.loc 1 296 21 view .LVU876
 3108 0008 5022     		movs	r2, #80
 3109 000a 02A8     		add	r0, sp, #8
 3110 000c FFF7FEFF 		bl	memcpy
 3111              	.LVL281:
 309:Core/Src/clean_main.c **** 	uint8_t options_count = sizeof(options)/sizeof(options[0]);
 3112              		.loc 1 309 2 is_stmt 1 view .LVU877
 309:Core/Src/clean_main.c **** 	uint8_t options_count = sizeof(options)/sizeof(options[0]);
 3113              		.loc 1 309 10 is_stmt 0 view .LVU878
 3114 0010 0023     		movs	r3, #0
 3115 0012 ADF80630 		strh	r3, [sp, #6]	@ movhi
 310:Core/Src/clean_main.c **** 
 3116              		.loc 1 310 2 is_stmt 1 view .LVU879
 3117              	.LVL282:
 312:Core/Src/clean_main.c **** 		UpdateEnc(0,options_count-1, &position, false);
 3118              		.loc 1 312 2 view .LVU880
 312:Core/Src/clean_main.c **** 		UpdateEnc(0,options_count-1, &position, false);
 3119              		.loc 1 312 7 is_stmt 0 view .LVU881
 3120 0016 0FE0     		b	.L236
 3121              	.L237:
 313:Core/Src/clean_main.c **** 		dprint("%d.%s",position+1, options[position].prompt);
 3122              		.loc 1 313 3 view .LVU882
 3123 0018 FFF7FEFF 		bl	UpdateEnc
 3124              	.LVL283:
 314:Core/Src/clean_main.c **** 		HAL_Delay(50);
 3125              		.loc 1 314 3 is_stmt 1 view .LVU883
 3126 001c BDF90610 		ldrsh	r1, [sp, #6]
 3127 0020 16AB     		add	r3, sp, #88
 3128 0022 03EBC103 		add	r3, r3, r1, lsl #3
 3129 0026 2046     		mov	r0, r4
 3130 0028 53F8502C 		ldr	r2, [r3, #-80]
 3131 002c 0131     		adds	r1, r1, #1
 3132 002e FFF7FEFF 		bl	dprint
 3133              	.LVL284:
 315:Core/Src/clean_main.c **** 	}
 3134              		.loc 1 315 3 view .LVU884
 3135 0032 3220     		movs	r0, #50
 3136 0034 FFF7FEFF 		bl	HAL_Delay
 3137              	.LVL285:
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 78


 3138              	.L236:
 312:Core/Src/clean_main.c **** 		UpdateEnc(0,options_count-1, &position, false);
 3139              		.loc 1 312 16 view .LVU885
 312:Core/Src/clean_main.c **** 		UpdateEnc(0,options_count-1, &position, false);
 3140              		.loc 1 312 8 is_stmt 0 view .LVU886
 3141 0038 FFF7FEFF 		bl	button
 3142              	.LVL286:
 313:Core/Src/clean_main.c **** 		dprint("%d.%s",position+1, options[position].prompt);
 3143              		.loc 1 313 3 is_stmt 1 view .LVU887
 3144 003c 0921     		movs	r1, #9
 312:Core/Src/clean_main.c **** 		UpdateEnc(0,options_count-1, &position, false);
 3145              		.loc 1 312 8 is_stmt 0 view .LVU888
 3146 003e 0346     		mov	r3, r0
 313:Core/Src/clean_main.c **** 		dprint("%d.%s",position+1, options[position].prompt);
 3147              		.loc 1 313 3 view .LVU889
 3148 0040 0DF10602 		add	r2, sp, #6
 312:Core/Src/clean_main.c **** 		UpdateEnc(0,options_count-1, &position, false);
 3149              		.loc 1 312 16 discriminator 1 view .LVU890
 3150 0044 0028     		cmp	r0, #0
 3151 0046 E7D0     		beq	.L237
 3152              	.L238:
 317:Core/Src/clean_main.c **** 	options[position].func();
 3153              		.loc 1 317 17 is_stmt 1 discriminator 1 view .LVU891
 317:Core/Src/clean_main.c **** 	options[position].func();
 3154              		.loc 1 317 8 is_stmt 0 discriminator 1 view .LVU892
 3155 0048 FFF7FEFF 		bl	button
 3156              	.LVL287:
 317:Core/Src/clean_main.c **** 	options[position].func();
 3157              		.loc 1 317 17 discriminator 1 view .LVU893
 3158 004c 0028     		cmp	r0, #0
 3159 004e FBD1     		bne	.L238
 318:Core/Src/clean_main.c **** 	while(button() == 1);
 3160              		.loc 1 318 2 is_stmt 1 view .LVU894
 318:Core/Src/clean_main.c **** 	while(button() == 1);
 3161              		.loc 1 318 19 is_stmt 0 view .LVU895
 3162 0050 BDF90630 		ldrsh	r3, [sp, #6]
 3163 0054 16AA     		add	r2, sp, #88
 3164 0056 02EBC303 		add	r3, r2, r3, lsl #3
 318:Core/Src/clean_main.c **** 	while(button() == 1);
 3165              		.loc 1 318 2 view .LVU896
 3166 005a 53F84C3C 		ldr	r3, [r3, #-76]
 3167 005e 9847     		blx	r3
 3168              	.LVL288:
 319:Core/Src/clean_main.c **** }
 3169              		.loc 1 319 2 is_stmt 1 view .LVU897
 3170              	.L239:
 319:Core/Src/clean_main.c **** }
 3171              		.loc 1 319 17 discriminator 1 view .LVU898
 319:Core/Src/clean_main.c **** }
 3172              		.loc 1 319 8 is_stmt 0 discriminator 1 view .LVU899
 3173 0060 FFF7FEFF 		bl	button
 3174              	.LVL289:
 319:Core/Src/clean_main.c **** }
 3175              		.loc 1 319 17 discriminator 1 view .LVU900
 3176 0064 0028     		cmp	r0, #0
 3177 0066 FBD1     		bne	.L239
 320:Core/Src/clean_main.c **** 
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 79


 3178              		.loc 1 320 1 view .LVU901
 3179 0068 16B0     		add	sp, sp, #88
 3180              		.cfi_def_cfa_offset 8
 3181              		@ sp needed
 3182 006a 10BD     		pop	{r4, pc}
 3183              	.L244:
 3184              		.align	2
 3185              	.L243:
 3186 006c 00000000 		.word	.LANCHOR0
 3187 0070 00000000 		.word	.LC26
 3188              		.cfi_endproc
 3189              	.LFE263:
 3191              		.section	.rodata.clean_main.str1.4,"aMS",%progbits,1
 3192              		.align	2
 3193              	.LC27:
 3194 0000 2020204E 		.ascii	"   Nixie spectrum       analyzer V1.0   \000"
 3194      69786965 
 3194      20737065 
 3194      63747275 
 3194      6D202020 
 3195 0029 000000   		.align	2
 3196              	.LC28:
 3197 002c 20202020 		.ascii	"       Autor:        Konrad Hryniewicki \000"
 3197      20202041 
 3197      75746F72 
 3197      3A202020 
 3197      20202020 
 3198              		.section	.text.clean_main,"ax",%progbits
 3199              		.align	1
 3200              		.p2align 2,,3
 3201              		.global	clean_main
 3202              		.syntax unified
 3203              		.thumb
 3204              		.thumb_func
 3206              	clean_main:
 3207              	.LFB266:
 361:Core/Src/clean_main.c **** 
 362:Core/Src/clean_main.c **** void clean_main(){
 3208              		.loc 1 362 18 is_stmt 1 view -0
 3209              		.cfi_startproc
 3210              		@ args = 0, pretend = 0, frame = 0
 3211              		@ frame_needed = 0, uses_anonymous_args = 0
 363:Core/Src/clean_main.c **** 	//callback registration
 364:Core/Src/clean_main.c ****   	HAL_ADC_RegisterCallback(&hadc1,HAL_ADC_CONVERSION_COMPLETE_CB_ID,conversion_complete);
 3212              		.loc 1 364 4 view .LVU903
 362:Core/Src/clean_main.c **** 	//callback registration
 3213              		.loc 1 362 18 is_stmt 0 view .LVU904
 3214 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 3215              		.cfi_def_cfa_offset 24
 3216              		.cfi_offset 4, -24
 3217              		.cfi_offset 5, -20
 3218              		.cfi_offset 6, -16
 3219              		.cfi_offset 7, -12
 3220              		.cfi_offset 8, -8
 3221              		.cfi_offset 14, -4
 3222              		.loc 1 364 4 view .LVU905
 3223 0004 374A     		ldr	r2, .L258
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 80


 3224 0006 3848     		ldr	r0, .L258+4
 3225 0008 0021     		movs	r1, #0
 3226 000a FFF7FEFF 		bl	HAL_ADC_RegisterCallback
 3227              	.LVL290:
 365:Core/Src/clean_main.c ****   	HAL_TIM_RegisterCallback(&htim4, HAL_TIM_PERIOD_ELAPSED_CB_ID, cyclic_interrupt);	
 3228              		.loc 1 365 4 is_stmt 1 view .LVU906
 3229 000e 374A     		ldr	r2, .L258+8
 3230 0010 3748     		ldr	r0, .L258+12
 3231 0012 0E21     		movs	r1, #14
 3232 0014 FFF7FEFF 		bl	HAL_TIM_RegisterCallback
 3233              	.LVL291:
 366:Core/Src/clean_main.c **** 	//Set 0 on all DACs channels
 367:Core/Src/clean_main.c **** 	for(uint8_t i = 0;i<16;i++) setBar(i,0);
 3234              		.loc 1 367 2 view .LVU907
 3235              	.LBB332:
 3236              		.loc 1 367 6 view .LVU908
 3237              		.loc 1 367 21 discriminator 2 view .LVU909
 3238              	.LBE332:
 365:Core/Src/clean_main.c ****   	HAL_TIM_RegisterCallback(&htim4, HAL_TIM_PERIOD_ELAPSED_CB_ID, cyclic_interrupt);	
 3239              		.loc 1 365 4 is_stmt 0 view .LVU910
 3240 0018 0024     		movs	r4, #0
 3241              	.LVL292:
 3242              	.L246:
 3243              	.LBB333:
 3244              		.loc 1 367 30 is_stmt 1 discriminator 3 view .LVU911
 3245 001a E0B2     		uxtb	r0, r4
 3246 001c 0021     		movs	r1, #0
 3247              		.loc 1 367 21 is_stmt 0 discriminator 2 view .LVU912
 3248 001e 0134     		adds	r4, r4, #1
 3249              	.LVL293:
 3250              		.loc 1 367 30 discriminator 3 view .LVU913
 3251 0020 FFF7FEFF 		bl	setBar
 3252              	.LVL294:
 3253              		.loc 1 367 26 is_stmt 1 discriminator 3 view .LVU914
 3254              		.loc 1 367 21 discriminator 2 view .LVU915
 3255 0024 102C     		cmp	r4, #16
 3256 0026 F8D1     		bne	.L246
 3257 0028 324C     		ldr	r4, .L258+16
 3258 002a 334E     		ldr	r6, .L258+20
 3259 002c 334D     		ldr	r5, .L258+24
 3260 002e 04F19007 		add	r7, r4, #144
 3261              	.L247:
 3262              	.LVL295:
 3263              		.loc 1 367 21 is_stmt 0 discriminator 2 view .LVU916
 3264              	.LBE333:
 3265              	.LBB334:
 3266              	.LBB335:
  84:Core/Src/clean_main.c **** 	}
 3267              		.loc 1 84 3 is_stmt 1 view .LVU917
 3268 0032 2B46     		mov	r3, r5
 3269 0034 3246     		mov	r2, r6
 3270 0036 2046     		mov	r0, r4
 3271 0038 0121     		movs	r1, #1
  83:Core/Src/clean_main.c **** 		arm_biquad_cascade_df2T_init_f32(&filter[i],1,filterCoefficients[i],filterState[i]);
 3272              		.loc 1 83 19 is_stmt 0 discriminator 1 view .LVU918
 3273 003a 0C34     		adds	r4, r4, #12
 3274              	.LVL296:
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 81


  84:Core/Src/clean_main.c **** 	}
 3275              		.loc 1 84 3 view .LVU919
 3276 003c FFF7FEFF 		bl	arm_biquad_cascade_df2T_init_f32
 3277              	.LVL297:
  83:Core/Src/clean_main.c **** 		arm_biquad_cascade_df2T_init_f32(&filter[i],1,filterCoefficients[i],filterState[i]);
 3278              		.loc 1 83 37 is_stmt 1 discriminator 3 view .LVU920
  83:Core/Src/clean_main.c **** 		arm_biquad_cascade_df2T_init_f32(&filter[i],1,filterCoefficients[i],filterState[i]);
 3279              		.loc 1 83 19 discriminator 1 view .LVU921
 3280 0040 BC42     		cmp	r4, r7
 3281 0042 06F11406 		add	r6, r6, #20
 3282 0046 05F10805 		add	r5, r5, #8
 3283 004a F2D1     		bne	.L247
 3284              	.LBE335:
 3285              	.LBE334:
 368:Core/Src/clean_main.c **** 	//Initialize digital peak filters
 369:Core/Src/clean_main.c **** 	initializeFilters(FILTER_NUMBER);
 370:Core/Src/clean_main.c **** 	//Start ADC in DMA mode
 371:Core/Src/clean_main.c **** 	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)samples, BLOCK_SIZE*2);
 3286              		.loc 1 371 2 view .LVU922
 3287 004c 2C49     		ldr	r1, .L258+28
 3288 004e 2648     		ldr	r0, .L258+4
 3289              	.LBB336:
 3290              	.LBB337:
 163:Core/Src/clean_main.c **** 		for(uint8_t i=0; i<FILTER_NUMBER;i++){
 3291              		.loc 1 163 17 is_stmt 0 view .LVU923
 3292 0050 DFF8C880 		ldr	r8, .L258+56
 3293              	.LBE337:
 3294              	.LBE336:
 3295              		.loc 1 371 2 view .LVU924
 3296 0054 4FF48052 		mov	r2, #4096
 3297 0058 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 3298              	.LVL298:
 372:Core/Src/clean_main.c **** 	//Start Encoder Counter
 373:Core/Src/clean_main.c **** 	HAL_TIM_Base_Start(&htim2);
 3299              		.loc 1 373 2 is_stmt 1 view .LVU925
 3300 005c 2948     		ldr	r0, .L258+32
 3301 005e FFF7FEFF 		bl	HAL_TIM_Base_Start
 3302              	.LVL299:
 374:Core/Src/clean_main.c **** 	//Start sampling timer
 375:Core/Src/clean_main.c **** 	HAL_TIM_Base_Start(&htim3);
 3303              		.loc 1 375 2 view .LVU926
 3304 0062 2948     		ldr	r0, .L258+36
 3305 0064 FFF7FEFF 		bl	HAL_TIM_Base_Start
 3306              	.LVL300:
 376:Core/Src/clean_main.c **** 	//Start cyclic interrupt timer
 377:Core/Src/clean_main.c **** 	HAL_TIM_Base_Start_IT(&htim4);
 3307              		.loc 1 377 2 view .LVU927
 3308 0068 2148     		ldr	r0, .L258+12
 3309 006a FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 3310              	.LVL301:
 378:Core/Src/clean_main.c **** 	//Delay to let display start properly
 379:Core/Src/clean_main.c **** 	dprint("   Nixie spectrum       analyzer V1.0   ");
 3311              		.loc 1 379 2 view .LVU928
 3312 006e 2748     		ldr	r0, .L258+40
 3313 0070 FFF7FEFF 		bl	dprint
 3314              	.LVL302:
 380:Core/Src/clean_main.c **** 	HAL_Delay(2000);
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 82


 3315              		.loc 1 380 2 view .LVU929
 3316 0074 4FF4FA60 		mov	r0, #2000
 3317 0078 FFF7FEFF 		bl	HAL_Delay
 3318              	.LVL303:
 381:Core/Src/clean_main.c **** 	dprint("       Autor:        Konrad Hryniewicki ");
 3319              		.loc 1 381 2 view .LVU930
 3320 007c 2448     		ldr	r0, .L258+44
 3321 007e FFF7FEFF 		bl	dprint
 3322              	.LVL304:
 382:Core/Src/clean_main.c **** 	HAL_Delay(2000);
 3323              		.loc 1 382 2 view .LVU931
 3324 0082 4FF4FA60 		mov	r0, #2000
 3325 0086 FFF7FEFF 		bl	HAL_Delay
 3326              	.LVL305:
 383:Core/Src/clean_main.c **** 	//Proper start of nixie tubes
 384:Core/Src/clean_main.c **** 	enable_nixie();
 3327              		.loc 1 384 2 view .LVU932
 3328              	.LBB353:
 3329              	.LBI336:
 162:Core/Src/clean_main.c **** 	if(nixie_state == 0){
 3330              		.loc 1 162 6 view .LVU933
 3331              	.LBB352:
 163:Core/Src/clean_main.c **** 		for(uint8_t i=0; i<FILTER_NUMBER;i++){
 3332              		.loc 1 163 2 view .LVU934
 163:Core/Src/clean_main.c **** 		for(uint8_t i=0; i<FILTER_NUMBER;i++){
 3333              		.loc 1 163 17 is_stmt 0 view .LVU935
 3334 008a 98F80050 		ldrb	r5, [r8]	@ zero_extendqisi2
 163:Core/Src/clean_main.c **** 		for(uint8_t i=0; i<FILTER_NUMBER;i++){
 3335              		.loc 1 163 4 view .LVU936
 3336 008e 35BB     		cbnz	r5, .L245
 3337 0090 204E     		ldr	r6, .L258+48
 3338              	.LBB338:
 3339              	.LBB339:
 3340              	.LBB340:
 166:Core/Src/clean_main.c **** 		}
 3341              		.loc 1 166 25 view .LVU937
 3342 0092 0027     		movs	r7, #0
 3343              	.LBE340:
 3344              	.LBE339:
 3345              	.LBE338:
 163:Core/Src/clean_main.c **** 		for(uint8_t i=0; i<FILTER_NUMBER;i++){
 3346              		.loc 1 163 4 view .LVU938
 3347 0094 2C46     		mov	r4, r5
 3348              	.L249:
 3349              	.LVL306:
 3350              	.LBB350:
 3351              	.LBB348:
 3352              	.LBB341:
 165:Core/Src/clean_main.c **** 			smooth_bar_values[i] = 0;
 3353              		.loc 1 165 4 is_stmt 1 view .LVU939
 3354 0096 E0B2     		uxtb	r0, r4
 3355 0098 0021     		movs	r1, #0
 164:Core/Src/clean_main.c **** 			setBarInv(i,0);
 3356              		.loc 1 164 21 is_stmt 0 discriminator 1 view .LVU940
 3357 009a 0134     		adds	r4, r4, #1
 3358              	.LVL307:
 165:Core/Src/clean_main.c **** 			smooth_bar_values[i] = 0;
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 83


 3359              		.loc 1 165 4 view .LVU941
 3360 009c FFF7FEFF 		bl	setBarInv
 3361              	.LVL308:
 166:Core/Src/clean_main.c **** 		}
 3362              		.loc 1 166 4 is_stmt 1 view .LVU942
 164:Core/Src/clean_main.c **** 			setBarInv(i,0);
 3363              		.loc 1 164 21 is_stmt 0 discriminator 1 view .LVU943
 3364 00a0 0C2C     		cmp	r4, #12
 166:Core/Src/clean_main.c **** 		}
 3365              		.loc 1 166 25 view .LVU944
 3366 00a2 46F8047B 		str	r7, [r6], #4	@ float
 164:Core/Src/clean_main.c **** 			setBarInv(i,0);
 3367              		.loc 1 164 37 is_stmt 1 discriminator 3 view .LVU945
 3368              	.LVL309:
 164:Core/Src/clean_main.c **** 			setBarInv(i,0);
 3369              		.loc 1 164 21 discriminator 1 view .LVU946
 3370 00a6 F6D1     		bne	.L249
 3371              	.LBE341:
 168:Core/Src/clean_main.c **** 		for(uint8_t i=0;i<15;i++){
 3372              		.loc 1 168 3 view .LVU947
 3373              	.LVL310:
 3374              	.LBB342:
 3375              	.LBI342:
 103:Core/Src/clean_main.c **** 	HAL_GPIO_WritePin(EN_TUBE_GPIO_Port,EN_TUBE_Pin,state);
 3376              		.loc 1 103 6 view .LVU948
 3377              	.LBB343:
 104:Core/Src/clean_main.c **** }
 3378              		.loc 1 104 2 view .LVU949
 3379 00a8 1B48     		ldr	r0, .L258+52
 3380 00aa 0122     		movs	r2, #1
 3381 00ac 4FF40071 		mov	r1, #512
 3382 00b0 FFF7FEFF 		bl	HAL_GPIO_WritePin
 3383              	.LVL311:
 104:Core/Src/clean_main.c **** }
 3384              		.loc 1 104 2 is_stmt 0 view .LVU950
 3385              	.LBE343:
 3386              	.LBE342:
 169:Core/Src/clean_main.c **** 			for(uint8_t j=0;j<FILTER_NUMBER;j++){
 3387              		.loc 1 169 3 is_stmt 1 view .LVU951
 3388              	.LBB344:
 169:Core/Src/clean_main.c **** 			for(uint8_t j=0;j<FILTER_NUMBER;j++){
 3389              		.loc 1 169 7 view .LVU952
 169:Core/Src/clean_main.c **** 			for(uint8_t j=0;j<FILTER_NUMBER;j++){
 3390              		.loc 1 169 20 discriminator 1 view .LVU953
 3391              	.L250:
 3392              	.LBB345:
 170:Core/Src/clean_main.c **** 				setBarInv(j,i);
 3393              		.loc 1 170 21 discriminator 1 view .LVU954
 3394              	.LBE345:
 3395              	.LBE344:
 3396              	.LBE348:
 3397              	.LBE350:
 163:Core/Src/clean_main.c **** 		for(uint8_t i=0; i<FILTER_NUMBER;i++){
 3398              		.loc 1 163 4 is_stmt 0 view .LVU955
 3399 00b4 0024     		movs	r4, #0
 3400              	.LVL312:
 3401              	.L251:
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 84


 3402              	.LBB351:
 3403              	.LBB349:
 3404              	.LBB347:
 3405              	.LBB346:
 171:Core/Src/clean_main.c **** 			}
 3406              		.loc 1 171 5 is_stmt 1 view .LVU956
 3407 00b6 E0B2     		uxtb	r0, r4
 3408 00b8 2946     		mov	r1, r5
 170:Core/Src/clean_main.c **** 				setBarInv(j,i);
 3409              		.loc 1 170 21 is_stmt 0 discriminator 1 view .LVU957
 3410 00ba 0134     		adds	r4, r4, #1
 3411              	.LVL313:
 171:Core/Src/clean_main.c **** 			}
 3412              		.loc 1 171 5 view .LVU958
 3413 00bc FFF7FEFF 		bl	setBarInv
 3414              	.LVL314:
 170:Core/Src/clean_main.c **** 				setBarInv(j,i);
 3415              		.loc 1 170 37 is_stmt 1 discriminator 3 view .LVU959
 170:Core/Src/clean_main.c **** 				setBarInv(j,i);
 3416              		.loc 1 170 21 discriminator 1 view .LVU960
 3417 00c0 0C2C     		cmp	r4, #12
 3418 00c2 F8D1     		bne	.L251
 3419              	.LBE346:
 173:Core/Src/clean_main.c **** 		}
 3420              		.loc 1 173 3 view .LVU961
 169:Core/Src/clean_main.c **** 			for(uint8_t j=0;j<FILTER_NUMBER;j++){
 3421              		.loc 1 169 25 is_stmt 0 discriminator 2 view .LVU962
 3422 00c4 0135     		adds	r5, r5, #1
 3423              	.LVL315:
 173:Core/Src/clean_main.c **** 		}
 3424              		.loc 1 173 3 view .LVU963
 3425 00c6 6420     		movs	r0, #100
 169:Core/Src/clean_main.c **** 			for(uint8_t j=0;j<FILTER_NUMBER;j++){
 3426              		.loc 1 169 25 discriminator 2 view .LVU964
 3427 00c8 EDB2     		uxtb	r5, r5
 173:Core/Src/clean_main.c **** 		}
 3428              		.loc 1 173 3 view .LVU965
 3429 00ca FFF7FEFF 		bl	HAL_Delay
 3430              	.LVL316:
 169:Core/Src/clean_main.c **** 			for(uint8_t j=0;j<FILTER_NUMBER;j++){
 3431              		.loc 1 169 25 is_stmt 1 discriminator 2 view .LVU966
 169:Core/Src/clean_main.c **** 			for(uint8_t j=0;j<FILTER_NUMBER;j++){
 3432              		.loc 1 169 20 discriminator 1 view .LVU967
 3433 00ce 0F2D     		cmp	r5, #15
 3434 00d0 F0D1     		bne	.L250
 3435              	.LBE347:
 175:Core/Src/clean_main.c **** 		nixie_state = 1;	
 3436              		.loc 1 175 3 view .LVU968
 3437 00d2 0748     		ldr	r0, .L258+12
 3438 00d4 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 3439              	.LVL317:
 176:Core/Src/clean_main.c **** 	}
 3440              		.loc 1 176 3 view .LVU969
 176:Core/Src/clean_main.c **** 	}
 3441              		.loc 1 176 15 is_stmt 0 view .LVU970
 3442 00d8 0123     		movs	r3, #1
 3443 00da 88F80030 		strb	r3, [r8]
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 85


 3444              	.LVL318:
 3445              	.L245:
 176:Core/Src/clean_main.c **** 	}
 3446              		.loc 1 176 15 view .LVU971
 3447              	.LBE349:
 3448              	.LBE351:
 3449              	.LBE352:
 3450              	.LBE353:
 385:Core/Src/clean_main.c **** 
 386:Core/Src/clean_main.c **** }
 3451              		.loc 1 386 1 view .LVU972
 3452 00de BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3453              	.L259:
 3454 00e2 00BF     		.align	2
 3455              	.L258:
 3456 00e4 00000000 		.word	conversion_complete
 3457 00e8 00000000 		.word	hadc1
 3458 00ec 00000000 		.word	cyclic_interrupt
 3459 00f0 00000000 		.word	htim4
 3460 00f4 00000000 		.word	filter
 3461 00f8 00000000 		.word	filterCoefficients
 3462 00fc 00000000 		.word	filterState
 3463 0100 00000000 		.word	samples
 3464 0104 00000000 		.word	htim2
 3465 0108 00000000 		.word	htim3
 3466 010c 00000000 		.word	.LC27
 3467 0110 2C000000 		.word	.LC28
 3468 0114 00000000 		.word	smooth_bar_values
 3469 0118 00040240 		.word	1073873920
 3470 011c 00000000 		.word	nixie_state
 3471              		.cfi_endproc
 3472              	.LFE266:
 3474              		.section	.text.clean_loop,"ax",%progbits
 3475              		.align	1
 3476              		.p2align 2,,3
 3477              		.global	clean_loop
 3478              		.syntax unified
 3479              		.thumb
 3480              		.thumb_func
 3482              	clean_loop:
 3483              	.LFB267:
 387:Core/Src/clean_main.c **** 
 388:Core/Src/clean_main.c **** void clean_loop(){
 3484              		.loc 1 388 18 is_stmt 1 view -0
 3485              		.cfi_startproc
 3486              		@ args = 0, pretend = 0, frame = 0
 3487              		@ frame_needed = 0, uses_anonymous_args = 0
 389:Core/Src/clean_main.c **** 	defaultScreen();
 3488              		.loc 1 389 2 view .LVU974
 388:Core/Src/clean_main.c **** 	defaultScreen();
 3489              		.loc 1 388 18 is_stmt 0 view .LVU975
 3490 0000 08B5     		push	{r3, lr}
 3491              		.cfi_def_cfa_offset 8
 3492              		.cfi_offset 3, -8
 3493              		.cfi_offset 14, -4
 3494              		.loc 1 389 2 view .LVU976
 3495 0002 FFF7FEFF 		bl	defaultScreen
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 86


 3496              	.LVL319:
 390:Core/Src/clean_main.c **** 	menu();
 3497              		.loc 1 390 2 is_stmt 1 view .LVU977
 391:Core/Src/clean_main.c **** }
 3498              		.loc 1 391 1 is_stmt 0 view .LVU978
 3499 0006 BDE80840 		pop	{r3, lr}
 3500              		.cfi_restore 14
 3501              		.cfi_restore 3
 3502              		.cfi_def_cfa_offset 0
 390:Core/Src/clean_main.c **** 	menu();
 3503              		.loc 1 390 2 view .LVU979
 3504 000a FFF7FEBF 		b	menu
 3505              	.LVL320:
 3506              		.cfi_endproc
 3507              	.LFE267:
 3509 000e 00BF     		.section	.rodata.str1.4,"aMS",%progbits,1
 3510              		.align	2
 3511              	.LC0:
 3512 0000 42617220 		.ascii	"Bar increment step\000"
 3512      696E6372 
 3512      656D656E 
 3512      74207374 
 3512      657000
 3513 0013 00       		.align	2
 3514              	.LC1:
 3515 0014 53616D70 		.ascii	"Sampling mode\000"
 3515      6C696E67 
 3515      206D6F64 
 3515      6500
 3516 0022 0000     		.align	2
 3517              	.LC2:
 3518 0024 4368616E 		.ascii	"Change timeout\000"
 3518      67652074 
 3518      696D656F 
 3518      757400
 3519 0033 00       		.align	2
 3520              	.LC3:
 3521 0034 4368616E 		.ascii	"Change default      screen\000"
 3521      67652064 
 3521      65666175 
 3521      6C742020 
 3521      20202020 
 3522 004f 00       		.align	2
 3523              	.LC4:
 3524 0050 54657374 		.ascii	"Test DAC\000"
 3524      20444143 
 3524      00
 3525 0059 000000   		.align	2
 3526              	.LC5:
 3527 005c 54657374 		.ascii	"Test all DAC\000"
 3527      20616C6C 
 3527      20444143 
 3527      00
 3528 0069 000000   		.align	2
 3529              	.LC6:
 3530 006c 54657374 		.ascii	"Test filter output\000"
 3530      2066696C 
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 87


 3530      74657220 
 3530      6F757470 
 3530      757400
 3531 007f 00       		.align	2
 3532              	.LC7:
 3533 0080 5475726E 		.ascii	"Turn nixie off\000"
 3533      206E6978 
 3533      6965206F 
 3533      666600
 3534 008f 00       		.align	2
 3535              	.LC8:
 3536 0090 5475726E 		.ascii	"Turn nixie on\000"
 3536      206E6978 
 3536      6965206F 
 3536      6E00
 3537 009e 0000     		.align	2
 3538              	.LC9:
 3539 00a0 45786974 		.ascii	"Exit\000"
 3539      00
 3540              		.global	smooth_bar_values
 3541              		.section	.bss.smooth_bar_values,"aw",%nobits
 3542              		.align	2
 3545              	smooth_bar_values:
 3546 0000 00000000 		.space	48
 3546      00000000 
 3546      00000000 
 3546      00000000 
 3546      00000000 
 3547              		.global	bar_values
 3548              		.section	.bss.bar_values,"aw",%nobits
 3549              		.align	2
 3552              	bar_values:
 3553 0000 00000000 		.space	48
 3553      00000000 
 3553      00000000 
 3553      00000000 
 3553      00000000 
 3554              		.global	filterIn
 3555              		.section	.bss.filterIn,"aw",%nobits
 3556              		.align	2
 3559              	filterIn:
 3560 0000 00000000 		.space	8192
 3560      00000000 
 3560      00000000 
 3560      00000000 
 3560      00000000 
 3561              		.global	samples
 3562              		.section	.bss.samples,"aw",%nobits
 3563              		.align	2
 3566              	samples:
 3567 0000 00000000 		.space	8192
 3567      00000000 
 3567      00000000 
 3567      00000000 
 3567      00000000 
 3568              		.global	filter
 3569              		.section	.bss.filter,"aw",%nobits
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 88


 3570              		.align	2
 3573              	filter:
 3574 0000 00000000 		.space	144
 3574      00000000 
 3574      00000000 
 3574      00000000 
 3574      00000000 
 3575              		.global	filterOut
 3576              		.section	.bss.filterOut,"aw",%nobits
 3577              		.align	2
 3580              	filterOut:
 3581 0000 00000000 		.space	98304
 3581      00000000 
 3581      00000000 
 3581      00000000 
 3581      00000000 
 3582              		.global	gain
 3583              		.section	.data.gain,"aw"
 3584              		.align	2
 3587              	gain:
 3588 0000 5B99A93A 		.word	984193371
 3589 0004 6641143B 		.word	991183206
 3590 0008 3536813B 		.word	998323765
 3591 000c 498CDE3B 		.word	1004440649
 3592 0010 184F403C 		.word	1010847512
 3593 0014 7B86A73C 		.word	1017611899
 3594 0018 A3590E3D 		.word	1024350627
 3595 001c D46D6C3D 		.word	1030516180
 3596 0020 3A45C83D 		.word	1036535098
 3597 0024 6B06233E 		.word	1042482795
 3598 0028 E1AB803E 		.word	1048620001
 3599 002c A679C93E 		.word	1053391270
 3600              		.global	filterCoefficients
 3601              		.section	.data.filterCoefficients,"aw"
 3602              		.align	2
 3605              	filterCoefficients:
 3606 0000 0000803F 		.word	1065353216
 3607 0004 00000000 		.word	0
 3608 0008 000080BF 		.word	-1082130432
 3609 000c 88AAFF3F 		.word	1073719944
 3610 0010 67567FBF 		.word	-1082173849
 3611 0014 0000803F 		.word	1065353216
 3612 0018 00000000 		.word	0
 3613 001c 000080BF 		.word	-1082130432
 3614 0020 B269FF3F 		.word	1073703346
 3615 0024 7DD77EBF 		.word	-1082206339
 3616 0028 0000803F 		.word	1065353216
 3617 002c 00000000 		.word	0
 3618 0030 000080BF 		.word	-1082130432
 3619 0034 57F7FE3F 		.word	1073674071
 3620 0038 27FB7DBF 		.word	-1082262745
 3621 003c 0000803F 		.word	1065353216
 3622 0040 00000000 		.word	0
 3623 0044 000080BF 		.word	-1082130432
 3624 0048 5A30FE3F 		.word	1073623130
 3625 004c CF857CBF 		.word	-1082358321
 3626 0050 0000803F 		.word	1065353216
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 89


 3627 0054 00000000 		.word	0
 3628 0058 000080BF 		.word	-1082130432
 3629 005c 15C7FC3F 		.word	1073530645
 3630 0060 87FD79BF 		.word	-1082524281
 3631 0064 0000803F 		.word	1065353216
 3632 0068 00000000 		.word	0
 3633 006c 000080BF 		.word	-1082130432
 3634 0070 5D19FA3F 		.word	1073355101
 3635 0074 988775BF 		.word	-1082816616
 3636 0078 0000803F 		.word	1065353216
 3637 007c 00000000 		.word	0
 3638 0080 000080BF 		.word	-1082130432
 3639 0084 9627F53F 		.word	1073031062
 3640 0088 CC346EBF 		.word	-1083296564
 3641 008c 0000803F 		.word	1065353216
 3642 0090 00000000 		.word	0
 3643 0094 000080BF 		.word	-1082130432
 3644 0098 5FBDEB3F 		.word	1072414047
 3645 009c 457262BF 		.word	-1084067259
 3646 00a0 0000803F 		.word	1065353216
 3647 00a4 00000000 		.word	0
 3648 00a8 000080BF 		.word	-1082130432
 3649 00ac 37BFD63F 		.word	1071038263
 3650 00b0 B1EE4DBF 		.word	-1085411663
 3651 00b4 0000803F 		.word	1065353216
 3652 00b8 00000000 		.word	0
 3653 00bc 000080BF 		.word	-1082130432
 3654 00c0 C6E6AA3F 		.word	1068164806
 3655 00c4 CA7C2EBF 		.word	-1087472438
 3656 00c8 0000803F 		.word	1065353216
 3657 00cc 00000000 		.word	0
 3658 00d0 000080BF 		.word	-1082130432
 3659 00d4 A036233F 		.word	1059272352
 3660 00d8 3EA8FEBE 		.word	-1090607042
 3661 00dc 0000803F 		.word	1065353216
 3662 00e0 00000000 		.word	0
 3663 00e4 000080BF 		.word	-1082130432
 3664 00e8 0D3704BF 		.word	-1090242803
 3665 00ec 69195ABE 		.word	-1101391511
 3666              		.global	filterState
 3667              		.section	.bss.filterState,"aw",%nobits
 3668              		.align	2
 3671              	filterState:
 3672 0000 00000000 		.space	96
 3672      00000000 
 3672      00000000 
 3672      00000000 
 3672      00000000 
 3673              		.global	timeout
 3674              		.section	.data.timeout,"aw"
 3675              		.align	1
 3678              	timeout:
 3679 0000 0A00     		.short	10
 3680              		.global	default_screen
 3681              		.section	.bss.default_screen,"aw",%nobits
 3684              	default_screen:
 3685 0000 00       		.space	1
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 90


 3686              		.global	step_size
 3687              		.section	.data.step_size,"aw"
 3690              	step_size:
 3691 0000 05       		.byte	5
 3692              		.global	operating_mode
 3693              		.section	.bss.operating_mode,"aw",%nobits
 3696              	operating_mode:
 3697 0000 00       		.space	1
 3698              		.global	nixie_state
 3699              		.section	.bss.nixie_state,"aw",%nobits
 3702              	nixie_state:
 3703 0000 00       		.space	1
 3704              		.global	offset
 3705              		.section	.data.offset,"aw"
 3706              		.align	2
 3709              	offset:
 3710 0000 0FC4EF3D 		.word	1039123471
 3711              		.global	measured_us
 3712              		.section	.bss.measured_us,"aw",%nobits
 3713              		.align	1
 3716              	measured_us:
 3717 0000 0000     		.space	2
 3718              		.global	stan_enc
 3719              		.section	.bss.stan_enc,"aw",%nobits
 3720              		.align	1
 3723              	stan_enc:
 3724 0000 0000     		.space	2
 3725              		.section	.rodata
 3726              		.align	2
 3727              		.set	.LANCHOR0,. + 0
 3728              	.LC25:
 3729 0000 00000000 		.word	.LC0
 3730 0004 00000000 		.word	changeIncStep
 3731 0008 14000000 		.word	.LC1
 3732 000c 00000000 		.word	changeSamplingMode
 3733 0010 24000000 		.word	.LC2
 3734 0014 00000000 		.word	changeTimeout
 3735 0018 34000000 		.word	.LC3
 3736 001c 00000000 		.word	changeDefaultScreen
 3737 0020 50000000 		.word	.LC4
 3738 0024 00000000 		.word	testDAC
 3739 0028 5C000000 		.word	.LC5
 3740 002c 00000000 		.word	testAllDac
 3741 0030 6C000000 		.word	.LC6
 3742 0034 00000000 		.word	TestFilterOut
 3743 0038 80000000 		.word	.LC7
 3744 003c 00000000 		.word	disable_nixie
 3745 0040 90000000 		.word	.LC8
 3746 0044 00000000 		.word	enable_nixie
 3747 0048 A0000000 		.word	.LC9
 3748 004c 00000000 		.word	exitMenu
 3749              		.text
 3750              	.Letext0:
 3751              		.file 2 "C:/Users/Konrad/AppData/Roaming/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-t
 3752              		.file 3 "C:/Users/Konrad/AppData/Roaming/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-t
 3753              		.file 4 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f411xe.h"
 3754              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 91


 3755              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 3756              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 3757              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 3758              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 3759              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 3760              		.file 11 "Core/Inc/adc.h"
 3761              		.file 12 "Core/Inc/tim.h"
 3762              		.file 13 "Core/Inc/arm_math.h"
 3763              		.file 14 "Core/Inc/dac_driver.h"
 3764              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 3765              		.file 16 "Core/Inc/enc_disp.h"
 3766              		.file 17 "<built-in>"
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 92


DEFINED SYMBOLS
                            *ABS*:00000000 clean_main.c
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:19     .text.exitMenu:00000000 $t
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:26     .text.exitMenu:00000000 exitMenu
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:41     .rodata.TestFilterOut.str1.4:00000000 $d
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:45     .text.TestFilterOut:00000000 $t
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:52     .text.TestFilterOut:00000000 TestFilterOut
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:128    .text.TestFilterOut:0000004c $d
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:3723   .bss.stan_enc:00000000 stan_enc
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:3552   .bss.bar_values:00000000 bar_values
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:3716   .bss.measured_us:00000000 measured_us
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:136    .rodata.changeSamplingMode.str1.4:00000000 $d
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:146    .text.changeSamplingMode:00000000 $t
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:153    .text.changeSamplingMode:00000000 changeSamplingMode
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:251    .text.changeSamplingMode:0000005c $d
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:3696   .bss.operating_mode:00000000 operating_mode
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:260    .rodata.changeIncStep.str1.4:00000000 $d
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:264    .text.changeIncStep:00000000 $t
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:271    .text.changeIncStep:00000000 changeIncStep
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:333    .text.changeIncStep:00000034 $d
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:3690   .data.step_size:00000000 step_size
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:340    .rodata.changeTimeout.str1.4:00000000 $d
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:344    .text.changeTimeout:00000000 $t
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:351    .text.changeTimeout:00000000 changeTimeout
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:419    .text.changeTimeout:0000003c $d
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:3678   .data.timeout:00000000 timeout
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:426    .rodata.changeDefaultScreen.str1.4:00000000 $d
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:436    .text.changeDefaultScreen:00000000 $t
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:443    .text.changeDefaultScreen:00000000 changeDefaultScreen
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:541    .text.changeDefaultScreen:0000005c $d
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:3684   .bss.default_screen:00000000 default_screen
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:556    .text.cyclic_interrupt:00000000 $t
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:563    .text.cyclic_interrupt:00000000 cyclic_interrupt
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:711    .text.cyclic_interrupt:000000c0 $d
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:3545   .bss.smooth_bar_values:00000000 smooth_bar_values
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:3709   .data.offset:00000000 offset
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:723    .text.disable_nixie:00000000 $t
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:730    .text.disable_nixie:00000000 disable_nixie
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:770    .text.disable_nixie:0000001c $d
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:3702   .bss.nixie_state:00000000 nixie_state
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:777    .text.conversion_complete:00000000 $t
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:784    .text.conversion_complete:00000000 conversion_complete
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:1087   .text.conversion_complete:00000160 $d
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:3566   .bss.samples:00000000 samples
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:3559   .bss.filterIn:00000000 filterIn
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:3587   .data.gain:00000000 gain
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:3580   .bss.filterOut:00000000 filterOut
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:3573   .bss.filter:00000000 filter
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:1106   .text.enable_nixie:00000000 $t
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:1113   .text.enable_nixie:00000000 enable_nixie
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:1251   .text.enable_nixie:00000060 $d
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:1259   .rodata.testDAC.str1.4:00000000 $d
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:1269   .text.testDAC:00000000 $t
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:1276   .text.testDAC:00000000 testDAC
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:1615   .text.testDAC:00000120 $d
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:1627   .rodata.testAllDac.str1.4:00000000 $d
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:1631   .text.testAllDac:00000000 $t
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 93


C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:1638   .text.testAllDac:00000000 testAllDac
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:2208   .text.testAllDac:00000174 $d
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:2220   .text.initializeFilters:00000000 $t
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:2227   .text.initializeFilters:00000000 initializeFilters
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:2289   .text.initializeFilters:0000002c $d
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:3671   .bss.filterState:00000000 filterState
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:3605   .data.filterCoefficients:00000000 filterCoefficients
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:2296   .text.processBand:00000000 $t
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:2303   .text.processBand:00000000 processBand
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:2425   .text.processBand:00000088 $d
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:2434   .text.switchTube:00000000 $t
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:2441   .text.switchTube:00000000 switchTube
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:2463   .text.switchTube:0000000c $d
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:2468   .rodata.defaultScreen.str1.4:00000000 $d
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:2473   .text.defaultScreen:00000000 $t
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:2480   .text.defaultScreen:00000000 defaultScreen
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:3062   .text.defaultScreen:000001e8 $d
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:3078   .rodata.menu.str1.4:00000000 $d
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:3082   .text.menu:00000000 $t
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:3089   .text.menu:00000000 menu
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:3186   .text.menu:0000006c $d
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:3192   .rodata.clean_main.str1.4:00000000 $d
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:3199   .text.clean_main:00000000 $t
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:3206   .text.clean_main:00000000 clean_main
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:3456   .text.clean_main:000000e4 $d
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:3475   .text.clean_loop:00000000 $t
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:3482   .text.clean_loop:00000000 clean_loop
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:3510   .rodata.str1.4:00000000 $d
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:3542   .bss.smooth_bar_values:00000000 $d
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:3549   .bss.bar_values:00000000 $d
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:3556   .bss.filterIn:00000000 $d
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:3563   .bss.samples:00000000 $d
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:3570   .bss.filter:00000000 $d
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:3577   .bss.filterOut:00000000 $d
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:3584   .data.gain:00000000 $d
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:3602   .data.filterCoefficients:00000000 $d
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:3668   .bss.filterState:00000000 $d
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:3675   .data.timeout:00000000 $d
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:3685   .bss.default_screen:00000000 $d
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:3697   .bss.operating_mode:00000000 $d
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:3703   .bss.nixie_state:00000000 $d
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:3706   .data.offset:00000000 $d
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:3713   .bss.measured_us:00000000 $d
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:3720   .bss.stan_enc:00000000 $d
C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s:3726   .rodata:00000000 $d

UNDEFINED SYMBOLS
__aeabi_f2d
UpdateEnc
dprint
HAL_Delay
button
__aeabi_i2d
__aeabi_dmul
__aeabi_dadd
__aeabi_d2f
__aeabi_dsub
ARM GAS  C:\Users\Konrad\AppData\Local\Temp\cci70PDU.s 			page 94


__aeabi_d2uiz
setBarInv
HAL_TIM_Base_Stop_IT
HAL_GPIO_WritePin
htim4
HAL_TIM_Base_Start
arm_biquad_cascade_df2T_f32
HAL_TIM_Base_Stop
htim1
HAL_TIM_Base_Start_IT
dac_write
setBar
arm_biquad_cascade_df2T_init_f32
__aeabi_dcmpgt
clearDisp
memcpy
HAL_ADC_RegisterCallback
HAL_TIM_RegisterCallback
HAL_ADC_Start_DMA
hadc1
htim2
htim3
